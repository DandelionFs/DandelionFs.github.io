[{"categories":null,"content":"Getting Things Done, 直接翻译为“把事情做完”，本身就很可能让人误解成——你必须做完所有的事情。但其实，“把你需要做的事情列出来，并处理它” 和“把事情做完”是两件完全不同的事情。而 GTD 所强调的，是前者。\n本文源于 Topbook 的免费公开课, 课程的名称是 重新认识 GTD，把事情做好，而不是把事情做完, 写作的目的是落实到自己身上. 所以只截取有用的部分.\nGTD   GTD 实践为:\n 收集箱（Inbox） 执行清单（”Context” task）: 短时间内定能干掉.  你不可能完成所有事情 要事第一（First Things First）：尽可能做离你目标更近的事情 为特别事件预留时间：每天预留半个钟消灭执行清单的其他事情 番茄钟提高短期效率   等待清单（”Waiting for“ task）: 等待客观条件允许  提前准备提醒对方 临近时间督促对方   项目清单（“Plan project“ task）  同步更新到执行清单。   可能清单（Someday / maybe）  你要专门为它做计划，而不是想想就做。   参考资料（Reference）  Info Channels   回收箱（Trash）  也可能变成可以做的事情      GTD的原理为:\n 捕获（Capture） 明晰（Clarify）: 主要思考的流程图如下:   组织（Organize） 回顾（Reflect）1  从收集箱出去的项目永远不要再放回收集箱。 项目清单中的事项需要你主动将其拆解，步骤，并为其谋划执行方案，把大项目拆解成小步骤，并分解到其他清单当中。 主动确定等待清单是否被完成，回收箱和可能清单中的事项是否有变动（变成可执行或其他）。 日历或提醒事项应用中的提醒是否恰当，是否要流出裕量时间。   执行（Engage）    全局复盘:\n  REFERENCE [1]. https://tingtalk.me/gtd/","description":"","title":"GTD Time Manage","uri":"/blog/posts/2021-01-26-gtd-time-manage/"},{"categories":null,"content":"世界上现在有 60 多种被开源促进组织（ Open Source Initiative）认可的开源许可协议来保证开源工作者的权益. 本文涉及的协议有: AL, CC, GPL, LGPL, BSD等协议.\n 开源共享精神: 软件程序与源代码文件一起打包提供给用户, 让用户在不受限制地使用某个软件功能的基础上还可以按需进行修改, 或编制成衍生产品再发布出去. 用户具有使用自由、修改自由、重新发布自由以及创建衍生品的自由. 特点: 低风险、高品质、低成本、更透明  稻盛和夫 在《活法》中有这样一段话：\n **“工作马马虎虎, 只想在兴趣和游戏中寻觅快活, 充其量只能获得一时的快感, 绝不能尝到从心底涌出的惊喜和快乐, 但来自工作的喜悦并不像糖果那样放进嘴里說甜味十足, 而是需要从苦劳与艰辛中渗出, 因此当我们聚精会神, 孜孜不倦, 克服艰辛后的成就感, 世上没有哪种喜悦可以类比”. **\n**“更何况人类生活中工作占据了较大的比重, 如果不能从劳动中、工作中获得充实感, 那么即使从别的地方找到快乐, 最终我们仍然会感到空虚和缺憾”. **\n AL 即 Apache License. 在为开发人员提供版权及专利许可的同时, 允许用户拥有修改代码及再发布的自由. 该许可协议适用于商业软件, 现在热门的 Hadoop、 Apache HTTP Server、 MongoDB 等项目都是基于该许可协议研发的,程序开发人员在开发遵循该协议的软件时, 要严格遵守下面的 4 个条件：\n 该软件及其衍生品必须继续使用 Apache 许可协议. 如果修改了程序源代码, 需要在文档中进行声明. 若软件是基于他人的源代码编写而成的, 则需要保留原始代码的协议、商标、专利声明及其他原作者声明的内容信息. 如果再发布的软件中有声明文件, 则需在此文件中标注 Apache 许可协议及其他许可协议.  使用协议的产品  我下载了apache的一个jar包, 在我自己的盈利性公司的产品里用上了. 我没有更改任何下载下来的东西, 只是用了它. 之后我可以发布我自己的新产品了. 那么我要向apache交费么？1\n A: 可以商用不需要交费. 要带license. 作者有权利控告你, 虽然你有使用权, 然而你没有拥有权, 你必须在你的产品中注明第三方的代码来源；另外, 虽然你有商业使用权, 然而你无法阻止别人使用相同的源码（包括原作者）\n Grant of Patent License. 专利许可的授予 Grant of Copyright License. 版权许可的授予  Link  Apache Licence 2.0  CC 即Creative Commons licenses, 一系列许可证的总称.\n起源  自从版权制度（copyright）确立以后, 很多人感到, 虽然它保护了作者的利益, 但是却剥夺了使用者的自由. 除了费用以外, 一个主要的问题是, 通行的版权协议是一种限制性的协议, 就是说, 只有它明文许可你可以做的事, 你才能做, 否则就是侵权行为. 这样不仅很不方便, 而且阻碍了作品的传播, 违背社会公共利益, 尤其是在新传播方式层出不穷的网络时代. 因此, 一些有识之士决定找到一种新的方法, 在版权制度的合法框架下, 使得人们可以自由使用他人的作品. 这种新方法就是**\"开放内容许可证\"（open content licenses）**. 简单说, 就是作者为自己的作品选择一种许可证一起发布, 然后这些许可证本身都是开放式协议, 就是说, 它只明文禁止使用者不能做的事, 除此以外, 可以随意使用这些作品.\n 创作共用许可证（Creative Commons licenses, 简称cc）, 就是这样一种许可证. 它是由成立于2001年的美国Creative Commons基金会, 在2002年12月16日提出的.\n \"保留所有权利\"（all rights reserved） 是 一般的版权协议（full copyright） 的基本内容, 即所有与作品有关的权利都归版权持有人所有. 公共领域（public domain）的作品是没有版权的, 所有权利都归使用者. 创作共用许可证, 则是在两个极端之间. 它只保留几种了权利（some rights reserved）, 除此以外的权利全部放弃. 当你在网上（或者其他地方）发布自己的作品时, 如果允许他人自由使用, 那么最好选择一种许可证一起发布. 因为, **如果你不同时发布许可证的话, 根据版权法, 你的作品就拥有完全的版权, 默认保留所有权利, 即便这不是你的意愿. ** 从小处说, 这阻碍了作品的传播. 从大处说, 这限制了他人的自由, 最终也会限制你自己的自由. 所以, 尽可能为作品选择一种许可证一起发布, 这是很重要的.  基本权利（Baseline Rights） 一旦选择了一种许可证, 并且公开发布以后, 就不能够收回了. 这个许可证在整个版权保护期内, 对全世界的使用者都是有效的. 对应不同的司法管辖区, 创作共用许可证有不同的地区版本. 另外, 创作共用许可证一直在修订, 最新的是4.0版, 但是一部分地区还在使用3.0版. 2\n 下面这些权利是你自动让渡给使用者的：  复制作品； 散发作品； 公开展示或表演作品； 将作品完全一致地转化成另一种格式.   使用者来说, 必须遵守一些许可证设置的前提条件:  没有得到许可, 不得实施许可证中禁止的行为； 所有的复制件上, 都必须保留原始的版权说明和许可证的链接； 不得更改许可证的内容； 不得用技术手段限制其他人合法使用作品.   使用创作共用许可证, 作者可以选择保留四种权利.  署名（Attribution, 简写为by）：必须提到原作者. 非商业用途（Noncommercial, 简写为nc）：不得用于盈利性目的. 禁止演绎（No Derivative Works, 简写为nd）：不得修改原作品. 相同方式共享（Share Alike, 简写为sa）： 如果允许修改原作品, 那么必须使用相同的许可证发布. 16种组合中, 有5种是无效的：1种是4种权利都放弃（公共领域作品）；另外4种是不能同时选择禁止演绎和相同方式共享, 这两种权利. 在剩下的11种组合中, 由于绝大多数人都要求保留署名权, 因此又可以排除5种. 最终只留下了6种组合, 绝大多数创作共用许可证都属于这6种组合之一：  署名（by license）——最宽松 署名-非商业用途（by-nc license） 署名-禁止演绎（by-nd license） 署名-非商业用途-禁止演绎（by-nc-nd license）——限制最 署名-非商业用途-相同方式共享（by-nc-sa license） 署名-相同方式共享（by-sa license）      LINK  Creative Commons Org Creative Commons TW  GPL 即GNU General Public License .\n只要软件中包含了遵循 GPL 协议的产品或代码, 该软件就必须也遵循 GPL 许可协议且开源、 免费, 因此这个协议并不适合商用软件. 遵循该协议的开源软件数量极其庞大, 包括 Linux系统在内的大多数的开源软件都是基于这个协议的. GPL 开源许可协议最大的 4 个特点：\n 复制自由：允许把软件复制到任何人的电脑中, 并且不限制复制的数量. 传播自由： 允许软件以各种形式进行传播. 收费传播：允许在各种媒介上出售该软件, 但必须提前让买家知道这个软件是可以免费获得的；因此, 一般来讲, 开源软件都是通过为用户提供有偿服务的形式来盈利的. 修改自由：允许开发人员增加或删除软件的功能, 但软件修改后必须依然基于GPL 许可协议授权.  LGPL 即GNU Lesser General Public License. 是GPL的一个为主要为类库使用设计的开源协议.\n主要区别在于LGPL允许将作品与非（L）GPL程序（如果是“使用”的库）链接在一起, 无论它是自由软件还是 专有软件. 在LGPL 2.1中, 如果非（L）GPLed程序不是派生作品, 则可以按照任何条款进行分发. 如果是衍生作品, 则程序的条款必须允许“对作品进行修改以供客户自己使用, 并进行逆向工程以调试此类修改. ” 使用LGPL程序的作品是否为衍生作品是一个法律问题. 通过.so, .dll或类似媒体动态链接到库的独立可执行文件通常被认为不是LGPL定义的衍生作品. 它将属于“使用图书馆的作品”的定义. LGPL 2.1版的第5段规定：3\n A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n BSD 即 Berkeley Software Distribution. 由于允许使用者修改和重新发布代码, 也允许使用或在BSD代码上开发商业软件发布和销 售, 因此是对商业集成很友好的协议, 因为公司企业可以完全控制这些第三方的代码, 在必要的时候可以修改或者 二次开发.\n用户可以使用、修改和重新发布遵循该许可的软件, 并且可以将软件作为商业软件发布和销售, 前提是需要满足下面 3 个条件：\n 如果再发布的软件中包含源代码, 则源代码必须继续遵循 BSD 许可协议. 如果再发布的软件中只有二进制程序, 则需要在相关文档或版权文件中声明原始代码遵循了 BSD 协议. 不允许用原始软件的名字、作者名字或机构名称进行市场推广.  当你发布使用了BSD协议的代码, 或者以BSD协议代码为基础做二次开发自己的产品时, 需要满足三个条件：\n 如果再发布的产品中包含源代码, 则在源代码中必须带有原来代码中的BSD协议. 如果再发布的只是二进制类库/软件, 则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议. 不可以用开源代码的作者/机构名字和原来产品的名字做市场推广.  MPL 即 Mozilla Public License Mozilla , 相较于 GPL 许可协议, MPL 更加注重对开发者的源代码需求和收益之间的平衡.\n不受专利的限制，其可以自由使用，出售，并可自由的重新发布。带有专利代码的版本仍然可以使用，转让，甚至出售，但未经许可则不能修改代码。此外，MPL并不授予用户对于开发者商标的使用权. 用户必须负担一些“责任”，主要是关于散发使用MPL许可的软件。用户必须确保重新散发的软件所有源代码均以MPL许可，即使是以可执行文件的方式提供或是与其他使用专有软件许可的源代码结合也一样。但若跟以GNU通用公共许可协议、GNU宽通用公共许可证、Affero通用公共许可证许可的源代码结合则是例外。此时开发者则可选用以上三种更加严格的条款来许可. 4\nMIT 即 Massachusetts Institute of Technology. 目前限制最少的开源许可协议之一, 只要程序的开发者在修改后的源代码中保留原作者的许可信息即可, 因此普遍被商业软件所使用.\n  被许可人权利: 被许可人有权利使用、复制、修改、合并、出版发行、散布、再许可和/或贩售软件及软件的副本，及授予被供应人同等权利，惟服从以下义务。\n  被许可人义务: 在软件和软件的所有副本中都必须包含以上著作权声明和本许可声明。\n  其他重要特性: 此许可协议并非属copyleft的自由软件许可协议条款，允许在自由及开放源代码软件或非自由软件（proprietary software）所使用。\n  MIT的内容可依照程序著作权者的需求更改内容。此亦为MIT与BSD（The BSD license, 3-clause BSD license）本质上不同处。另外，MIT条款也是自由软件基金会（FSF）所认可的自由软件许可协议条款，与GPL兼容。5\nREFERENCE [1]. https://www.cnblogs.com/Renyi-Fan/p/8148658.html  [2]. http://www.ruanyifeng.com/blog/2008/04/creative_commons_licenses.html  [3]. https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License [4]. https://en.wikipedia.org/wiki/Mozilla_Public_License [5]. https://en.wikipedia.org/wiki/MIT_License","description":"","title":"Open Source Licence","uri":"/blog/posts/2021-01-26-open-source-licence/"},{"categories":null,"content":" 线性分类和线性回归 最小二乘法是无偏估计，并且是最佳线性无偏估计，因此可以处理噪音问题 口袋算法实现的线性二分类（即感知机）没有办法处理噪音问题，因此需要引入另外一种线性二分类 逻辑回归  ","description":"","title":"Machine Learning Notes--Logistic regression","uri":"/blog/posts/2021-01-23-machine-learning-notes2/"},{"categories":null,"content":"机器学习最重要的是“预测”，因此“机器学习”包含两个部分:\n 训练：比如提供大量的汽车图片给机器“学习”，教会机器什么是车，这就是训练 预测：训练结束后，我们需要机器可以对没有见过的图片进行判断，并且要保证一定的正确率，这就是预测  机器学习适用于：\n 要解决的问题中存在某种模式 这种模式不容易直接定义 有足够的数据可以帮助我们找出该模式  分类 如下1:\n 监督式学习  手写识别   无监督学习  每日推荐   强化学习  AlphaGo   深度学习  感知机  感知机: 对神经元 (neuron) 的简单抽象  通过该历史数据训练之后，就可以判断某件事情 分界线总是直线, 属于线性分类模型的一种 感知机是分类中最简单的算法，实用性并不高（能用直线分开的数据集在现实中几乎没有），但它很适合用于教学，并且也是后面复杂算法的基础。   寻找分界线 -\u003e 决策边界: 通过学习历史数据找到了一条将这两类客户分开的直线 特征: 自变量  特征向量: 特征组   标签: 因变量 乳腺癌实例  scikit learn库（后面简称为sklearn）   监督式学习: 如果提供的数据集有标签，并且在学习过程中用到了标签的算法 线性分类模型: 通过特征向量的个数建立不同维数上的平面. 二分类线性模型: 只能将数据分为两类，并且分界线是直线.  多分类线性模型    决策边界  分类和回归: 监督式学习的应用场景总共有两个 感知机的思路  权重：分别给这两个特征乘上不同的权重W1,W2. 最终表示为WnXn. 阈值(threshold). 发放: 权重和大于阈值 不发放: 权重和小于阈值 定义最终结果: 其中b表示阈值的负数   决策边界: d==0时就是是n维空间中的超平面. 用点积来简化(超)平面:   感知机的暴力实现  寻找合适的w和b: 结果最优. 点积的正负和夹角的大小: 即a*b与coso的联系 法向量: 超平面下的法向量为W, 因为 超平面的两侧  d(a) \u003e 0, W的方向 d(a)==0, 超平面上 d(a) \u003c 0, W反方向   对错的判断  W的方向 y = 1 ; W的反方向 y = -1.  分对: 0,\\quad i=1,3,4,5\" 分错(分错边或分到边界线):      错误的纠正  拉近: 平行四边形的对角线纠正. 推远: 平行四边形的平移纠正.  错误的公式:  纠正过程:  纠正结果:      错误纠正的例子 找到决策边界 算法规范化  初始化 迭代    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102  import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import Perceptron from matplotlib.colors import ListedColormap # 初始化 w 和 b，np.array 相当于定义向量 w, b = np.array([0, 0]), 0 # 定义 d(x) 函数 def d(x): return np.dot(w,x)+b # np.dot 是向量的点积 # 历史信用卡发行数据 # 这里的数据集不能随便修改，否则下面的暴力实现可能停不下来 X = np.array([[5,2], [3,2], [2,7], [1,4], [6,1], [4,5]]) y = np.array([-1, -1, 1, 1, -1, 1]) # 感知机的暴力实现 is_modified = True # 记录是否有分错的点 while is_modified: # 循环，直到没有分错的点 is_modified = False # 顺序遍及数据集 X for xi, yi in zip(X, y): # 如果有分错的 if yi*d(xi) \u003c= 0: # 更新法向量 w 和 b w, b = w + yi*xi, b + yi is_modified = True break # 下面是绘制的代码，主要展示暴力实现的结果，看不懂也没有关系 def make_meshgrid(x, y, h=.02): \"\"\"Create a mesh of points to plot in Parameters ---------- x: data to base x-axis meshgrid on y: data to base y-axis meshgrid on h: stepsize for meshgrid, optional Returns ------- xx, yy : ndarray \"\"\" x_min, x_max = x.min() - 1, x.max() + 1 y_min, y_max = y.min() - 1, y.max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) return xx, yy def plot_contours(ax, clf, xx, yy, **params): \"\"\"Plot the decision boundaries for a classifier. Parameters ---------- ax: matplotlib axes object clf: a classifier xx: meshgrid ndarray yy: meshgrid ndarray params: dictionary of params to pass to contourf, optional \"\"\" Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) out = ax.contourf(xx, yy, Z, **params) return out # 训练 skrlearn 中的感知机，这里是为了借用该感知机的接口，便于绘制决策区域 clf = Perceptron().fit(X, y) # 根据上面暴力实现得到的 w 和 b 来修改感知机 clf.coef_[0][0], clf.coef_[0][1], clf.intercept_[0] = w[0], w[1], b # 设置字体大小 plt.rcParams.update({'font.size': 14}) # 设置画布和坐标系 fig, ax = plt.subplots(figsize = (6, 3), nrows=1, ncols=1) fig.subplots_adjust(left=0.25, right=0.75, top=0.999, bottom=0.001) ax.set_xticks(()),ax.set_yticks(()) cm = ListedColormap(('blue', 'red')) markers = ('x', 'o') # 决定绘制区域的大小 X0, X1 = X[:, 0], X[:, 1] xx, yy = make_meshgrid(X0, X1) ax.set_xlim(xx.min(), xx.max()) ax.set_ylim(yy.min(), yy.max()) # 绘制决策区域 plot_contours(ax, clf, xx, yy, cmap=cm, alpha=0.4) # 绘制决策直线 lx = np.linspace(xx.min(), xx.max()) ly = - w[0] / w[1] * lx - b / w[1] ax.plot(lx, ly, 'k-') # 根据类别不同，绘制不同形状的点 vmin, vmax = min(y), max(y) for cl, m in zip(np.unique(y), markers): ax.scatter(x=X0[y==cl], y=X1[y==cl], c=y[y==cl], alpha=1, vmin = vmin, vmax = vmax, cmap=cm, edgecolors='k', marker = m) plt.show()   线性可分  Novikoff 定理: 线性可分 (Linear Separability) 的数据集, 暴力实现总会停止. 即总是存在Yi * d(X) \u003e 0 .  暴力实现的收敛性.最后的结果  实验代码如上. 默认循环很多次还没有停下来就说明是线性不可分的.   **轮廓线 **(近似凸包 (Convex hull) : 如果轮廓线不相交就是线性可分  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54  # 载入必要的库 from shapely.geometry import Polygon from scipy.spatial import ConvexHull import numpy as np # 线性可分数据集 X1 = np.array([[1. , 0.2], [1.1, 0.1], [1.2, 0.2], [1.3, 0.2], [1.3, 0.3], [1.3, 0.4], [1.4, 0.1], [1.4, 0.2], [1.4, 0.3], [1.5, 0.1], [1.5, 0.2], [1.5, 0.3], [1.5, 0.4], [1.6, 0.2], [1.6, 0.4], [1.6, 0.6], [1.7, 0.2], [1.7, 0.3], [1.7, 0.4], [1.7, 0.5], [1.9, 0.2], [1.9, 0.4], [3.3, 1. ], [3. , 1.1], [3.7, 1. ], [3.6, 1.3], [3.5, 1. ], [3.8, 1.1], [3.9, 1.1], [3.9, 1.2], [3.9, 1.4], [4. , 1. ], [4. , 1.2], [4. , 1.3], [4.1, 1. ], [4.1, 1.3], [4.2, 1.2], [4.2, 1.3], [4.2, 1.5], [4.3, 1.3], [4.3, 1.3], [4.4, 1.3], [4.4, 1.2], [4.4, 1.4], [4.5, 1.3], [4.5, 1.5], [4.5, 1.6], [4.6, 1.3], [4.6, 1.4], [4.6, 1.5], [4.7, 1.2], [4.7, 1.4], [4.7, 1.5], [4.7, 1.6], [4.8, 1.8], [4.9, 1.5], [4.8, 1.4], [5. , 1.7], [5.1, 1.6], ]) y1 = np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ]) # 计算X1数据集中两种数据的凸包 hull10 = ConvexHull(X1[y1==-1]) hull11 = ConvexHull(X1[y1==1]) # 取出凸包的边界点，构造两个多边形（即轮廓线） p10 = Polygon(hull10.points[hull10.vertices]) p11 = Polygon(hull11.points[hull11.vertices]) # 这两个多边形不相交，即线性可分 print('两个多边形相交为 {} '.format(p10.intersects(p11))) # 非线性可分数据集 X2 = np.array([[3. , 1.1], [3.3, 1. ], [3.5, 1. ], [3.6, 1.3], [3.7, 1. ], [3.8, 1.1], [3.9, 1.1], [3.9, 1.2], [3.9, 1.4], [4. , 1. ], [4. , 1.2], [4. , 1.3], [4.1, 1. ], [4.1, 1.3], [4.2, 1.2], [4.2, 1.3], [4.2, 1.5], [4.3, 1.3], [4.4, 1.2], [4.4, 1.3], [4.4, 1.4], [4.5, 1.3], [4.5, 1.5], [4.5, 1.6], [4.5, 1.7], [4.6, 1.3], [4.6, 1.4], [4.6, 1.5], [4.7, 1.2], [4.7, 1.4], [4.7, 1.5], [4.7, 1.6], [4.8, 1.4], [4.8, 1.8], [4.9, 1.5], [4.9, 1.8], [4.9, 2. ], [5. , 1.5], [5. , 1.7], [5. , 1.9], [5. , 2. ], [5.1, 1.5], [5.1, 1.6], [5.1, 1.8], [5.1, 1.9], [5.1, 2. ], [5.1, 2.3], [5.1, 2.4], [5.2, 2. ], [5.2, 2.3], [5.3, 1.9], [5.3, 2.3], [5.4, 2.1], [5.4, 2.3], [5.5, 1.8], [5.5, 2.1], [5.6, 1.4], [5.6, 1.8], [5.6, 2.1], [5.6, 2.2], [5.6, 2.4], [5.7, 2.1], [5.7, 2.3], [5.7, 2.5], [5.8, 1.6], [5.8, 1.8], [5.8, 2.2], [5.9, 2.1], [5.9, 2.3], [6. , 1.8], [6. , 2.5], [6.1, 1.9], [6.1, 2.3], [6.1, 2.5], [6.3, 1.8], [6.4, 2. ], [6.6, 2.1], [6.7, 2. ], [6.7, 2.2], [6.9, 2.3], ]) y2 = np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ]) # 分别计算X2数据集中两种数据的凸包 hull20 = ConvexHull(X2[y2==-1]) hull21 = ConvexHull(X2[y2==1]) # 取出凸包的边界点，构造两个多边形（即轮廓线） p20 = Polygon(hull20.points[hull20.vertices]) p21 = Polygon(hull21.points[hull21.vertices]) # 这两个多边形相交，即线性不可分 print('两个多边形相交为 {} '.format(p20.intersects(p21)))   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83  # 引入必要的库 from matplotlib.colors import ListedColormap from scipy.spatial import ConvexHull from shapely.geometry import Polygon import numpy as np import matplotlib.pyplot as plt # 以下是计算凸包的代码 # 线性可分数据集 X1 = np.array([[1. , 0.2], [1.1, 0.1], [1.2, 0.2], [1.3, 0.2], [1.3, 0.3], [1.3, 0.4], [1.4, 0.1], [1.4, 0.2], [1.4, 0.3], [1.5, 0.1], [1.5, 0.2], [1.5, 0.3], [1.5, 0.4], [1.6, 0.2], [1.6, 0.4], [1.6, 0.6], [1.7, 0.2], [1.7, 0.3], [1.7, 0.4], [1.7, 0.5], [1.9, 0.2], [1.9, 0.4], [3.3, 1. ], [3. , 1.1], [3.7, 1. ], [3.6, 1.3], [3.5, 1. ], [3.8, 1.1], [3.9, 1.1], [3.9, 1.2], [3.9, 1.4], [4. , 1. ], [4. , 1.2], [4. , 1.3], [4.1, 1. ], [4.1, 1.3], [4.2, 1.2], [4.2, 1.3], [4.2, 1.5], [4.3, 1.3], [4.3, 1.3], [4.4, 1.3], [4.4, 1.2], [4.4, 1.4], [4.5, 1.3], [4.5, 1.5], [4.5, 1.6], [4.6, 1.3], [4.6, 1.4], [4.6, 1.5], [4.7, 1.2], [4.7, 1.4], [4.7, 1.5], [4.7, 1.6], [4.8, 1.8], [4.9, 1.5], [4.8, 1.4], [5. , 1.7], [5.1, 1.6], ]) y1 = np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ]) # 计算X1数据集中两种数据的凸包 X10 = X1[y1==-1] X11 = X1[y1==1] hull10 = ConvexHull(X10) hull11 = ConvexHull(X11) # 非线性可分数据集 X2 = np.array([[3. , 1.1], [3.3, 1. ], [3.5, 1. ], [3.6, 1.3], [3.7, 1. ], [3.8, 1.1], [3.9, 1.1], [3.9, 1.2], [3.9, 1.4], [4. , 1. ], [4. , 1.2], [4. , 1.3], [4.1, 1. ], [4.1, 1.3], [4.2, 1.2], [4.2, 1.3], [4.2, 1.5], [4.3, 1.3], [4.4, 1.2], [4.4, 1.3], [4.4, 1.4], [4.5, 1.3], [4.5, 1.5], [4.5, 1.6], [4.5, 1.7], [4.6, 1.3], [4.6, 1.4], [4.6, 1.5], [4.7, 1.2], [4.7, 1.4], [4.7, 1.5], [4.7, 1.6], [4.8, 1.4], [4.8, 1.8], [4.9, 1.5], [4.9, 1.8], [4.9, 2. ], [5. , 1.5], [5. , 1.7], [5. , 1.9], [5. , 2. ], [5.1, 1.5], [5.1, 1.6], [5.1, 1.8], [5.1, 1.9], [5.1, 2. ], [5.1, 2.3], [5.1, 2.4], [5.2, 2. ], [5.2, 2.3], [5.3, 1.9], [5.3, 2.3], [5.4, 2.1], [5.4, 2.3], [5.5, 1.8], [5.5, 2.1], [5.6, 1.4], [5.6, 1.8], [5.6, 2.1], [5.6, 2.2], [5.6, 2.4], [5.7, 2.1], [5.7, 2.3], [5.7, 2.5], [5.8, 1.6], [5.8, 1.8], [5.8, 2.2], [5.9, 2.1], [5.9, 2.3], [6. , 1.8], [6. , 2.5], [6.1, 1.9], [6.1, 2.3], [6.1, 2.5], [6.3, 1.8], [6.4, 2. ], [6.6, 2.1], [6.7, 2. ], [6.7, 2.2], [6.9, 2.3], ]) y2 = np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ]) # 分别计算X2数据集中两种数据的凸包 X20 = X2[y2==-1] X21 = X2[y2==1] hull20 = ConvexHull(X20) hull21 = ConvexHull(X21) # 以下是绘制代码 # 设置字体大小 plt.rcParams.update({'font.size': 14}) # 创建并排的两个subfigure fig, axes = plt.subplots(figsize = (6, 3), nrows=1, ncols=2) plt.subplots_adjust(left=0.001, right=0.999, top=0.999, bottom=0.1, wspace=0.08) # 在第一个subfigure中绘制 X1 数据集 ax = axes[0] ax.set(xticks=[], yticks=[]) # 不显示坐标的刻度 ax.scatter(x=X10[:, 0], y=X10[:, 1], alpha=0.8, color='blue', marker= 'x', edgecolor='k') # 绘制 x 点 ax.scatter(x=X11[:, 0], y=X11[:, 1], alpha=0.8, color='red', marker= 'o', edgecolor='k') # 绘制 o 点 # 取出凸包的边界点，构造两个多边形 p10 = Polygon(hull10.points[hull10.vertices]) p11 = Polygon(hull11.points[hull11.vertices]) ax.set_xlabel('两个多边形相交为 {} '.format(p10.intersects(p11))) # 绘制多边形 ax.plot(*p10.exterior.xy, color='blue') ax.plot(*p11.exterior.xy, color='red') # 在第二个subfigure中绘制 X2 数据集 ax = axes[1] ax.set(xticks=[], yticks=[]) # 不显示坐标的刻度 ax.scatter(x=X20[:, 0], y=X20[:, 1], alpha=0.8, color='blue', marker= 'x', edgecolor='k') # 绘制 x 点 ax.scatter(x=X21[:, 0], y=X21[:, 1], alpha=0.8, color='red', marker= 'o', edgecolor='k') # 绘制 o 点 # 取出凸包的边界点，构造两个多边形 p20 = Polygon(hull20.points[hull20.vertices]) p21 = Polygon(hull21.points[hull21.vertices]) ax.set_xlabel('两个多边形相交为 {} '.format(p20.intersects(p21))) # 绘制多边形 ax.plot(*p20.exterior.xy, color='blue') ax.plot(*p21.exterior.xy, color='red') plt.show()    线性可分的充要条件: 各凸包互不相交.  口袋算法  非线性可分的数据集 数据中的噪音 口袋算法的思路 引入符号函数 Sign. 决策边界的评分(Sign \u0026 d(X) 复合)![](https://dandelionfs.oss-cn-beijing.aliyuncs.com/ml-pocket algorithm.webp) 口袋算法: 在感知机暴力实现的基础上，在固定的迭代次数内不断更正决策边界并打分，从中找到评分最高的作为最终的决策边界：  只有可导的才可以求得区间极值, sign不可导, 所以只能通过次数来求最大.    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127  import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import Perceptron from matplotlib.colors import ListedColormap # 超参数 epochs = 10 # 固定的迭代次数 # 参数 w, b = np.array([0, 0]), 0 # np.array 相当于定义向量 # 定义 d(x) 函数 def d(x): return np.dot(w,x)+b # np.dot 是向量的点积 # 定义 sign 函数 def sign(x): return 1 if x \u003e= 0 else -1 # 定义 h(x) 函数 def h(x): return sign(d(x)) # 计算决策边界的评分 def clf_score(X, y): score = 0 for xi, yi in zip(X, y): score += yi*h(xi) return score # 历史信用卡发行数据，该数据不是线性可分的 X = np.array([[5,2], [3,2], [2,7], [1,4], [6,1], [4,5], [2,5], [3.6,3.8]]) y = np.array([-1, -1, 1, 1, -1, 1, -1, -1]) # 感知机的口袋算法 # 数据比较简单，设定总的循环次数 10 次就够了 best_w, best_b = w, b best_cs = clf_score(X, y) for _ in range(epochs): # 顺序遍及数据集 X for xi, yi in zip(X, y): # 如果有分错的 if yi*d(xi) \u003c= 0: # 更新法向量 w 和 b w, b = w + yi*xi, b + yi # 对新得到的决策边界进行评分 cs = clf_score(X, y) # 如果更好，则进行更新 if cs \u003e best_cs: best_cs = cs best_w, best_b = w, b break w, b = best_w, best_b # 下面是绘制的代码，主要展示暴力实现的结果，看不懂也没有关系 def make_meshgrid(x, y, h=.02): \"\"\"Create a mesh of points to plot in Parameters ---------- x: data to base x-axis meshgrid on y: data to base y-axis meshgrid on h: stepsize for meshgrid, optional Returns ------- xx, yy : ndarray \"\"\" x_min, x_max = x.min() - 1, x.max() + 1 y_min, y_max = y.min() - 1, y.max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) return xx, yy def plot_contours(ax, clf, xx, yy, **params): \"\"\"Plot the decision boundaries for a classifier. Parameters ---------- ax: matplotlib axes object clf: a classifier xx: meshgrid ndarray yy: meshgrid ndarray params: dictionary of params to pass to contourf, optional \"\"\" Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) out = ax.contourf(xx, yy, Z, **params) return out # 训练 skrlearn 中的感知机，这里是为了借用该感知机的接口，便于绘制决策区域 clf = Perceptron().fit(X, y) # 根据上面暴力实现得到的 w 和 b 来修改感知机 clf.coef_[0][0], clf.coef_[0][1], clf.intercept_[0] = w[0], w[1], b # 设置字体大小 plt.rcParams.update({'font.size': 14}) # 设置画布和坐标系 fig, ax = plt.subplots(figsize = (6, 3), nrows=1, ncols=1) fig.subplots_adjust(left=0.25, right=0.75, top=0.999, bottom=0.001) ax.set_xticks(()),ax.set_yticks(()) cm = ListedColormap(('blue', 'red')) markers = ('x', 'o') # 决定绘制区域的大小 X0, X1 = X[:, 0], X[:, 1] xx, yy = make_meshgrid(X0, X1) ax.set_xlim(xx.min(), xx.max()) ax.set_ylim(yy.min(), yy.max()) # 绘制决策区域 plot_contours(ax, clf, xx, yy, cmap=cm, alpha=0.4) # 绘制决策直线 lx = np.linspace(xx.min(), xx.max()) ly = - w[0] / w[1] * lx - b / w[1] ax.plot(lx, ly, 'k-') # 根据类别不同，绘制不同形状的点 vmin, vmax = min(y), max(y) for cl, m in zip(np.unique(y), markers): ax.scatter(x=X0[y==cl], y=X1[y==cl], c=y[y==cl], alpha=1, vmin = vmin, vmax = vmax, cmap=cm, edgecolors='k', marker = m) plt.show()   之前介绍过 sklearn 库中的乳腺癌数据集，该数据集只包含了两种类别。但它的特征向量是30维向量，一方面不好可视化，另一方面在其上直接运用感知机口袋算法的效果不好，\n 安德森鸢尾花卉数据集  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136  import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import Perceptron from sklearn import datasets from matplotlib.colors import ListedColormap # 超参数 epochs = 2000 # 固定的迭代次数 # 参数 w, b = np.array([0, 0]), 0 # np.array 相当于定义向量 # 定义 d(x) 函数 def d(x): return np.dot(w,x)+b # np.dot 是向量的点积 # 定义 sign 函数 def sign(x): return 1 if x \u003e= 0 else -1 # 定义 h(x) 函数 def h(x): return sign(d(x)) # 计算决策边界的评分 def clf_score(X, y): score = 0 for xi, yi in zip(X, y): score += yi*h(xi) return score # 以下是训练代码 # 载入iris数据集 iris = datasets.load_iris() # 取后面100个数据，并且只取最后两个特征，以及取出对应的类别 sampleNumber = 100 X = iris.data[50:50+sampleNumber, [2,3]] # iris 数据集的类别是0, 1, 2，为了运用我们实现的感知机算法，这里将后两个类别改为-1, 1 y = np.where(iris.target[50:50+sampleNumber] == 1, -1, 1) # 感知机的口袋算法 best_w, best_b = w, b best_cs = clf_score(X, y) for _ in range(epochs): # 顺序遍及数据集 X for xi, yi in zip(X, y): # 如果有分错的 if yi*d(xi) \u003c= 0: # 更新法向量 w 和 b w, b = w + yi*xi, b + yi # 对新得到的决策边界进行评分 cs = clf_score(X, y) # 如果更好，则进行更新 if cs \u003e best_cs: best_cs = cs best_w, best_b = w, b break w, b = best_w, best_b # 计算准确率 accuracy = 1 - (sampleNumber - best_cs)/2/sampleNumber # 下面是绘制的代码，主要展示暴力实现的结果，看不懂也没有关系 def make_meshgrid(x, y, h=.02): \"\"\"Create a mesh of points to plot in Parameters ---------- x: data to base x-axis meshgrid on y: data to base y-axis meshgrid on h: stepsize for meshgrid, optional Returns ------- xx, yy : ndarray \"\"\" x_min, x_max = x.min() - 1, x.max() + 1 y_min, y_max = y.min() - 1, y.max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) return xx, yy def plot_contours(ax, clf, xx, yy, **params): \"\"\"Plot the decision boundaries for a classifier. Parameters ---------- ax: matplotlib axes object clf: a classifier xx: meshgrid ndarray yy: meshgrid ndarray params: dictionary of params to pass to contourf, optional \"\"\" Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) out = ax.contourf(xx, yy, Z, **params) return out # 训练 skrlearn 中的感知机，这里是为了借用该感知机的接口，便于绘制决策区域 clf = Perceptron().fit(X, y) # 根据上面暴力实现得到的 w 和 b 来修改感知机 clf.coef_[0][0], clf.coef_[0][1], clf.intercept_[0] = w[0], w[1], b # 设置字体大小 plt.rcParams.update({'font.size': 14}) # 设置画布和坐标系 fig, ax = plt.subplots(figsize = (6, 3), nrows=1, ncols=1) fig.subplots_adjust(left=0.25, right=0.75, top=0.999, bottom=0.08) ax.set_xticks(()),ax.set_yticks(()) ax.set_xlabel(r\"epochs：{}，accuracy：{:.2%}\".format(epochs, accuracy)) cm = ListedColormap(('blue', 'red')) markers = ('x', 'o') # 决定绘制区域的大小 X0, X1 = X[:, 0], X[:, 1] xx, yy = make_meshgrid(X0, X1) ax.set_xlim(xx.min(), xx.max()) ax.set_ylim(yy.min(), yy.max()) # 绘制决策区域 plot_contours(ax, clf, xx, yy, cmap=cm, alpha=0.4) # 绘制决策直线 lx = np.linspace(xx.min(), xx.max()) ly = - w[0] / w[1] * lx - b / w[1] ax.plot(lx, ly, 'k-') # 根据类别不同，绘制不同形状的点 vmin, vmax = min(y), max(y) for cl, m in zip(np.unique(y), markers): ax.scatter(x=X0[y==cl], y=X1[y==cl], c=y[y==cl], alpha=1, vmin = vmin, vmax = vmax, cmap=cm, edgecolors='k', marker = m) plt.show()   参数和超参数  参数和超参数   机器学习算法中，可以通过数据集确定的称为参数, 如W和b.    必须人工调整的称为超参数，比如 epochs 。     安德森鸢尾花卉数据集 准确率 欠拟合  不同的 epochs 对应了不同的准确率，在训练数据集上准确率太低，称为欠拟合：   准确率的上限  增大超参数 epochs 就可以提高准确率（也就是解决欠拟合问题），当进一步增大 epochs 准确率没有提高时，就可以确定下最终的 epochs： 无法你想操作    学习流程   泛化能力最大\n 才有能力去预测未知的数据集。这种能力在机器学习上称为预测能力，或者称为泛化能力    学习流程\n  把数据集分为三份：训练集(train set)、验证集(test set)和测试集(test set)；\n  数据保持随机\n  总共有 150 个数据。我们按照 6 : 2 : 2 的比例，将之划分为训练集、验证集和测试集\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #coding:utf-8 import matplotlib.pyplot as plt from matplotlib.colors import ListedColormap from sklearn import datasets from sklearn.model_selection import train_test_split import numpy as np # 载入iris数据集 iris = datasets.load_iris() # 取后面100个数据，并且只取最后两个特征，以及取出对应的类别 sampleNumber = 100 X = iris.data[50:50+sampleNumber, [2,3]] # iris 数据集的类别是0, 1, 2，为了运用我们实现的感知机算法，这里将后两个类别改为-1, 1 y = np.where(iris.target[50:50+sampleNumber] == 1, -1, 1) # 借助 train_test_split 进行随机分割，按照 6 : 2 : 2 的比例划分为三种数据集 X_tv, X_test, y_tv, y_test = train_test_split(X, y, test_size=0.2, random_state=42) X_train, X_val, y_train, y_val = train_test_split(X_tv, y_tv, test_size=0.25, random_state=42) # 以下是绘制代码，看不懂没有关系 plt.rcParams.update({'font.size': 18}) # 设置字体大小 # 创建并设置排的两个subfigure fig, axes = plt.subplots(figsize = (9, 3), nrows=1, ncols=3) plt.subplots_adjust(left=0.001, right=0.999, top=0.999, bottom=0.1, wspace=0.04) # 在两个并排的subfigure中绘制训练集和测试集 cmaps = (ListedColormap(('blue', 'red')), ListedColormap(('dodgerblue', 'bisque')), ListedColormap(('forestgreen', 'peru'))) markers, xlabels = ('x', 'o'), ('训练集', '验证集', '测试集') Xs, ys = (X_train, X_val, X_test), (y_train, y_val, y_test) for ax, xlabel, cm, X, y in zip(axes.flat, xlabels, cmaps, Xs, ys): ax.set(xticks=[], yticks=[]) ax.set_xlabel(xlabel) vmin, vmax = min(y), max(y) for cl, m in zip(np.unique(y), markers): ax.scatter(x=X[y==cl, 0], y=X[y==cl, 1], c=y[y==cl], alpha=1, vmin = vmin, vmax = vmax, cmap=cm, edgecolors='k', marker = m) plt.show()       在训练集上学习参数，比如和（好比日常学习）；\n  在验证集上调整超参数，比如 epochs（好比模拟考试）；\n  重复（2）（3）步，直到参数和超参数都比较满意；\n  最后在测试集上检验最终的学习效果（好比高考）。\n    鸢尾花数据集的划分\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #coding:utf-8 import matplotlib.pyplot as plt from matplotlib.colors import ListedColormap from sklearn import datasets from sklearn.model_selection import train_test_split import numpy as np # 载入iris数据集 iris = datasets.load_iris() # 取后面100个数据，并且只取最后两个特征，以及取出对应的类别 sampleNumber = 100 X = iris.data[50:50+sampleNumber, [2,3]] # iris 数据集的类别是0, 1, 2，为了运用我们实现的感知机算法，这里将后两个类别改为-1, 1 y = np.where(iris.target[50:50+sampleNumber] == 1, -1, 1) # 借助 train_test_split 进行随机分割，按照 6 : 2 : 2 的比例划分为三种数据集 X_tv, X_test, y_tv, y_test = train_test_split(X, y, test_size=0.2, random_state=42) X_train, X_val, y_train, y_val = train_test_split(X_tv, y_tv, test_size=0.25, random_state=42) # 以下是绘制代码，看不懂没有关系 plt.rcParams.update({'font.size': 18}) # 设置字体大小 # 创建并设置排的两个subfigure fig, axes = plt.subplots(figsize = (9, 3), nrows=1, ncols=3) plt.subplots_adjust(left=0.001, right=0.999, top=0.999, bottom=0.1, wspace=0.04) # 在两个并排的subfigure中绘制训练集和测试集 cmaps = (ListedColormap(('blue', 'red')), ListedColormap(('dodgerblue', 'bisque')), ListedColormap(('forestgreen', 'peru'))) markers, xlabels = ('x', 'o'), ('训练集', '验证集', '测试集') Xs, ys = (X_train, X_val, X_test), (y_train, y_val, y_test) for ax, xlabel, cm, X, y in zip(axes.flat, xlabels, cmaps, Xs, ys): ax.set(xticks=[], yticks=[]) ax.set_xlabel(xlabel) vmin, vmax = min(y), max(y) for cl, m in zip(np.unique(y), markers): ax.scatter(x=X[y==cl, 0], y=X[y==cl, 1], c=y[y==cl], alpha=1, vmin = vmin, vmax = vmax, cmap=cm, edgecolors='k', marker = m) plt.show()    训练和验证 过拟合: 这种对训练集贴合得非常好，但是泛化能力下降  通过验证集的准确率来调整超参数，可以尽可能避免过拟合   最终测试: 只能用测试集来给出最终的泛化能力测试结果  交叉验证  k 折交叉验证 (K-fold Cross Validation) : 替换单纯使用验证集来调整超参数  过程  将数据集分为两部分，分别是训练集和测试集； 将要调整的超参给定一个值，比如说 epochs = 100； 将训练集随机平均的分为 k 份，依次选择其中的一份作为验证集，剩余的仍然作为训练集，或称为某一折。因为可以有 k 份不同的验证集，所以总共有 k 折； 在某一折上，通过训练集算出参数，然后在验证集上算出准确率； 在不同的折上，重复（3）（4）步，得到 k 个准确率，将这些准确率的平均数作为最终的结果，并记录下来。 然后，不断调整超参数，比如说 epochs = 200；不断重复（3）（4）（5）和（6），直到找到平均准确率最高的超参数； 最后，使用找到的超参数，在整个训练集上进行训练，这样就可以使用更多的数据用于训练。     k 折交叉验证的实现  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83  import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn import datasets from sklearn.model_selection import KFold from matplotlib.colors import ListedColormap # 超参数 epochs = 100 # 固定的迭代次数 # 参数 w, b = np.array([0, 0]), 0 # np.array 相当于定义向量 # 定义 d(x) 函数 def d(x): return np.dot(w,x)+b # np.dot 是向量的点积 # 定义 sign 函数 def sign(x): return 1 if x \u003e= 0 else -1 # 定义 h(x) 函数 def h(x): return sign(d(x)) # 计算决策边界的评分 def clf_score(X, y): score = 0 for xi, yi in zip(X, y): score += yi*h(xi) return score # 感知机的口袋算法 def PLA_pocket(X, y): global epochs, w, b w, b = np.array([0, 0]), 0 # np.array 相当于定义向量 best_w, best_b = w, b best_cs = clf_score(X, y) for _ in range(epochs): # 顺序遍及数据集 X for xi, yi in zip(X, y): # 如果有分错的 if yi*d(xi) \u003c= 0: # 更新法向量 lw 和 lb w, b = w + yi*xi, b + yi # 对新得到的决策边界进行评分 cs = clf_score(X, y) # 如果更好，则进行更新 if cs \u003e best_cs: best_cs = cs best_w, best_b = w, b break w, b = best_w, best_b # 以下是训练代码 # 载入iris数据集 iris = datasets.load_iris() # 取后面100个数据，并且只取最后两个特征，以及取出对应的类别 sampleNumber = 100 X = iris.data[50:50+sampleNumber, [2,3]] # iris 数据集的类别是0, 1, 2，为了运用我们实现的感知机算法，这里将后两个类别改为-1, 1 y = np.where(iris.target[50:50+sampleNumber] == 1, -1, 1) # 借助 train_test_split 进行随机分割，按照 8 : 2 的比例划分为训练验证集、测试集 rs = 42 X_tv, X_test, y_tv, y_test = train_test_split(X, y, test_size=0.2, random_state=rs) print(r'总共有 {} 个数据，其中训练验证集中有 {} 个数据，测试集中有 {} 个数据。'.format(len(X), len(X_tv), len(X_test))) # 在 X_tv 上进行 k 折交叉验证 k = 10 kf = KFold(n_splits=k, random_state=rs) val_accuracy = 0 for idx, (train, val) in zip(range(k), kf.split(X_tv)): X_train, y_train, X_val, y_val = X_tv[train], y_tv[train], X_tv[val], y_tv[val] PLA_pocket(X_train, y_train) split_train_accuracy = 1 - (len(X_train) - clf_score(X_train, y_train))/2/len(X_train) split_val_accuracy = 1 - (len(X_val) - clf_score(X_val, y_val))/2/len(X_val) print(r'第 {} 折，训练集准确率 {:.2%} ，验证集准确率 {:.2%}'.format(idx + 1, split_train_accuracy, split_val_accuracy)) val_accuracy += split_val_accuracy print(r'epochs = {}，验证集准确率的平均值为 {:.2%}。'.format(epochs, val_accuracy / k))    调整超参数  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn import datasets from sklearn.model_selection import KFold from matplotlib.colors import ListedColormap # 超参数 epochs = 100 # 固定的迭代次数 # 参数 w, b = np.array([0, 0]), 0 # np.array 相当于定义向量 # 定义 d(x) 函数 def d(x): return np.dot(w,x)+b # np.dot 是向量的点积 # 定义 sign 函数 def sign(x): return 1 if x \u003e= 0 else -1 # 定义 h(x) 函数 def h(x): return sign(d(x)) # 计算决策边界的评分 def clf_score(X, y): score = 0 for xi, yi in zip(X, y): score += yi*h(xi) return score # 感知机的口袋算法 def PLA_pocket(X, y): global epochs, w, b w, b = np.array([0, 0]), 0 # np.array 相当于定义向量 best_w, best_b = w, b best_cs = clf_score(X, y) for _ in range(epochs): # 顺序遍及数据集 X for xi, yi in zip(X, y): # 如果有分错的 if yi*d(xi) \u003c= 0: # 更新法向量 lw 和 lb w, b = w + yi*xi, b + yi # 对新得到的决策边界进行评分 cs = clf_score(X, y) # 如果更好，则进行更新 if cs \u003e best_cs: best_cs = cs best_w, best_b = w, b break w, b = best_w, best_b # 以下是训练代码 # 载入iris数据集 iris = datasets.load_iris() # 取后面100个数据，并且只取最后两个特征，以及取出对应的类别 sampleNumber = 100 X = iris.data[50:50+sampleNumber, [2,3]] # iris 数据集的类别是0, 1, 2，为了运用我们实现的感知机算法，这里将后两个类别改为-1, 1 y = np.where(iris.target[50:50+sampleNumber] == 1, -1, 1) # 借助 train_test_split 进行随机分割，按照 8 : 2 的比例划分为训练验证集、测试集 rs = 42 X_tv, X_test, y_tv, y_test = train_test_split(X, y, test_size=0.2, random_state=rs) print(r'总共有 {} 个数据，其中训练验证集中有 {} 个数据，测试集中有 {} 个数据。'.format(len(X), len(X_tv), len(X_test))) # 组合两个超参数，计算各种组合得到的验证集准确率的平均值 k = 10 for epochs in range(100, 500, 100): kf = KFold(n_splits=k, random_state=rs) val_accuracy = 0 for idx, (train, val) in zip(range(k), kf.split(X_tv)): X_train, y_train, X_val, y_val = X_tv[train], y_tv[train], X_tv[val], y_tv[val] PLA_pocket(X_train, y_train) val_accuracy += 1 - (len(X_val) - clf_score(X_val, y_val))/2/len(X_val) print(r'epochs = {}，k={}，验证集准确率的平均值为 {:.2%}。'.format(epochs, k, val_accuracy / k))    最终测试 不同的 k 值: 关于 k 值的选择是一个有争论性的话题，一般建议选择 k = 10。  REFERENCE 参考资料 [1]. https://www.matongxue.com/","description":"","title":"Machine Learning Notes--Perceptron","uri":"/blog/posts/2021-01-23-machine-learning-notes1/"},{"categories":null,"content":"使用微软雅黑(方正兰亭黑)需购买授权!当年微软公司斥巨资委托方正字体公司专门为Vista系统设计制作了这套字体（平均一个字100美金），微软公司只拥有微软雅黑的使用权，而真正的版权在方正手中。 我们仅可以在Windows系统中使用微软雅黑！脱离Windows平台的一切商业行为，都属于侵权行为，同时在Windows系统下，商业行为也不被允许，包括网页设计中，主动调用微软雅黑字体（用户显示中将默认字体转换为微软雅黑属于用户行为，不归类为侵权），更不可以以图片的形式在网页中用到微软雅黑！方正重金聘请了庞大的维权小组\nFREE  方正黑体 方正楷体 方正书宋 方正仿宋 庞门正道标题体 思源字体 王漢宗自由字型48款 文泉驿字体 站酷字体  RECOMMEND  Press Start 2P: 一个像素风格的字体. Lato Regular 华文黑体 Lato light 思源黑体旧字形Extralight mono... Yu Gothic UI Verdana Roboto Slab  Size Word 中对字体的大小同时采用了两种不同的度量单位, 在Autocad中，我们用“字高”来作为文字的度量单位，CAD中的“字高”的数值约等于字体的实际高度。在WORD中，1磅约等于0.35毫米，即一个10磅的文字，其高度约等于3.5毫米, 参考表如下：\n   磅（1-1638） 字号     42 初号   36 小初   26 一号   24 小一号   22 二号   18 小二号   16 三号   15 小三号   14 四号   12 小四号   10.5 五号   9 小五号   7.5 六号   6.5 小六号   5.5 七号   5 八号   ","description":"","title":"Font","uri":"/blog/posts/2021-01-22-font-recommend/"},{"categories":null,"content":"关于图片.\nPUBLIC 公共  堆爱 SM.MS 聚合 路过  PAY 付费  Oss:   Aliyun 唯一局限如下:\n 出于安全考虑，从2019年9月23日起，针对之后新建的Bucket，直接使用OSS提供的默认域名，从互联网访问OSS上该Bucket的图片类型文件时，mimetype为以下值，Response Header中会自动加上Content-Disposition:'attachment=filename;'。即从浏览器访问图片类型文件时，会以附件形式进行下载。1\n     THIRD PARTY 为爱发电 不保证长期有效  里客云 - 聚合图床 My Img @Wikiworker Tie Img Bed @imgbed/@OldActorsSmile Tie Picgo  IMGS COMPRESSION 图片压缩  Webp  Industrution2. Downolad3.    1  $ sudo apt install webp   Tools4  Wallhaven Pixiv （18年关被墙/同人、插画） 彼岸桌面（已备） CG Wallpaper Wallpaperup https://unsplash.com/t/wallpapers Desktop Nexus； Wallpaperup WallPaperim pexels iconfont 60logo draw.io processon carbon 抠图神器 图怪兽 压缩图 字体天下 topology  REFERENCE 参考资料 [1]. https://help.aliyun.com/document_detail/39545.html  [2]. https://developers.google.com/speed/webp [3]. https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html [4]. https://www.jianshu.com/p/3901fc831a97","description":"","subtitle":"All Img In one","title":"Imgs / Host","uri":"/blog/posts/2021-01-22-img/"},{"categories":null,"content":"问题皆来源于下面的两个链接1：\n https://stackoverflow.com/questions/tagged/c%2b%2b?tab=Votes https://stackoverflow.com/questions/tagged/c?tab=Votes  QUESTIONS 问题  分支预测（Branch Prediction）导致有序数的效率提高.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  import java.util.Arrays; import java.util.Random; public class Main{ public static void main(String[] args){ // Generate data  int arraySize = 32768; int data[] = new int[arraySize]; Random rnd = new Random(0); for (int c = 0; c \u003c arraySize; ++c) data[c] = rnd.nextInt() % 256; // !!! With this, the next loop runs faster  Arrays.sort(data); // Test  long start = System.nanoTime(); long sum = 0; for (int i = 0; i \u003c 100000; ++i){ // Primary loop  for (int c = 0; c \u003c arraySize; ++c){ if (data[c] \u003e= 128) sum += data[c]; } } System.out.println((System.nanoTime() - start) / 1000000000.0); System.out.println(\"sum = \" + sum); } }    --\u003e: --(后减) + \u003e  1 2 3 4 5 6 7  #include \u003cstdio.h\u003eint main(){ int x = 10; while (x --\u003e 0) { //执行的顺序就是：先 x \u003e 0，然后 x--, 表示从x到0.  printf(\"%d \", x); } }     引用 \u0026 指针\n 重复绑定对象 空间占用 多层嵌套 赋值-\u003eNULLPTR 相关算数运算 [本质内存地址相关计算] (间址)访问用的符号不一样: ./*/-\u003e, 共三个符号 绑定临时对象, 指针容易引起 段错误. 引用用于函数的参数和返回值, 指针不可以.  C++ 标准并没有明确要求编译器该如何实现引用，但是基本上所有编译器在底层处理上都会把引用当作指针来处理。      遍历字符串中的单词\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  //001 #include \u003csstream\u003e#include \u003cstring\u003e.... string s = \"Somewhere down the road\"; istringstream iss(s); do{ string subs; iss \u003e\u003e subs; cout \u003c\u003c \"Substring: \" \u003c\u003c subs \u003c\u003c endl; } while (iss); //002 #include \u003cstring\u003e#include \u003csstream\u003e#include \u003calgorithm\u003e#include \u003citerator\u003e.... string sentence = \"And I feel fine...\"; istringstream iss(sentence); copy(istream_iterator\u003cstring\u003e(iss), istream_iterator\u003cstring\u003e(), ostream_iterator\u003cstring\u003e(cout, \"\\n\")); /* vector\u003cstring\u003e tokens; copy(istream_iterator\u003cstring\u003e(iss), istream_iterator\u003cstring\u003e(), back_inserter(tokens)); */ /* vector\u003cstring\u003e tokens{istream_iterator\u003cstring\u003e{iss}, istream_iterator\u003cstring\u003e{}}; */     explicit: 拒绝隐式转换（implicit conversion）. 添加的位置在 构造函数前面.\n  隐式转化: 在面向对象中, 可以从基本类型通过 构造函数 转化为对应的函数类型.\n  using namespace std: 命名冲突有关，与性能是没有关系。两个库函数重名问题.\n  位（bit）\n 0UL 表示 无符号长整型 0 ; 1UL 表示 无符号长整型 1, 不加UL表示INT 置 1（bit-set）: number |= 1UL \u003c\u003c n; 清零（bit-clear）: number \u0026= ~(1UL \u003c\u003c n); 取反（bit-toggle）: number ^= 1UL \u003c\u003c n; 检查（bit-check）: bit = (number \u003e\u003e n) \u0026 1U; 根据另一个变量来置位: number ^= (-x ^ number) \u0026 (1UL \u003c\u003c n);    sql 优化插入操作.\n  类型转换的正确用法和应用场景\n static_cast: 静态转换的意思，也就是在编译期间转换，转换失败的话会抛出一个编译错误。  基本数据类型之间的转换。[安全性开发人员保证] void 指针转换成目标类型的指针。[安全性开发人员保证] 任何类型的表达式转换成 void 类型。 有转换构造函数或类型转换函数的类与其它类型之间的转换。 类层次结构中基类和子类之间指针或引用的转换。进行上行转换（即子类的指针或引用转换成基类表示）是安全的，不过一般在进行这样的转化时会省略 static_cast；进行下行转换（即基类指针或引用转换成子类表示）时，由于没有动态类型检查，所以是不安全的，一般用 dynamic_cast 来替代。   dynamic_cast : 动态转换, 会在运行期借助 RTTI 进行类型转换（这就要求基类必须包含虚函数），主要用于类层次间的下行转换（即基类指针或引用转换成子类表示）。对于指针，如果转换失败将返回 NULL；对于引用，如果转换失败将抛出 std::bad_cast 异常。 const_cast: 修改类型的 const 或 volatile 属性 reinterpret_cast : 重新解释的意思，顾名思义，reinterpret_cast 这种转换仅仅是对二进制位的重新解释，不会借助已有的转换规则对数据进行调整，非常简单粗暴，所以风险很高。 C 语言风格类型转化(type)value + 函数式风格类型转换type(value)  其实是一个意思，只是写法风格的差异而已。它涵盖了上面四种*_cast的所有功能，同时它的使用需要完全由程序员自己把控。      不需要对malloc返回的值进行转换\n C 中，从 void* 到其它类型的指针是自动转换的，所以无需手动加上类型转换。 在旧式的 C 编译器里，如果一个函数没有原型声明，那么编译器会认为这个函数返回 int。那么，如果碰巧代码里忘记包含头文件 \u003cstdlib.h\u003e，那么编译器看到malloc 调用时，会认为它返回一个 int。 维护的耦合度高.    include 的 \u003c\u003e \u0026 \"\" diff\n \u003cfilename\u003e一般会去系统路径和编译器预指定的路径找。 \"filename\"一般会去工程目录下找    三法則: 简单来说, 为了日后维护方便, C++里三个成员函数缺一不可:\n  析构函数\n  复制构造函数\n  赋值运算符 (C++)\n  C++ 会以值语义处理用户自定义类型的对象，这就是说在不同的上下文环境中,\n  关于构造赋值函数 (copy constructor) 的编写**[手动管理资源]**, 国内的教材一般说明是 **开辟额外内存空间**, 其实一般更好的方式是 **在构造函数(constructor)中创建资源，并在析构函数释放资源。** 对于忘记写构造赋值函数 (copy constructor)的后果就是 **析构野指针, 引发 未定义行为错误**.\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // 1. copy constructor  person(const person\u0026 that){ name = new char[strlen(that.name) + 1]; strcpy(name, that.name); age = that.age; } // 2. copy assignment operator  person\u0026 operator=(const person\u0026 that){ if (this != \u0026that){ delete[] name; // This is a dangerous point in the flow of execution!  // We have temporarily invalidated the class invariants,  // and the next statement might throw an exception,  // leaving the object in an invalid state :(  name = new char[strlen(that.name) + 1]; strcpy(name, that.name); age = that.age; } return *this; }     注意，初始化构造和赋值的区别是：在对name赋值前需要先释放其内存。同时也需要自检查，如果没有自检查，delete[] name会将that对象的字符串也析构掉。\n  异常安全: 然而，在因为内存耗尽new char[...]抛出异常的时候，赋值运算符就无法保持 强异常安全保证。可以利用一个局部变量来解决这个问题，\n1 2 3 4 5 6 7 8 9 10 11 12  // 2. copy assignment operator person\u0026 operator=(const person\u0026 that){ char* local_name = new char[strlen(that.name) + 1]; // If the above statement throws,  // the object is still in the same state as before.  // None of the following statements will throw an exception :)  strcpy(local_name, that.name); delete[] name; name = local_name; age = that.age; return *this; }   这同时也解决了自赋值的问题，不需要显示检查是否是自身赋值。其实，还有一个更好的办法可以解决这个问题：copy-and-swap，不过不在这里作深入讨论，读者可以跟随链接具体了解。\n我之所以在此处提及异常，是想说：手写一个管理资源的类并不是我们想象中的那么容易。\n  C++11 以来特殊成员函数大家庭又新加入了两名成员：移动构造函数和移动赋值运算符。\n1 2 3 4 5 6 7 8 9 10 11 12  class person{ std::string name; int age; public: person(const std::string\u0026 name, int age); // Ctor  person(const person \u0026) = default; // Copy Ctor  person(person \u0026\u0026) noexcept = default; // Move Ctor  person\u0026 operator=(const person \u0026) = default; // Copy Assignment  person\u0026 operator=(person \u0026\u0026) noexcept = default; // Move Assignment  ~person() noexcept = default; // Dtor };     智能指针管理类???\n      [运算符重载.](\u003chttps://stackoverflow.com/questions/4421706/what-are-the-basic-rules-and-idioms-for-operator-overloading)\n  ??!??!符号: ??!是一个 三字符组，编译器会自动翻译成|, { | } ~  都有这样的转化.[历史原因-EBCDIC]\n1  !ErrorHasOccured() ??!??! HandleError();     内存模型\n  C++ 的标准输入流慢于 Python\n 默认情况下，cin 与 stdin 总是保持同步的，也就是说这两种方法可以混用，而不必担心文件指针混乱，同时 cout 和 stdout 也一样，两者混用不会输出顺序错乱。正因为这个兼容性的特性，导致 cin 有许多额外的开销，如何禁用这个特性呢std::ios_base::sync_with_stdio(false); 这样就可以取消 cin 于 stdin 的同步了。但是会导致scanf\u0026cin混用缓冲区冲突的问题.    Linux分析C++性能?\n  智能指针\n 利用了 RAII（资源获取即初始化）技术对普通的指针进行封装，这使得智能指针实质是一个对象，行为表现的却像一个指针。C++ 标准一共有四种智能指针：auto_ptr、unique_ptr、shared_ptr 和 weak_ptr。其中 auto_ptr 在 C++11 已被摒弃，C++17 中被移除不可用了。 作用:  防止忘记调用 delete。 异常安全   主要是从 value 语义转化为 reference 语义    目前使用模板的唯一方法就是在头文件中实现为内联。\n  :-!!\n1 2 3 4 5 6  /* Force a compilation error if condition is true, but also produce a result (of value 0 and type size_t), so the expression can be used e.g. in a structure initializer (or where-ever else comma expressions aren't permitted). */ #define BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); })) #define BUILD_BUG_ON_NULL(e) ((void *)sizeof(struct { int:-!!(e); }))    (e)：计算 e 表达式 !!(e)：两次逻辑否操作。也就是，如果 e == 0，就返回 0，否则返回 1 -!!(e)：对上面的第 2 步得到的值置负。也就是，0 的负数还是 0，1 的负数为 -1 struct{int: -!!(0);} --\u003e struct{int: 0;}：根据第 3 步，如果是 0，那么就声明一个结构体，里边定义了一个位域长度为 0 的匿名位域变量，此时编译正常通过 struct{int: -!!(1);} --\u003e struct{int: -1;}：但如果是 -1 的话，位域长度为负数，那编译器就会报错了 因为assert是运行期判断，上面的宏是编译期。不过自 C++ 11 起，也支持静态断言了，可以参考 static_assert    移动语义（move semantics）\n  在函数嵌套写法中, 会造成同一个变量的数据从运算结果到匿名变量再到指定变量中 (如string b(x + y);, x+y-\u003e匿名变量-\u003eb), 这个时候如果用移动构造函数, 把匿名函数的内存空间拿给指定变量中, 时间复杂度就可以降下来.\n  写法: 右值引用\u0026\u0026.\n1 2 3 4  string(string\u0026\u0026 that){ // 这个叫做移动构造函数  data = that.data; that.data = nullptr; }       C 语言中, a[5] == 5[a]\n C语言定义[] 为  a[b] == *(a + b)    使用指针而不是对象本身？\n 生命周期  对象被创建在栈上，它的特点就是脱离作用域后会自动销毁。 指针在堆上动态创建一个对象，它的特点就是即使脱离作用域，该对象也会一直存在，除非你手动释放（delete）它，否则就会出现内存泄漏。   什么时候使用 new  延长对象生命周期。 你需要很多内存。   什么时候使用指针  引用语义（reference semantics）： 有的时候，你希望函数传递进来的参数不是一份副本（copy），因为创建副本的代价很大。这个时候，你就可以通过指针。不过 C++ 11 已经有了移动（move）语义，这个问题就不用担心了。 多态（polymorphic）： 对于多态类型，指针和引用可以避免对象被切片（slice）。切片的意思就是说：在函数传参处理多态变量时，如果一个派生类对象在向上转换（upcast），用的是传值的方式，而不是指针和引用，那么，这个派生类对象在 upcast 以后，将会被 slice 成基类对象，也就是说，派生类中独有的成员变量和方法都被 slice 掉了，只剩下和基类相同的成员变量和属性。 希望表示对象是可选的（optional）：** 指针可以被赋值为 nullptr，也就是空的意思，你可以通过设置指针为 nullptr，来表达忽略该变量的含义。C++ 17 新增了 std::optional，那么这个问题也可以得到解决。 你想通过解耦编译单元来减少编译时间： 如果对象都是指针指向的，那么只需要这个类型的前向声明就可以。这可以分离编译过程的各个部分，会显著提高编译时间。 兼容 C 库： C 库的接口大多都是以指针返回对象，这个时候你就不得不用指针。当然你也可以使用智能指针来封装它，这样使用起来就方便了。      extern \"c\" 是什么意思？\n extern \"C\" 用来告诉 C++ 编译器，这部分代码要按照 C 语言的方式去链接。    将 0.1f 更改为 0 性能会降低 10 倍？.md\n **由非规格化浮点数造成的。**处理器对非规格化浮点数的处理效率比规格化浮点数要慢 10-100 倍。下面是针对上面的代码所做的测试    数字转字符串\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003csstream\u003e int main(){ int a=10; std::stringstream ss; ss \u003c\u003c a; std::string str=ss.str(); std::cout\u003c\u003cstr\u003c\u003c'\\n'; //char *instr=std::itoa(a);  //std::string stri = std::string(instr);  //std::cout\u003c\u003cstri\u003c\u003c'\\n';  //Portability This function is not defined in ANSI-C  // and is not part of C++, but is supported by some compilers.  std::string s=std::to_string(42); std::cout\u003c\u003cs\u003c\u003c'\\n'; }       什么时候该定义虚析构函数，为什么要这么做？\n 当你通过一个基类指针去删除（delete）派生对象的时候，虚析构函数就很用了。    C++11 中的 lambda 表达式是什么\n  const int *, const int * const 和 int const *\n int * p - p is pointer to int int const * p - p is pointer to const int int * const p - p is const pointer to int int const * const p - p is const pointer to const int  其中，下面两个是等同的，只是顺序的不同而已，\n const int * == int const * const int * const == int const * const  当然还有更复杂的，\n int ** p - p is pointer to pointer to int int ** const p - p is const pointer to pointer to int int * const * p - p is pointer to const pointer to int int const ** p - p is pointer to pointer to const int int * const * const p - p is const pointer to const pointer to int 读懂 C 的类型声明（译）    虚函数的重要性?\n  C 语言中的函数指针是怎么用的？\n  Continued To Be ......\nREFERENCE 参考资料 [1]. https://github.com/ethsonliu/stackoverflow-top-cpp ","description":"","title":"Stackover Top Questions Notes","uri":"/blog/posts/2021-01-21-stackover-top-notes/"},{"categories":null,"content":"其实摄影和绘画、文字、音乐一样，都是一个载体，一个将创作者的思想或意图传达给读者（观众、听众）的载体。\n好照片:\n 有一个鲜明的主题 把注意力引向被摄主体 尽量简洁  CHANNELS 渠道   IPPAWARDS\n  MPA(Mobile Photography Awards)\n  HUAWEI IMAGES AWARDS\n  TEACHER 老师  原画册韩松 Overwater  NOTES 笔记 CAMERA 相机  单反/微单  镜头   光圈: 一个用来控制光线透过镜头，进入机身内感光面光量的装置，它通常是在镜头内。\n num + f : num 越大, 光圈越小.    大光圈, 进光量多, 主体背景虚化明显. - 小光圈, 进光量少, 主体前后清晰.\n  人像: 1.2 - 3.5 f\n  风景: 2.8 - 5 f\n  星空: 11 f\n  景深: 对焦点放在某处以后，你能以此为中心，看到前后左右的清晰物品的大小范围。\n  焦距(焦段) : 焦点到光心的中心点之间的距离, mm表示。\n 分类[个性]  鱼眼镜头：焦距15mm以下 广角镜头：焦距18—28mm 小广角定焦镜头：焦距35mm 标准镜头：焦距50mm [接近肉眼] 长焦镜头：焦距150mm以上 [望远镜]   APS—C和全画幅的等效焦距换算问题  全画幅相机：镜头上标的多少就是多少。 APS—C相机：佳能/索尼为实际焦距x1.6，尼康为实际焦距x1.5.    自拍到相片, 从瘦到胖.  广角拍摄大气庞博的物体, 有一种变形的感觉 中画副 长画幅 长焦压缩感, 拍扁的效果      相机   对焦\n 自动对焦AF  自动对焦时焦点的选择   手动对焦MP  手动对焦的操作演示   多重对焦  多重对焦的操作演示   余弦误差: 对焦好移动     快门: 控制开启时间\"装置\n  快门用秒来表示，比如1/60 1/125 1/500 1/1600.高速快门，可以拍摄高速运动的物体的清晰定格，\n  低速快门，可以拍摄水流的梦幻效果，星空的流星等等.\n    ISO\n 相机的感光度，能帮助你提高照片亮度，不至于欠曝。IsO越高，照片就越亮。 iso越高，越容易有噪点。当然，这也取决于你的相机素质，不能一概而论。 \u003c 800: 比较细腻 \u003e3200: 可能噪点    白平衡: 数码相机对白色物体的还原。在拍摄时应用白平衡来还原拍摄物体本来的颜色，纠正相机可能在色温影响下产生的色彩偏差。\n 选择:  自动白平衡日光白平衡（5200k） 阴影白平衡（7000k） 阴天白平衡（6000k） 钨丝灯白平衡（7000k） 白色荧光灯白平衡（4000k） 闪光灯白平衡      拍照模式   A+ / Auto: 全自动模式，光圈快门ISO全部由相机按测光设定。只要半按快门对焦拍照就可以。\n  P: 半自动模式, 智能自动，半自动模式，自由的调整光图快门的曝光组合，可以手动调整ISO/白平衡等功能。\n在调节光圈的时候系统会自动匹配一个快门数值；同样在调节快门速度的时候系统也会自动匹配一个光围数值\n  A(V): 光圈优先模式, 光圈优先模式，拍照的时候调节光圈和iso，快门速度是自动匹配的。景深\n  TV/S: 快门优先模式, 快门优先模式下，快门的数值是被预先锁定的，我们先设好快门速度，光圈值是相机根据测光给出的数值。快门优先，可以设置一个安全快门（速度） ，一般是1/焦段，拍照的时候调节快门速度和ISO，光圈是自动匹配的。\n  M: 手动模式\n  ccd/cmos的大小比较  相机的ccd/cmos大小比较相机的选购  MOBILE 手机  相较于单反  手机便携带来的人际间的传达意义远超传统相机   美学规律  某方面趋于统一 特征结构 清晰，明快 对比冲突    LINK 链接  手机街道摄影：街道美学和场景事件 ","description":"","title":"Photography Notes","uri":"/blog/posts/2021-01-19-photography/"},{"categories":null,"content":"[声明]： 该 BLOG 只针对 UEFI+GPT 的 Win10 电脑, 此外, 我的分区形式是 Ubuntu Ext2. 不保证通用\n200125我开坑Ubuntu, 被其简单的系统占用所折服, 我开始使用ubuntu, 一直到现在. 这个记录其实是一以贯之的, 但里面的教程不保证一直有效, 加上我也只能阶段性的记录一下, 更多即时的记录请看 Github - -nix\n多说一句: 在用完 Win10 后有感, 在没有深入了解人类设计的技术前，永远不要过分相信他，就像是你的电脑，在你真正摸清楚他的操作原理和操作逻辑之前，不要过分依赖他，在他面前，你可能就是赤裸的，而我所真正担心的是我没有足够的时间和精力去见证世间的一切，害怕的是自己不能静下心来慢慢的学习起来，对那些Fast Learner肃然起敬，但同时我始终都不了解真正的自己，永远在以伤害自己的方式来逼迫自己努力，而不是全身心的投入到自己的学习生涯中，这又是多么的可悲……\nINSTALL UBUNTU 下载官方的镜像（国内有大量的开源镜像网站），然后用Ultralso烧录到一个8G（4G）大小的U盘。重启机器开到BIOS界面，把BOOT里面的``BOOT Security`关掉，重启进入系统UEFI的U盘启动的模式，先进入Ubuntu里面体验一下，不要直接安装。\n去找系统的安装源list文件，在/etc/apt/sources.list里，用管理员的权限修改下载源地址（提前查到自己对应版本的源地址）。\n1 2  sudo vi /etc/apt/sources.list sudo apt update   分盘的时候还请参考最下面的地址，但是值得注意一下boot不要太小气，就我的话, 我给他2G，主分区32G，交换空间8G( 貌似和Win10虚存类似, 太大也不必 )，/home 60G，共100G, 不再赘述，分区仅供参考。\n换源\n高校镜像源:\n USTC Ubuntu Mirror Tinghua Ubuntu Mirror Ali Ubuntu Mirror  企业镜像源:\n Ali Baba Ubuntu Mirror Netease Ubuntu Mirror Huawei Mirrors  更详细的可以查看 Ubuntu 换源，安装\u0026卸载软件, 简单来说:\n1 2 3 4  #backup your old sourse  sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup # open sources.list  sudo gedit /etc/apt/sources.list   SYS UPDATE 1  sudo update-manager -c -d   APT MANAGE 一般来说, 安装命令有：\n1 2 3 4 5 6 7 8 9 10 11  # 使用apt安装软件,譬如安装tree,这里的 -y 参数是为了在安装的时候默认选择yes sudo apt install tree -y # deb包安装 sudo dpkg -i xxx.deb sudo apt install gdebi sudo gdebi netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb #安装依赖（如果提示需要的话） sudo apt install -f #另一种deb包安装方式 sudo apt install ./xxxx.deb #安装filename.tar.gz软件,然后在解压目录或者bin文件夹中执行setup.sh文件   源码安装: 有些软件没有被收录进软件镜像源，或者说开发者需要去使用他们最新的版本，这时候就要自己去他们的官网或者是代码托管平台下载最新的Linux源码，自己来build。这种方式安装需要解决很多的依赖，安装前多Google。此处还是以tree为例：\n 先下载最新的源码包  1 2 3 4 5  tar zxf tree-1.7.0.tgz #解压 cd tree-1.7.0/ sudo make # make and install sudo make instal l# 如果没有配置环境，先用apt安装build-essential    忽略某些依赖安装(Wechat Failure)  1 2 3 4 5 6  # Check Depend dpkg --info XXX.deb | grep Depends # Apt-get sudo apt install XXX.deb- # dpkg sudo dpkg -i --ignore-depends=\u003c---\u003e XXX.deb   Uninstall 1 2 3 4 5  sudo apt remove --purge XXX sudo apt autoremove --purge XXX dpkg --get-selections | grep XXX sudo apt purge XXX #一个带core的package，如果没有带core的package，则是情况而定。   Clean 1 2 3 4 5 6 7 8  sudo apt autoclean # 只删除过时的软件包，例如最近更新所取代的软件包，就完全不需要它们。 sudo apt autoremove dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P # 清理日志问题. sudo echo \u003e /var/log/syslog sudo echo \u003e /var/log/kern.log   如果出现zsh/bash权限不足的情况, 使用sudo -i临时切换到Root用户的模式下进行操作. 操作完exit退出即可.\n清理SNAP\n执行脚本:\n1 2 3 4 5 6 7 8  #!/bin/bash # Removes old revisions of snaps # CLOSE ALL SNAPS BEFORE RUNNING THIS set -eu snap list --all | awk '/disabled/{print $1, $3}' | while read snapname revision; do snap remove \"$snapname\" --revision=\"$revision\" done   Run AppImage  AppImage 是一种把应用打包成单一文件的格式，允许在各种不同的目标系统（基础系统(Debian、RHEL等)，发行版(Ubuntu、Deepin等)）上运行，无需进一步修改。\n 简而言之就是绿色通用版本.\n下载好程序的时候选择[属性]-\u003e 可执行文件. 点击即可, 一般我习惯放在 /home/usrname/opt/下, 也可以节省下根目录的空间内存......\ncd /usr/share/applications 创建一个.desktop文件. 然后编辑以下内容即可创建图标, 值得注意的是程序运行的图标的是包自带的, 这里定义的只能是应用菜单的.[^14][^15]\n1 2 3 4 5 6 7 8 9 10 11 12  [Desktop Entry] Version=1.0\tEncoding=UTF-8\t# 字符编码  Name= XXX Comment= XXX\t# 鼠标经上提示名称 也可国际化 Exec=XXX # 菜单执行的命令或程序路径 Terminal=false Icon=XXX # 图标路径 Type=Application Categories=Development StartupNotify=false；\t#设置软件启动是不通知 Hidden=false\t#菜单是否隐藏，类似NoDisplay属性   BINARY FILE 直接编译好的包可以./x运行即可, 方便的话就打包一个desktop文件.\nKnowledge For APT \u0026 APT-GET APT的其它命令选项可以实现与使用 apt-get 时相同的操作。虽然 apt 与 apt-get 有一些类似的命令选项，但它并不能完全向下兼容 apt-get 命令。也就是说，可以用 apt 替换部分 apt-get 系列命令，但不是全部。\n   apt 命令 取代的命令 命令的功能     apt install apt-get install 安装软件包   apt remove apt-get remove 移除软件包   apt purge apt-get purge 移除软件包及配置文件   apt update apt-get update 刷新存储库索引   apt upgrade apt-get upgrade 升级所有可升级的软件包   apt autoremove apt-get autoremove 自动删除不需要的包   apt full-upgrade apt-get dist-upgrade 在升级软件包时自动处理依赖关系   apt search apt-cache search 搜索应用程序   apt show apt-cache show 显示装细节    当然，apt 还有一些自己的命令：\n   新的apt命令 命令的功能     apt list 列出包含条件的包（已安装，可升级等）   apt edit-sources 编辑源列表    APT-GET\n对于低级操作，仍然需要 apt-get。\nDeb Manage45 SHORTCUT Desktop Shortcut    Operation Effects Operation Effects     Alt + F1 聚焦到桌面左侧任务导航栏，可按上下键进行导航 Alt + F2 运行命令   Alt + F4 关闭当前窗口 Alt + Tab 切换程序窗口   Alt + 空格 打开窗口菜单 PrtSc 桌面截图   Win + A 搜索/浏览程序 Win 搜索/浏览程序、文件、音乐文件等   Win + F 搜索/浏览文件 Win + M 搜索/浏览音乐文件    Terminal Shortcut    Operation Effects Operation Effects     Ctrl + Alt + T 打开终端 Tab 命令或文件名自动补全   Ctrl + Shift + C 复制 Ctrl + Shift + V 粘贴   Ctrl + Shift + T 在同一个窗口新建终端标签页 Ctrl + Shift + W 关闭标签页   Ctrl + Shift + N 新建终端窗口 Ctrl + Shift + Q 关闭终端窗口   Ctrl + Shift + PageUp 标签页左移 Ctrl + Shift + PageDown 标签页右移   Ctrl + D 关闭标签页 Ctrl + C 终止当前任务   Ctrl + L 清除屏幕 Ctrl + P 显示上一条历史命令   Ctrl + N 显示下一条历史命令 Ctrl + R 反向搜索历史命令   Ctrl + J/M 回车（同enter键功能） Ctrl + A 光标移动到行首   Ctrl + E 光标移动到行尾 Ctrl + B 关闭想后移动一个位置（backward）   Ctrl + Z 把当前任务放到后台运行 Ctrl + PageUp 前一个终端标签页   Ctrl + PageDown 下一个终端标签页 F1 打开帮助指南   Win + W 展示所有窗口 Win + T 打开回收站   Ctrl + Win + ↓ 还原/最小化当前窗口 Ctrl + Win + D 最小化所有窗口   Ctrl + \u0026 恢复Ctrl + H/D/W删除的内容 Ctrl + Win + ↑ 最大化当前窗口   Ctrl + D 删除光标位置的一个字符（delete键功能） Ctrl + W 删除光标位置的前一个单词（Alt + Backspace组合键功能）   Ctrl + K 剪切从光标位置到行末的所有字符 Ctrl + Y 粘贴Ctrl + U/Ctrl + K剪切的内容   Ctrl + U 剪切从行的开头到光标前一个位置的所有字符 Ctrl + H/* 删除光标位置的前一个字符（backspace键功能）   Ctrl + ← 光标移动到下一个单词的词尾 Ctrl + → 光标移动到上一个单词的词首   Alt + H 打开“帮助”菜单（help） Ctrl + T 将光标位置的字符和前一个字符进行位置交换   Alt + V 打开“查看“菜单（view） Alt + T 打开“终端”菜单（terminal）   Alt + E 打开“编辑”菜单（edit） Alt + S 打开“搜索”菜单（search）   F11 全屏切换 Alt + F 打开“文件”菜单（file）    补充：\n2次连续Tab/4次连续Esc/2次连续Ctrl + I|将显示所有命令和工具名称\nGedit Shortcut    Operation Effects Operation Effects     Ctrl + N 新建文档 Ctrl + W 关闭文档   Ctrl + S 保存文档 Ctrl + Shift + S 另存为   Ctrl + F 搜索 Ctrl + H 搜索并替换   Ctrl + I 跳到某一行 Ctrl + C 复制   Ctrl + V 粘贴 Ctrl + X 剪切   Ctrl + Q 退出      使用 ctrl + ;（此为 fcitx 自带剪贴板插件） ：查看粘贴板的内容，此时显示的就不只有一条内容，一般而言是最近的五次复制的内容。使用数字键进行选择。\nBUGS Boot 无法进去系统(花屏) 由于 Ubuntu(Linux) 并不是内置N卡驱动，所以如果有 N卡独显 笔记本会发生在 Ufi模式 下启动U盘进入系统的时候卡死。应该先用 e 进去 Boot 设置，在末尾 quiet splash 的后面先空一格再加上acpi_osi=linux nomodeset，F10保存退出,\n[Tip] : 如果quiet splash后面发现有- - -这串符号，直接删了就是，只要保证上述添加的参数在splash后面即可\nN卡驱动 进去之后要换aliyun的源, 进去发现分辨率是锁死的(反正不是1080P)，是Ubuntu自带的显卡驱动背的锅(好像Ubuntu20.04LTS 已经自带 N卡 驱动了......)，更新N卡驱动:\n1 2 3 4 5 6 7 8 9 10  sudo ubuntu-drivers autoinstall # 自动安装 sudo gedit /etc/modprobe.d/blacklist.conf # 黑名单 blacklist vga16fb # for nvidia display device install blacklist nouveau blacklist rivafb blacklist rivatv blacklist nvidiafb sudo update-initramfs -u \u0026\u0026 reboot # 刷新重启   Touchpad 下面是一段脚本1, 保存sh文件后运行.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  #!/bin/bash # # Gestures install  # version 1.3 #  # by The Fan Club 2020 # # NOTE: run as sudo # # # Remove if selected  if [ \"$1\" = \"--remove\" ]; then echo \"[Gestures] Gestures uninstall started...\" python3 -m pip uninstall gestures rm /usr/local/bin/gestures rm /usr/share/applications/org.cunidev.gestures.desktop rm /usr/share/metainfo/org.cunidev.gestures.appdata.xml rm /usr/share/icons/hicolor/scalable/apps/org.cunidev.gestures.svg # remove libinput-gestures su $SUDO_USER libinput-gestures-setup stop su $SUDO_USER libinput-gestures-setup autostop libinput-gestures-setup uninstall\techo \"[Gestures] Gestures removal complete.\" exit fi # # Install libinput-gestures - https://github.com/bulletmark/libinput-gestures echo \"[Gestures] Gestures install started...\" # # Add user to input group gpasswd -a $SUDO_USER input echo \"[Gestures] $SUDO_USERadded to input user group\" # Install prerequisites echo \"[Gestures] Install all depedencies\" apt-get install xdotool wmctrl libinput-tools python3 python3-setuptools python3-gi python-gobject python3-pip build-essential git # Install/Update if [ -d libinput-gestures ]; then rm -r libinput-gestures fi echo \"[Gestures] Downloading libinput-gestures from GitHub...\" git clone https://github.com/bulletmark/libinput-gestures.git cd libinput-gestures make install cd .. echo \"[Gestures] libinput-gestures installed\" # # Install Gestures - https://gitlab.com/cunidev/gestures # # Install  if [ -d gestures ]; then rm -r gestures fi echo \"[Gestures] Downloading Gestures from GitLab...\" git clone https://gitlab.com/cunidev/gestures cd gestures python3 setup.py install # Cleanup cd .. rm -r gestures rm -r libinput-gestures echo \"[Gestures] Gestures installation complete\" # Autostart libinput-gestures at boot and start now for current user su $SUDO_USER libinput-gestures-setup stop su $SUDO_USER libinput-gestures-setup autostart su $SUDO_USER libinput-gestures-setup start echo \"[Gestures] libinput-gestures started for $SUDO_USER\" # Autostart Gestures  cp /usr/share/applications/org.cunidev.gestures.desktop /home/$SUDO_USER/.config/autostart/ sed -i 's/=gestures/=gestures\\\u0026/g' /home/$SUDO_USER/.config/autostart/org.cunidev.gestures.desktop chown $SUDO_USER:$SUDO_USER /home/$SUDO_USER/.config/autostart/org.cunidev.gestures.desktop echo echo \"[Gestures] Reboot to complete the installation\"   解决无法支持三指和四指的遗憾.\n亮度异常 安装完成之后发现亮度是不可以调节 :\n1 2 3 4 5 6 7  # edit by nano, choose one between vim and nano.  # 按 Ctrl+O 保存、按 Ctrl+X 退出编辑 sudo nano /etc/default/grub # edit by vim/vi sudo apt sudo vim /etc/default/grub   将 GRUB_CMDLINE_LINEX_DEFAULT那一行改成：\n1 2 3  GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash acpi_backlight=vendor acpi_osi=Linux\" # 更新后重启 (重启可能时间比较长) sudo update-grub \u0026\u0026 reboot   语言设置 一个小小的建议：语言设置这是用拖动的 [笑] 。\ndpkg:错误：另外一个进程已经为 dpkg 状态数据库 加锁 可能是开机自动更新会占用一会儿这个进程，要么PS kill 他，要么等一会就可以。\n安装deb 包缺少以来关系，仍未被处理的时候 1  sudo apt install -f   ubuntu 18.04无法从fwupd下载固件  通常是更新BIOS、更新网卡之类的需要fwupd。Android手机的bootloader就相当于电脑BIOS，所以Android更容易刷成砖。电脑重装系统是不会碰BIOS的，所以特殊情况才会成砖。\n 双系统的时间不统一 1 2  #这个是Bios里面的 Boot Secury 的问题, 但是关闭之后在进入Ubuntu后又会出现一系列问题. sudo hwclock -w --localtime   initramfs-tools报错 当初分盘的时候太小气，看见别人/boot分区给了200M，但是太小了，以后给大点就不会有这问题了。解决方法是删掉多余的内核。dpkg命令是Debian Linux系统用来安装、创建和管理软件包的实用工具。查看自己的linux内核和正使用的内核，然后选择性删除。\n1 2 3  sudo dpkg --get-selections |grep linux-image sudo uname -a sudo apt purge 内核名称   然后清理/usr/src目录,删除你已经卸载的内核目录\n内核版本显示为install，表示系统已经安装了相应的内核，使用purge命令删除相应的内核。\n1  sudo apt purge linux-image-4.4.0-130-generic   deinstall，表示系统没有安装此内核，但是在配置文件中还残留它的信息，也有可能是以前卸载的时候不彻底。 正常情况下，就已经清理完成辣。输入df查看/boot的已用百分比。\n1  sudo dpkg -P linux-image-extra-4.4.0-128-generic   更换介质：请把标有……  “更换介质：请把标有…… DVD 的盘片插入驱动器“/media/cdrom/”再按回车键，\n 1 2 3 4  # 修改`/etc/apt/sources.list`文件，注释掉`deb cdrom:`开头的一行（第一行） cd ~ vim /etc/apt/sources.list apt update   ubuntu支持exfat方法  推荐u盘使用exfat格式，为什么呢？两个原因： 1、三大主流操作系统（Linux、Mac、Windows）都支持exfat格式。 2、exfat支持大于4G的文件。\n 在ubuntu下，由于版权的原因（据说），默认不支持exfat格式的u盘，对于ubuntu 14.04以上版本，直接运行下面的命令就可以了：\n1  sudo apt install exfat-utils   Ubuntu的在线账户 及时获取Ubuntu社区的更新.\nsnap错误has install-snap change in progress 1 2  snap changes # 获取任务Id sudo snap abort 14   Ubuntu 永久挂载Win10磁盘 实际挂载前，D盘为 /dev/XX，E盘为 /dev/XXX（注意！这里 sd 后面的不一定和 Windows 一样，图里 Windows 和 Ubuntu 同处于 SSD 上，而 D 和 E 盘均位于 HDD 上，所以从 a 变成了 b）\n 接下来，我们假设你要挂载的分区地址为 /dev/XX（原 Windows 中的非系统文件目录，即通常意义上的 Windows 分区），要挂载到地址为 /mnt/windows/d（Ubuntu 中的非系统文件目录，即 Linux 中的一个目录） 你当然可以（而且必须）根据你的实际情况修改分区地址\n 1 2  sudo mkdir /mnt/windows/d# 然后关闭 WIndows 的**快速启动**，临时挂载，重启失效，适用于偶尔需要一次的： sudo mount /dev/XX /mnt/windows/d   在执行完成后，访问你的 /mnt/windows/d 应该就能看到原盘符中的文件了，没有文件显示请重启电脑查看第二种方式——永久挂载。\n我们需要修改系统文件 /etc/fstab，在此之前，我们需要先获得 /dev/XX 的 UUID，执行指令：\n1 2 3 4 5 6 7 8  sudo blkid /dev/XX sudo apt install vim sudo vim /etc/fstab #插入形如 UUID=XXXXXXXXXX /mnt/windows/d ntfs defaults 0 2的字段; 其中第一列为UUID, 第二列为挂载目录（该目录必须为空目录），第三列为文件系统类型，第四列为参数，第五列0表示不备份，最后一列必须为２或0(除非引导分区为1)，如果你是grub引导的话，你会注意到boot分区是1. sudo mount -a#检查一下，发现还是报错，The disk contains an unclean file system，执行下面： sudo apt install ntfs-3g sudo ntfsfix /dev/XX sudo mount -a#再检查一下，发现全是OK，哈哈   上面流程走一遍发现该目录下没有文件，可以右键属性检查一下，如果确实存在，那么重启电脑就OK了，我只挂载了我win的数据盘，系统盘还是不要动的好……\nGrub Wifi 1  909778] iwlwifi 0000: 00: 14.3: BIOS contains HGDS but no HRDS   暂时无解, 不影响使用...\nRoot模式 部分命令找不到 因为系统变量和用户变量不一样, 所以需要将用户变量配置到系统变量里.\n没有批量操作的压缩命令  写 Shell/Python 脚本  1 2 3 4  for i in (fileName) do xxx -x $i done    使用gnome的右键压缩指令. Other  Ubuntu Utf-8 和 Win GBK 的转化  使用unar命令: unar (-o (GBK)) xx.zip Other  /bin/bash^M: bad interpreter: No such file or directory [Cause] : 脚本文件是DOS格式的, 即每一行的行尾以\\r\\n来标识\n1 2  :set ff? # 如果显示是DOS/UNIX set ff=unix   Hang Up Bug 长时间挂起会导致显示出现问题, 我自己遇到的是 GUI页面崩溃. 可以进入tty2 输入 r 来重启 GUI页面, 但是声卡出现问题[输出显示伪输出]暂时没有什么有效的解决方法,\n挂起后花屏？ 挂起时间和导致的问题相关, 短时间内挂机不会产生什么作用, 但是长时间就会导致 Preface 里面的问题.\n挂起:Suspend To RAM(STR)\n休眠: Suspend To Disk(STD)\n一种可能是设备的驱动问题不支持挂起, 但是短时间却可以这是什么鬼???\n伪输出[Undo]  把你当前的用户加入audio组  1  sudo usermod -a -G audio $USER   更加详细的可以参考这个\n 可能是内核的问题  暂无解决方法, TO BE CONTINUED...\n输出文件中带有 口[34;42m 口[00m等乱码字符 这个是因为输入的文件带有颜色转义符号引起的, 所以想办法临时禁用颜色即可.\nsu提示认证失败 Ubuntu安装后，root用户默认是被锁定了的，不允许登录，也不允许 su 到 root ，对于桌面用户来说这个可能是为了增强安全性\n1  sudo passwd # 输入安装时那个用户的密码 , 新的Root用户密码   扩展触摸屏触控错位 造成的原因是 触控的驱动进程的端口是自己的主显示器/旋转自己的显示器但是触控没有跟着旋转, 所以需要用命令让进程的端口开放给显示器 HDMI接口 上. 具体如下:\n1 2 3 4  xrandr # primitive command line interface to RandR extension xinput # utility to configure and test X input devices xinput map-to-output XXX(ID) HDMI-0 # Restricts the movements of the absolute device to the RandR crtc. The output name must match a currently connected output (see xrandr(1)). If the NVIDIA binary driver is detected or RandR 1.2 or later is not avail‐able, a Xinerama output may be specified as \"HEAD-N\", with N being the Xinerama screen number. This option has no effect on relative devices.   但是关于显示器用来画画那种需要频繁切换的用户, 建议走:\n Ubuntu下触摸屏校准及自动旋转屏幕 树莓派(Linux 系统)触摸屏翻转显示以及触摸翻转  libinput 一个触控屏驱动, 更多参考:\n What is libinput  Linux 下蓝牙鼠标连接几秒后自动断开  https://www.v2ex.com/t/399966 https://unix.stackexchange.com/questions/91027/how-to-disable-usb-autosuspend-on-kernel-3-7-10-or-above%E3%80%82 https://www.it-swarm.asia/zh/usb/%e5%a6%82%e4%bd%95%e7%a6%81%e7%94%a8%e7%89%b9%e5%ae%9a%e8%ae%be%e5%a4%87%e7%9a%84usbautosuspend%ef%bc%9f/959819442/  BEAUTIFY   窗口三金刚移左(14版本之后) sudo apt install gnome-tweaks+gnome-tweaks\n  Gnome-look + ~/.themes +gsettings set org.gnome.desktop.interface gtk-theme \"XXX\" + gsettings set org.gnome.desktop.wm.preferences theme \"XXX\"\n  Font2\n ln -s /Windowsdrive/Windows/Fonts /usr/share/fonts/WindowsFonts 将字体位置链接到你的 Linux 系统的字体文件夹 fc-cache 重新生成 fontconfig 缓存    DESKTOP ICON3 1 2 3 4 5 6 7 8 9 10 11 12  $ sudo vim /usr/share/applications/Clash.desktop $ vim Clash.desktop ＃[Desktop Entry] 文件头 ＃Version 版本 ＃Name 应用名称 ＃Name[xx] 不同语言的应用名称 ＃Comment 注释 ＃Exec 执行文件路径 ＃Icon 图标路径 ＃Terminal 是否使用终端 ＃Type 启动器类型 ＃Categories 应用的类型（内容相关）   AUTO RUN 指定运行级别 /etc/inittab\n 0：关机 1：单用户【找回丢失密码】 2：多用户状态没有网络服务 3：多用户状态有网络服务 4：系统未使用保留给用户 5：图形界面 6：系统重启  如何找回 root 密码，如果我们不小心，忘记 root 密码，怎么找回。\n 思路： 进入到 单用户模式，然后修改 root 密码。因为进入单用户模式，root 不需要密码就可以登录。  UNINSTALL UBUNTU 用的不习惯当然先卸载了，Emmmmm，哈哈哈哈，卸载比较简单，大家都知道如果你按照下面的链接安装无误的话，启动引导用的是Ubuntu自带的的 GUN GRUB，如果你分盘的时候没有选择下面的启动引导设置，那么你第一次启动的时候一定不会进入Ubuntu的系统。\n综上所述，我们把 GUN GRUB干掉，然后选择磁盘分区的删除卷即可，软件的话，用EasyUEFI，官网下载的话需要梯子，然后我这里如果有时间会给出下载链接，去网上随便下载一个就好了。\nLINK  Debain Ubuntu Wiki_Ubuntu_En  Site  ubutntu_launchpad linux_forum cn-wiki ubuntu lulinux linux_cn linux dir linux ywnz linux_hint linux_probe  Tools  Linux Command Search Mirrors Linux  Guidences  ubuntu常见问题指南 新手发问前必看 ubuntu安装好之后，怎样再重新分区？ ubuntu系统重新分区、根目录扩容   REFERENCE [1]. https://www.thefanclub.co.za/how-to/ubuntu-touchpad-gestures-install [2]. https://zhuanlan.zhihu.com/p/40434062 [3]. https://www.jianshu.com/p/99d3eebcf17f [4]. https://blog.csdn.net/gatieme/article/details/52829907 [5]. https://blog.csdn.net/u010648555/article/details/88542150","description":"","title":"Ubuntu All in One | 我的 Ubuntu 合集","uri":"/blog/posts/2021-01-19-ubuntu-all-in-one/"},{"categories":null,"content":"说说耳机的 坑点, 信息获取 及 主观感受. 先看看我用过的耳机:\n  牌子 型号 感受   Apple EarPods [漏电已坏] 耳机蛮良心, 声音什么的都很正, 唯一缺点是线很容易黄   Edifier H295P [丢失] 记得不多了, 和苹果的相似, 多了一些入耳式的封闭的特点   Philips SHP9500 ......   Vido MX500 直白的说就是敲铁皮的声音, 但是三段要啥有啥, 9.9包邮我赚了?   Xiaomi Air2 [骗钱+试探市场+已出] 音质没什么特点但很通透; 续航极差! 单耳机甚至在使用一年后连三小时都撑不过去, 盒子只能给两只耳机同时充1.5次电. 后期出现连续断连而不维护. 下面是Air2s的介绍页面1, Air2已消失   水月雨 SSR(官网无该页面...) [换线已丢] 重人声, 中低音不明显, 声场略窄./   sony WH-CH700N ......  Notes 笔记 Category 分类   佩戴\n 头戴式(AE) 入耳式(IE) 压耳式(OE) 平头塞/半入耳 项圈式 TWS    是否有线\n 有线    (真)无线\n  按换能原理（Transducer）\n 动圈耳机（Dynamic）：目前绝大多数（大约99%以上）的耳机耳塞都属此类，原理类似于普通音箱，处于永磁场中的线圈与振膜相连，线圈在信号电流驱动下带动振膜发声 静电耳机（Electrostatic）：振膜处于变化的电场中，振膜极薄、精确到几微米级（目前STAX新一代的静电耳机振膜已精确到1.35微米），线圈在电场力的驱动下带动振膜发声    虽然除这二类之外尚有等磁式等数种，但或是已被淘汰或是用于专业用途市场占有量极少，在此不做讨论。\n  按开放程度\n 开放式的耳机一般听感自然，佩带舒适，常见于家用欣赏的HIFI耳机，声音可以泄露、反之同样也可以听到外界的声音，耳机对耳朵的压迫较小 半开放式：没有严格的规定，声音可以只进不出亦可以只出不进，根据需要而做出相应的调整 封闭式：耳罩对耳朵压迫较大以防止声音出入，声音正确定位清晰，专业监听领域中多见此类，但这类耳机有一个缺点就是低音音染严重，W100就是一个明显的例子。    按用途\n 家用（Home） 便携（Portable） 监听（Monitor） 混音（Mix） 人头唱片（Binaural　Recording）    耳机相关参数  阻抗（Impedance）：注意与电阻含义的区别，在直流电（DC）的世界中，物体对电流阻碍的作用叫做电阻，但是在交流电（AC）的领域中则除了电阻会阻碍电流以外，电容及电感也会阻碍电流的流动，这种作用就称之为电抗，而我们日常所说的阻抗是电阻与电抗在向量上的和。高阻抗耳机的设计，最主要的作用就是对于音质的追求，但阻抗的高低并不能够决定音质的好坏。现在很多高端发烧级耳机也采用了低阻抗的设计；同时也有一些售价在几百元的高阻抗耳机，音质也就不用多说什么了。高阻抗的耳机，最主要是对音乐的还原，毕竟阻抗越大，音源输出影响越小，一定程度上提高了信噪比，也就是降低了噪音的相对功率，真实程度就越高；还能够通过阻抗的不同来改变听音的风格，以至于我们看到现在一些经典的高端耳机，都会有不同阻抗的版本来适应不同用户喜爱的音乐风格。  信噪比高。任何放大电路都有本底噪声，即输入端短路后，在输出端用仪器测到的噪声，它基本上不随音量旋钮钟点位置改变而改变，换句话说，这是一个固定的电压值。这样，根据欧姆定律就可以简单地得出结果：高阻：噪声功率小；低阻：噪声功率大。所以高阻抗的耳机声底更加的纯净。 最大程度上避免放大器中点直流偏移电位的负面影响。OCL电路是功率放大器的主流结构，而任何一个OCL在输入为零时，其输出端都不是绝对的零。细心的朋友会发现，当你把耳机插头插入打开电源的耳放时，会听到电流冲击声。放大器存在的这个中点偏移表现形式为电压，通常大小为几个毫伏，例外也有几十个毫伏的。耳机的音圈在这个电压的作用下，会稍稍偏移它在磁隙中的初始位置，这导致耳机的有效冲程缩小，和失真加大。在相同的偏移电压下，高阻耳机的音圈偏移相对小。 动态好，同系列耳机的高阻版本，音圈匝数相同，但线更细，振动系统的质量，也就是惯性降低，对微弱和快速的信号的跟随能力增加。所以不容易受到杂讯干扰，如果能有足够的功率推动，就能呈现出震撼的动态效果和宽广的频响。这种效果尤其是在一些大制作编曲中，如交响乐、舞台剧等，则可以把音乐的气势完全展现出来。 失真低。 高阻系统的作用就是在实现高解析的情况下尽可能的减少动态失真度。从放大器失真角度，高阻耳机负载轻，放大器相对工作在失真较低的状态下，保证回放效果整体的平衡性，所以失真相对低阻耳机更低。 耐受性更好。 当出现某些极端、意外状况时，比如放大器故障、音量旋钮突然开大等，高阻耳机有更好的耐受性，不会被烧毁。   灵敏度（Sensitivity）：指向耳机输入1毫瓦的功率时耳机所能发出的声压级（声压的单位是分贝，声压越大音量越大），所以一般灵敏度越高、阻抗越小，耳机越容易出声、越容易驱动。 频率响应（Frequency Response）：频率所对应的灵敏度数值就是频率响应，绘制成图象就是频率响应曲线，人类听觉所能达到的范围大约在20Hz-20000Hz，目前成熟的耳机工艺都已达到了这种要求。  音质评价术语  音域：乐器或人声所能达到最高音与最低音之间的范围 音色：又称音品，声音的基本属性之一，比如二胡、琵琶就是不同的音色 音染：音乐自然中性的对立面，即声音染上了节目本身没有的一些特性，例如对着一个罐子讲话得到的那种声音就是典型的-音染。音染表明重放的信号中多出了（或者是减少了）某些成分，这显然是一种失真。 失真：设备的输出不能完全复现其输入，产生了波形的畸变或者信号成分的增减。 动态：允许记录最大信息与最小信息的比值 瞬态响应：器材对音乐中突发信号的跟随能力。瞬态响应好的器材应当是信号一来就立即响应，信号一停就嘎然而止，决不拖泥带水。（典型乐器：钢琴） 信噪比：又称为讯噪比，信号的有用成份与杂音的强弱对比，常常用分贝数表示。设备的信噪比越高表明它产生的杂音越少。 空气感：用于表示高音的开阔，或是声场中在乐器之间有空间间隔的声学术语。此时，高频响应可延伸到15kHz-20kHz。反义词有“灰暗（dull）”和“厚重（thick）”。 低频延伸：指音响器材所能重放的最低频率。系用于测定在重放低音时音响系统或音箱所能下潜到什么程度的尺度。比方说，小型超低音音箱的低频延伸可以到40Hz，而大型超低音音箱则下潜到16Hz。 明亮：指突出4kHz-8kHz的高频段，此时谐波相对强于基波。明亮本身并没什么问题，现场演奏的音乐会皆有明亮的声音，问题是明亮得掌握好分寸，过于明亮（甚至啸叫）便让人讨厌。  放大器 一般的放大器可分为晶体管（石机）和电子管（胆机）放大器两类\n  放大器: 前置放大器和功率放大器的统称。\n 功率放大器: 简称功放，用于增强信号功率以驱动音箱发声的一种电子装置。不带信号源选择、音量控制等附属功能的功率放大器称为后级。 前置放大器: 功放之前的预放大和控制部分，用于增强信号的电压幅度，提供输入信号选择，音调调整和音量控制等功能。前置放大器也称为前级。    甲类放大（class-A）(A类放大): 为放大器的一种工作状态。此时晶体管或电子管放大器将会对整个的音频信号进行放大。\n  乙类放大（class-B）(B类放大): 为放大器的一种工作状态。此时一路晶体管或电子管放大器将会放大音频信号的正半部分，而另一路晶体管或电子管放大器则放大信号的负半部分。\n  甲乙类放大（class AB）(AB类放大): 放大器的一种工作状态。此时放大器的输出级在输出功率为低电平时便按甲类放大状态，而在输出功率为高电平时便转换为乙类放大。\n  线材 大多数耳机线都以铜为原料，一般的纯度(一般用几N表示，比如4N、6N……）越高导电性越好，信号失真越小，常见的有：\n TPC（电解铜）：纯度为99.5% OFC（无氧铜）：纯度为99.995% LC-OFC（线形结晶无氧铜或结晶无氧铜）：纯度在99.995%以上 OCC（单晶无氧铜）：纯度最高，在99.996%以上，又分为PC-OCC和UP-OCC  前端器材 许多HIFI发烧友习惯将唱机分离成转盘和解码器两部分以得到音质更好的音乐\n 前端：多指声频系统中的信号源，如LP密纹慢转唱机或CD唱机，有时也指调谐器（收音头）中处理从无线接收到的信号的前级。 CD转盘：将CD机的机械传动部分独立出来的机器。 D/A转换器：数码音响产品(例如CD、DVD) 中将数字音频信号转换为模拟音频信号的装置。D/A转换器可以做成独立的机器，以配合CD转盘使用，此时常常称为解码器（DAC）。  降噪 四种降噪方式如下2:\n   方式 详情     ANC (Active Noise Control) 麦克风收集外部的环境噪音，然后系统变换为一个反相的声波加到喇叭端中和从感官上降低噪音   ENC (Environmental Noise Cancellation) 通过双麦克风阵列，精准计算通话者说话的方位，在保护主方向目标语音的同时，去除环境中的各种干扰噪声   DSP (Digital Signal Processing) 麦克风收集外部环境噪音，然后系统复制一个与外界环境噪音相等的反向声波，将噪音抵消   CVC (Clear Voice Capture) 通过全双工麦克风消噪软件，提供通话的回声和环境噪音消除功能    Wiki 维基   Info Chennel:\n 贴吧 耳机大家坛 民间 QQ 友.    flag:\n  振膜材料\n  音圈\n  声学滤波器\n  磁路\n  低电平高Q谐振\n  信噪比（SNR）\n  频响（fr）\n  动态范围（DNR）\n  哈曼曲线\n  输出负载\n  输出功率\n  DCM解码力\n  DSD解码力\n  thd\n  人声 2-4k\n  32ohm\n  纵深\n  推力 失真\n  拥趸 宵小\n  KoL 小九九\n  footvar2000\n  ABX Comporvotor\n  微动圈\n  Ri-Res\n  ODM\n  外产\n  总锴波失真\n  相位失真\n  结像 分离\n  前端友好的灵敏度十阻抗\n  频域响应\n  信噪\n  hd频码线？\n  如何迅速判断你的耳机易不易推……需要结合两个参数：\n一，看耳机灵敏度——对于100ohm以下的耳机（lgZ\u003c2），105-108dB/mW以上的灵敏度为易推。或者无视阻抗下，120-123dB/V以上灵敏度则为易推。\n二，看前端最大不失真输出——这个比较难，你哪怕知道了前端的最大输出功率，但并不能确定这个功率范围内是否仍有较好的指标。如我店realtek单晶铜连接线满血版在输出24mW-28mW@32ohm时指标仍旧相对良好，超过则迅速劣化。但其它调教的5686在超过10mW时thd就高于-85dB。\n在24mW这个水平只要耳机在32欧灵敏度在105dB/mW以上时就可以将耳机推到足以爆炸鼓膜的115dB以上，满足一切音源欣赏所需动态范围，绰绰有余。\n然而大部分手机哪怕是带运放的hifi手机并没有这类音频解码线有单独稳定的的供电和独占屏蔽，信噪比和谐波失真远远达不到所使用dac的理论性能，如xplay6，部分笔记本台式机的板载声卡也极为一般。所以现在的直推，更多的是建立在单独的usb音频线去考虑，而不是现今极为少见的耳机孔。\n然而能不能听出来指标劣化就是另一回事了，比如我理想情况下最多听到-60dB，5686 -80dB的thd对我来说已完全足够，大家也可以去实测一下。\nDREAMS 理想    DREAM     64Audio U18tzar 18单元动铁¥14999   Softears Turii 单动圈 ¥ 8999    LINK 链接   理性派HiFi\n  HIFI耳机基础知识入门\n  为什么有的发烧耳机阻抗那么高，到600欧，而最小的才16，32Ω？\n  如何选购适合自己的耳机？\n  REFERENCE 参考资料 [1]. https://www.mi.com/buy/detail?product_id=11821 [2]. https://zhuanlan.zhihu.com/p/61208255","description":"","title":"My Earphone","uri":"/blog/posts/2021-01-18-my-earphone/"},{"categories":null,"content":"The end-to-end principle is a design framework in computer networking. In networks designed according to this principle, application-specific features reside in the communicating end nodes of the network, rather than in intermediary nodes, such as gateways and routers, that exist to establish the network.\n一个设计框架计算机联网。在根据该原理设计的网络中，特定于应用程序的功能驻留在网络的通信端节点中，而不是存在于建立网络的中间节点（如网关和路由器）中。\nDETAILS A basic premise of the principle is that the payoffs from adding features to a simple network quickly diminish, especially in cases in which the end hosts have to implement those functions only for reasons of conformance, i.e. completeness and correctness based on a specification. Implementing a specific function incurs some resource penalties regardless of whether the function is used or not, and implementing a specific function in the network distributes these penalties among all clients.\n基本前提是，将特征添加到简单网络的收益会迅速减少，尤其是在最终主机仅出于一致性（即基于规范的完整性和正确性）的原因而必须实现这些功能的情况下。不管是否使用该功能，实现特定功能都会招致一些资源损失，并且在网络中实现特定功能会将这些损失分配给所有客户端。\nInternet Protocol (IP) is a connectionless datagram service with no delivery guarantees. On the internet, IP is used for nearly all communications. End-to-end acknowledgment and retransmission is the responsibility of the connection-oriented Transmission Control Protocol (TCP) which sits on top of IP. The functional split between IP and TCP exemplifies the proper application of the end-to-end principle to transport protocol design.\nIP几乎用于所有通信。端到端的确认和重传是IP之上的面向连接的传输控制协议（TCP）的职责。IP和TCP之间的功能划分体现了端到端原理在传输协议设计中的正确应用。\nLIMIT The most important limitation of the end-to-end principle is that its basic premise, placing functions in the application endpoints rather than in the intermediary nodes, is not trivial to implement.\nAn example of the limitations of the end-to-end principle exists in mobile devices, for instance with mobile IPv6. Pushing service-specific complexity to the endpoints can cause issues with mobile devices if the device has unreliable access to network channels.\nFurther problems can be seen with a decrease in network transparency from the addition of network address translation (NAT), which IPv4 relies on to combat address exhaustion. With the introduction of IPv6, users once again have unique identifiers, allowing for true end-to-end connectivity. Unique identifiers may be based on a physical address, or can be generated randomly by the host.\n 将功能置于应用程序端点而不是中间节点中的基本前提是不容易实现的。 存在于移动设备（例如，移动IPv6）中。如果设备对网络通道的访问不可靠，则将特定于服务的复杂性推向端点可能会导致移动设备出现问题。 通过添加网络地址转换（NAT）可以看到网络透明度降低带来的其他问题，而IPv4依赖于它来对抗地址耗尽。随着IPv6的推出，用户再次拥有唯一的标识符，从而实现了真正的端到端连接。唯一标识符可以基于物理地址，也可以由主机随机生成。  REFERENCES  End-to-end_principle ","description":"","title":"End to End 端对端","uri":"/blog/posts/2021-01-17-end-to-end/"},{"categories":null,"content":"A Internet spec called RFC 1918 (Request For Comments) reserved a few blocks of addressnss for \"private\" network. 192.168/16 was one of those blocks.\nLONGLY Origin text is following:\n The Internet Assigned Numbers Authority (IANA) has reserved the following three blocks of the IP address space for private internets:\n 10.0.0.0 - 10.255.255.255 (10/8 prefix) 172.16.0.0 - 172.31.255.255 (172.16/12 prefix) 192.168.0.0 - 192.168.255.255 (192.168/16 prefix)    256*256*256*256 = 4294967296  Old time dont warry about NAT(Network Address Translation) port forwarding/mapping or ALGs or DMZs or trigger ports or hairpinning. To handle the problem runing out of addresses too quickly, IANA ( Internet Assigned Numbers Authority ) made ISPs to get address. By the time home boardband and network really start.\nHOW WORKS\n So if you wanted to get more than one machine in your household onto the Internet, you had to run a NAT gateway that fakes like all the machines on your home network are actually sharing the same single public IP address. But all those other machines on your home network needed their own private IP addresses to use to talk to the NAT gateway.\n LINK  IETF End To End  REFERENCE  Why are home networks prefixed with 192.168? - Stackoverflow ","description":"","title":"Why home address is prefixed with 192.168?","uri":"/blog/posts/2021-01-17-whats-192-168/"},{"categories":null,"content":"BLOGS Mainly contained things I thought its valuable, which brings a strong personal bias. You could use Tag/Site:dfslfh.cn xxx for searching more related info about Theory / ACGN / Technology, because this blog builded by Hugo \u0026 MemE \u0026 Lunr couldn't support zh-cn full-text search.\nNAME It's fun. When studied in high school, I always thought my life is dooming to drift, just feel like, ..., like a ... dandelion? Dandelion! Althought I just wanna play a sofa-potato role as a common human (not a loser) . Somtimes I thought **\"Must Go Outside Of Comfort Zone To Know More The World, And Don't Care What You Have. You Could Do Better At The Same Time. \"**just that mind reminded me to fight again and again when I raised my head to look up the sky during failed.\nNever Settle! Fighting! (But Don't 996/007.)\nME I love creating things, not yet only coding.\n Blog Index. *nix noted my ubuntu config. Codelib noted my wiki about every thing.  FRIEND LINKS  Hope to exchange Friend links with you! : )\n  Gun 996.ICU 955List  Drop Me A Line By lfh010618 at gamil If U Have Any Questions! ","description":"","subtitle":"Hello DandelionFs!","title":"Hello World!","uri":"/blog/about/"},{"categories":null,"content":" 外面的世界并不太平, 贴吧不断的炸链, 帖子连续的不存在, 404接踵而至, 像是2020年留下的无数孩子, 用户一个接一个地被屏蔽, 我来到自己的自留地留下属于自己的声音, \"感觉自己好没用啊!!!\"在脑海里不断反转, 但我能做的, 只有这些......\n 开始写Gal是我自己的私心, 因为这件事并不能为我自己带来多少附加值/增值, 但当自己喜欢的Gal被网络一次一次封杀的时候, 就如猛浪般地在我本就不鲜活的记忆上来回冲刷, 整个过程像是在封杀我的过去, 我下意识地认为必须写下点什么, 必须把我知道的都记录下来.\n直到完稿后起标题的时还在犹豫这方面的知识是隶属于哪一部分, 是AVG? RPG? 还是纯Gal?\n在我早期的记忆里是 文字AVG , 因为往往游戏属性在简介里都有写, 但是考虑到弹丸论破等一些无色情内容优秀的AVG, 我决定题目高雅一些, 就用 Interactive Fiction, 感觉老洋气了, 但还是觉得虚伪, 最后还是更名色情游戏.[1]\n可能大部分关于这方面的讨论我们都把注意力聚焦在R18部分的内容, 当然一开始我接触Gal的目的就是可以低成本的让身体产生多巴胺, 催产素, 达到催眠麻醉自己的作用, 即使现在的自己已不再需要这些过渡时期的作品带来的副作用, 但我同样不允许这样的事物从我记忆中消失. 这样不好.\nCHANNEL 渠道  DLsite  FORUM 论坛   Bangumi \n  2DFun\n  K.F. 绯月\n  琉璃神社\n  忧郁的弟弟\n  快乐屋\n  萌站-ACGN \n  天使二次元\n  澄空学院\n  次元の物语\n  御宅同萌\n  E-Hentai Galleries\n  TRANSLATIONAL GROUPS 汉化组 有一段时间总是看到为汉化组打报不平的帖子, 评论区里吃瓜观众隔岸观火, 看两位作者左右撕扯, 好不痛快, 最后观众哗然而消散, 只剩一片死寂. 我对那些混乱的, 复杂的, 难堪的争论感到疲惫, 我不喜欢这样过分问候彼此家属的方式, 我想咒骂那些肮脏的, 从不回报的, 永远在伸手讨饭还出手打人的流氓, 我发誓不做这样的人. 我选择铭记:\n  3月24日弥生月汉化组举报事件始末 我们究竟还要迫害为我们默默奉献的人多久\n  如何评价b站up主终焉无脑韛-单推水巴到柚子社官推举报某汉化组，导致汉化组终止原有计划并提前解散?\n  ......\n  为了不再忘记, 我穷举一下我知道的为数不多的汉化组. 不知道会不会引来危险, 暂复议.\n 极影字幕组 澄空字幕组 动漫国字字幕组 默示汉化组 ACG汉化组 萌你妹汉化组 弥生月汉化组 独占汉化组 巴比伦汉化组 杏爱会  PLAYED GAME 玩过 大多数情况下都是奔着R18去的... 但还是希望在其中收获一些意外的东西, 下面是我玩过的一些GAL 以及本分 AVG :\n  《 G弦上的魔王 》 豆 Bang 2D\n 个人只喜欢水羽, 只认认真真通了一遍水羽线, 其他也只是匆匆过去了. 因为是初中玩的, 具体是什么情节已经忘记得差不多了, 当时也只是奔着CG去的. 总体还不错.\n   《 美少女万华镜5 (天)道与轮回的少女 》 豆 Bang 2D\n 这次不仅下面哭了, 上面也哭了.\n   《 兰斯 》\n 我太喜欢兰斯的世界观了, 虽然作品完结了, 但是还是有一番韵味.\n   《 DARK BLUE 》 豆 Bang 2D\n 本来是去救妹妹的, 结果妹必挂\n   《 与奴隶的生活 -Teaching Feeling- 奴隷との生活 -Teaching Feeling 》 豆 Bang 2D\n 大多数时候还是希望女儿过得好\n   《 euphoria 》 豆 Bang 2D\n 最后也没有玩懂, 在指头缝中推完了本作.\n   《 恋爱活动/恋活 》\n 我还记得我推的第一个女孩是有点男孩子气的, 一身长发的女孩, 我忘记电脑给她的随机姓名, 但是在玩的时候有那么几个小时我是真的很幸福.\n   《 PlayClub プレイクラブ 》\n 我记得网上总是有一个人在倒卖这一部作品的合集, 最后被人分享在百度知道里, 我十分感谢哪位老哥, 再也没有比那个Mod更全的版本, 我也再也没有找回来.\n   《 3D定制女仆2 》\n 家里电脑带不动, 我只是匆匆的把32G的游戏删掉罢了...\n   《 AI少女 》\n 这次是换我的电脑带不动了(CPU), 我还是匆匆的删掉了.\n   《 人工学院 》/ 《 同校生》/《 尾行 》/《 御宅伴侣 》/《 性感沙滩 》/《 セクロスフィア/Secrosphere 》\n 匆匆......比较无趣 [提裤ing]\n   LOOK FORWARD 看好  《 Donna Dona让我们一起做坏事 》 豆 Bang 2D  REFERENCE  知乎 - 文字AVG游戏与galgame有什么区别？ ","description":"","title":"Galgame/エロゲー","uri":"/blog/posts/2021-01-14-galgame-sex-game/"},{"categories":null,"content":"像大多数人一样, 我也要象征性地写一份年终报告, 我正从下午的美梦的挣扎起来, 揉搓着疲惫的眼睛, 拿着几条咖啡, 我不知道这样子挥霍午觉的日子还有多少, 至少在上半年的时间里我是不怎么睡午觉的, 靠着大量的咖啡因和可乐度过了在家的漫长的假期. 最后的后果就是牙裂了, 幸好没有伤害到牙神经, 还发现自己的牙齿蛀掉5颗, 哭死啦!!! 以后一定一定一定要定期去看牙齿, 这是一个必须养成的好习惯.\n高考已过去两年, 自己身边的人来来去去, 有的悬崖百丈, 有的已是生再难逢, 我感叹时光飞逝, 也感叹自己画地为牢, 为买不起门票而懊恼不已, 不过应该这所有的一切, 都是合理的吧, 我想在总结完这边文章后重新开始一些东西, 即使什么都改变不了, 但是好的态度是成功的一半, 对吧? 那些真真切切的东西, 热泪的东西, 永远都是真的, 等我攒够六便士, 我就去寻找我的月亮.\n最近那份物质充裕带来的无力感常常袭来, 那种人人都有机会翻身, 实现财富自由, 跨越阶级, 成为世俗口中所谓的\"成功的人\"的梦想? 但是有的时候我傻傻分不清楚这究竟是商业时代赋予我们的泡沫, 还是真的像新华字典中描述的那样:\n 张华考上了北京大学，李萍进了中等技术学校，我在百货公司当售货员：我们都有光明的前途。\n 因而时常产生如万青-万能青年旅店 同名专辑中描述的那样子:\n ......有时候像拳头打进了棉花，那种落空和被瞬间软化的悲哀，简直让人恨不得放弃所有的努力。......\n 这也许是因为我们的存在总是先于本质, 而本质的本质并不一定就是虚无, 当我们怀疑生活, 陷入虚无的时候, 难道虚无本身不值得怀疑吗? 虚无就一定是生命的本质吗? 彻底的怀疑主义是绝对不可取的, 我们总是钻在牛角尖里不肯出来, 所以我时常安慰自己面对虚无的一个态度就是找到不虚无的那面, 追寻它.\n不管怎样, 现在的自己还不太敢松懈下来.\n我的收获   New Flags: 独处的时间里我喜欢上网冲浪, 递归无限互联网, 了解到很多程序员圈的Dalao, 那种身形巨宽, 连跨好几个领域的大佬, 这部分人的普遍具有网络时代的先发优势, 互聊网经验十年以上, 熟练学习各种灵性的技术. 我理应向他们看齐.\n 新的一年, 购买的游戏不可以超过2个. 国家级：全国计算机等级考试（NCRE)和中国计算机技术职业资格网(软考)高级。 行业级：微软认证考试、Adobe认证考试、Oracle认证（OCA证书、OCP证书、OCM证书）、JAVA认证、Cisco认证等+华为认证+计算机技术与软件专业资格考试证书+思科认证+微软认证 协会级：PMP考试。 学校级：PAT考试(ACM/pat顶级(大一大二可以考乙级和甲级练练手，大三考完顶级，名次越高面试越稳)/蓝桥/ccf+开源) Github Coursera镜像网站：https://www.mooc.cn    Info Channels: 得益于Daolao的指引, 基本了解了Github, V2ex, Stackoverflow 等等一些优质网站的流程, 可以更好的参与进去, 操作起来也变得轻车熟路, 争取拖离中文圈子, 为了学习英语, 特意去看TED, 去尝试RSS/Newsletter, Weibo, 脱离Tencent QQ \u0026\u0026 Wechat \u0026\u0026 Zhihu \u0026\u0026 Bilibili.尝试过 Backup \u0026 Markdown Copy \u0026 Print PDF, 可惜都不如自己总结的快, 最后还是用Telegram总结零星的知识\n 订阅公众号加微信群提升技术能力，我已不需要看一手技术资料；看公众号和知乎“怎么看…”培养了我正确的三观，我不需要接受高等教育，更不需去看看世界，不必感受不同的文化；通过996实现人生价值，通过股市/彩票/p2p/币圈获得财富，不必非要去提升自己和创造价值……简化问题，越简单，越幸福……\n   More Open: 因为远离了学校集中式的文学的熏陶, 我感觉就我个人空余时间给文字的时间更多了, 说/写起话来也比以前更加的有条理了, 逐渐的, 我开始可以分得请拙劣的文字, 我有了更多的触手去触控的体会不到, 理解不了的事物!尽管大部分时候总是Fucking Bull Shit, 我发现自己可以更好的共情他人, 以期达到心流的状态.\n  Valu About Sb: 人在社会上的价值总是以带给别人的价值为衡量体系的, 如同:\n 子张曰：「执德不弘，信道不笃，焉能为有？焉能为亡？」\n 也像老乡李诞在\u003c\u003c十三邀\u003e\u003e里说的那样, \"人就是为了别人而活的, 你充分的自洽, 你活在自己的精神世界里，你就死了\"\n  Individual Myself: 不再迷信平台多权威.\n 你以為你 Follow 幾個技術名人，一直看他們發的訊息，你的技術就會進步？不！不會的，因為你沒有靜下心好好讀書。\n   Knowledge Business\n 我发现写一个或者维护一个开源项目，或者是在商城发布一个项目，确实对理解这个复杂的世界有帮助。曾经第一次读到 ss 作者离开时这段话时非常受益，还在想为什么这么年轻就如此通透，现在慢慢理解了一些原因。几年过去了，环境更差了。\n\" 很多人要么一窝蜂的支持，要么一窝蜂的反对，还要把它给封禁掉，大概这种心理鲁迅先生也曾批判过。我还记得当年极路由在V2EX技冤枉的时候，也是一边倒的说极路由窃取隐私。如果你们真的那么讨厌商业，那你们应该首先把你们的苹果设备给摔了，因为它就是商业社会厳峰造极的产物，我反对不喜欢一个东西就要拿出简单粗暴的制裁手段，正是这种习性成就了GFW.\n维护这个项目到现在大概总共回复过几千个问题，开始慢慢想清楚了一件事，为什会存在GFW.从这些提问可以看出，大部分人的自理能力都很卷，只是等着别人帮他。特别是那些从App Store下我了App用着公共服务器的人，经常发来一封只有四个字的邮件： “不能用了？”我觉得这是一个社会常识，花一分钟写的问题，不能期待一个毫无交情的陌生人花一个小时耐心地问你版本和操作步骤，模拟出你环境来帮你外析解决. Windous版加上 GFWList功能以来，我反复呼吁给GFWList提交规则，但是一个月过去了竟然一个提交都没有。如果没有人做一点什，它自己是不会更新的啊，没有人会义务地帮你打理这些。最近net—speeder又开始流行，害人害己。我觉得，政府无限的权力，都是大部分人自己放弃的。假贷抗爹，让政府审核。孩子臂不好，让政府关网吧。有人在微博骂我，让政府去剧。房价太高，让政府去限购。我们的文化实在太独特，创造出了家长式威权政府，GFW正是在这种背景下产生的，一个社会矛盾的终极调和器，最终生活不能自理为你每天做的每一件事情都要给政府审查一道，以免伤害到其他同样生活不能自理的人。这是一个零和游戏，越和这样的用户打交道，越对未来持悲观态度，觉得GFW可能永远也不会消失，而墙内的这个局城网看起来似乎生机勃勃地自成一体，真是让人绝望。\"\n   Seciety: 在和人交流这块, 我有的时候可以 锻炼/记忆 有趣的段子, 关键时刻可以暖场亦或是其他. 所以我常常这样感觉:\n 我清晰地感觉到别人想从我这里发现什么以和我交流, 但我太过于Normal, 最后让他人默默放弃.\n   **Schedule In Mind: ** 分析主次这件事情上, 我还可以更加明确的划分.\n  Done It Myself: 在着手去做这件事情上, 我有更大的提高空间\n You don’t sharpen your skills with resources, books, or articles. You sharpen your skills with practice. If you want get better, go do the thing. Jason Fried@jasonfried\n   Treat Myself:\n 如果所有的挫折，所有的不幸，所有的抑郁，所有的焦虑最终让你变成一个更好的人，那么也许也算是值得的。但是如果这一切，让你沉浸于此，忘记了你本来想做的事情，想完成的事情，想成为的人，那么就非常不幸了。所以，我们总需要在长途跋涉中，抬头看路，看看自己是不是还是那个自己想做的自己\n其实我感觉大专人各种意义上都挺好的… 说话诙谐幽默，又不会乱开玩笑。没有什么唳气，也没有任何架子，人际关系和谐。上班时从来不主动去找事做，做完了安排的事情就开始坐下聊天打游戏。主管就让然后没什么事大家就提前下班，懂得享受生活。热情，体贴他人。 我现在有点觉得大专人才像一个正常的人。\n   How To Remember History:\n 三年前北京一场大火，我也亲历六环之外的清退，成为政府公文中的“低端人口”。今年来了上海，看到蛋壳爆雷租客流落街头的照片，还是觉得非常心酸。昨天刷到一篇豆瓣日记，读着读着就不存在了。好像一到冬天，404也多了起来，求救声和哭喊声一起湮没，人们在404中被北京无声无息地折叠。\n   Do More \u0026 Hard:\n 但我在CS方面真的什么都没学好, 现在只会面向Google编程. 我觉得我现在要是真拿了谁的offer甚至不能独立完成工作, 所以我现在不太敢投简历, 也不想去找任何人要内推.我也明白这种心态容易自闭,也许我应该赶紧做点开源贡献 一个朋友大三翘课出去实习，期末才回来考试，千方百计只求及格，当时觉得他疯了。毕业找工作的时候看他手拿好几个offer，才发现我是傻逼。\n   Stereotypes:\n 不對吧，什麼時候「懂得尊重女性」變成一種優點了？尊重他人本來就是做人的基本啊，光是做個人就能成為好男人也太容易了吧。\n當你聽到有人說「真正的好男人應該懂得尊重女性。」時，請先在心裡想一想「真正的美食應該是可以吃的食物。」這句話有多廢。\n   我的缘分 这一年是自己和回忆斗争的一年, 我不知道如何面对过去, 如何面对自己内心蠢蠢欲动的情感, 身边的朋友陆续脱单, 我甚至开始觉得自己是异类, 我既希望于游戏, 歌曲, 我冀希望于肉欲, 但是这些并不是我想要的, 我想要的, 只是平淡上课前的一句问好, 放学后的一句再见.\n\"可以回头看, 但不能往回走\" 对的吧, 我知道回不去了, 那段所谓的\"监狱式的爱情\", 不由自主的萌发, 那就不由自主的放在心里吧, 就算我攒够六便士, 月亮已盈亏数次, 还会是原来的模样吗?\n但是, 我忠实地祝福你, 祝福我喜欢过的每一个人, 我亏欠的朋友和一些断了联系的老友. 我想念你们, 祝你们幸福与健康.\n我的游戏/娱乐 我一共通关了部游戏\n PC:  Detroit: Become Human   Finding Paradise  A Bird Story Helltaker   Android Phone:  WitchSpring2: 特定时代下的人民总是拘泥于政治体制, 正如一双看不见的手改变着我们的思想和行为动向. WitchSpring3 WitchSpring4 Gris Pascal's Wager Minecraft ReverEstory Muse Dash    我的读书 今年上半天才 Kindle 上这面支持了好几本书.\n 《当鸟飞向它的山》 《请签收，您的星星》 《明朝那些事儿》 《网易云的故事》 《时光倒流的女孩》 《小王子》 《美丽新世界》 《尼尔波兹曼系列》 《西顿小说全集》  也感谢以下网站给予我新的视角:\n 中国哲学书电子化计划  我的刷剧清单   Animate 动漫\n 南方公园 RR 马男波杰克 瑞克和莫蒂 外星也难民 咒术回战 ID:INVADED 异度入侵 寒蝉鸣泣之时 无能力者娜娜 隐瞒之事 龙与魔女 异种族风俗娘评鉴指南 转生成为了只有乙女游戏破灭Flag的邪恶大小姐 辉夜大小姐想让我告白？～天才们的恋爱头脑战～ 我们真的学不来 魔王学院的不适任者～史上最强的魔王始祖，转生就读子孙们的学校～ 在魔王城说晚安 无能的奈奈 潮与虎 Ｄｒ．ＳＴＯＮＥ 石纪元 我立于百万生命之上 星掠者 七龙珠 滑头鬼之孙 凡人修仙传 我不是教主 众神眷顾的男人 斗罗大陆 斗破苍穹    Films 电影:\n 芝加哥七人案 饮食男女 Hello World 钢琴师 养家之人 超脱 花木兰    剧集:\n 怪奇物语 为了N    纪录片:\n 关于性 监视资本主义 我爱你, 杀马特 梁老师的爱情课 Vox系列 上升：我们一起飞上3万米高空    我要感谢的人/平台  B站 - 罗翔 B站 - 周扒片 B站 - 我是张英坤 B站 - 熊浩bearhow B站 - 独立菌儿 V2ex Tweet Weibo Telegram One Zhihu Coolapk 小黑盒  REFERENCE 参考资料  现在计算机类的认证证书都有哪些 计算机专业要考哪些证书-知乎 计算机专业，软件工程你们都考什么证-知乎 计算机专业的要考什么证，求大佬指点?  计算机专业要考哪些证书？ ","description":"","title":"我的404*5","uri":"/blog/posts/2021-01-01-my404-5/"},{"categories":null,"content":"主要内核有两种:\n Window NT : 内核自身闭源，所以普通的扩展方法就是写驱动，驱动加载进去基本也就什么都能做了。 LINUX  对于哪种内核更加安全, 有人这样说:\n 就计算机安全来说，离不开谈论的环境，即所谓要确立\"可信计算域\"的概念和范围.\n内核内就是“可信计算域”，这里面能做出危害整个系统的事情。\n要确立“可信计算域”，安全是对用户来说的，无论吹得多么天花乱坠，伤害了最终用户，再先进的技术也是不安全的。[1]\n WINDOW NT  LINUX  The Linux Kernel Archives: Linux内核源码，这个就足够了，仅限于C。  那么多国家“国产操作系统”为什么都要用linux内核？  因为做驱动实在是太麻烦了。没做过操作系统的developer都认为开发操作系统最复杂的是内核，这话说的也没错，但也不能说完全对，开发操作系统最麻烦的地方在于驱动。一个经典的操作系统内核，刨除驱动，可能就几百KB到几MB之间，不会太大。这就是说，如果有一个团队，技术足够NB的话，设计一个差不多的（注意：我说的是差不多的，可不是说完美的）内核不需要消耗太长时间（不会超过3-5年吧，快的话1-2年也是有一定可能的）。但是驱动真是个大麻烦，翻翻Linux内核源码，真正的内核调度器、内存管理的代码没多少，大量的代码都是驱动，因为要兼容各种各样的硬件。同样的，Windows的内核文件是NTOSKRNL.EXE，也是几MB大小，但再看看system32\\drivers\\下面有多少驱动？开发驱动和开发内核不同，开发驱动需要硬件厂商给资料，并非所有厂商都愿意合作，所以后果就是一个OS用的越广泛，厂商越是愿意协助开发对应的驱动，一个OS用的越少，厂商越不愿意给资料。目前比较成熟的内核里，驱动比较多的就只有Linux，所以Linux的驱动也越来越多，而如果要另起炉灶，写内核容易，写驱动难啊。而一个操作系统想用起来，没有硬件支持是不行的，所以最终各个国家/企业凡是要“自主研发”操作系统的时候，首先想到的就是Linux，原因也是因为实在没有办法去写那么多驱动。写内核，在x86平台上，感谢intel公开了这么多的资料，一个计算机专业毕业的稍微NB一点的学生给一年的时间都能写出来一个能用的内核（仅限于能用，好不好另说），而且资料特别多。写驱动，举个例子：XHCI的驱动，不给资料，别说1年了，十年都写不出来，甚至可能XHCI是什么都不知道（注：这是USB3.0控制器）当然了，要是有足够多的钱，能不能把驱动和内核都重写了？能，肯定能，但那肯定是要很多人和很多钱。微软有那么多的工程师，大部分都是写驱动的，并且还有大量代码能重用的情况下，也是隔1-2年才出一个版本，如果从Windows1.0开始算，都快有30年了，这么多年才做出这么多驱动（并且还有一些不是他们自己做的），可见开发驱动得投入多少人。\n发布于 2014-03-14\n 为什么操作系统必须要有内核?  操作系统内核的作用是实现对软件、硬件资源的管理。\n确实，操作系统可以不要内核，后果就是你玩游戏的时候就不能开迅雷了。内核的一个作用就是实现任务调度，让计算机的资源都被均衡的调度。\n没有操作系统内核，那么所有任务（程序）都是完全独占计算机的，你玩完游戏退出想用WORD？对不起，请重启计算机先。\n没有操作系统内核，内存的动态管理也将不存在，后果就是可能没有虚拟内存，那就是说，如果某游戏需要运行内存是2G，那么如果不巧的是自己的电脑只有1G内存，则完全玩不起来（有操作系统的情况下，用虚拟内存是可以的）\n没有操作系统内核，设备管理的功能就不存在了，比如动态的设备插拔等等，并且计算机启动的时间可能会非常漫长，因为需要检测并加载各种驱动。\n没有操作系统内核，多线程的操作甚至都不能支持，因为信号量、消息队列这些也都是操作系统提供的，所以现在的程序都需要彻底重新修改才能适应没有内核的情况。\n没有操作系统内核，多核的CPU也可能没有用了。\n能想到的就这么多，所以，要有操作系统内核。\n-------------------补充-------------------\n评论里有人提到，早期的时候（DOS时代）有些游戏就是直接从软盘启动的。这是因为那时候操作系统很小，功能弱，系统资源有紧缺，所以没有内核也可以，但现在硬件资源很丰富，操作系统很庞大，没有内核统一管理的话，要么太浪费、要么软件自己的负担会很重\n REFERENCE 参考资料 [1]. Windows NT 内核与 Linux 内核相比哪个更安全？\n","description":"","title":"Kernel","uri":"/blog/posts/2020-12-05-kernel/"},{"categories":null,"content":"专门研究多个独立个体之间的竞争行为（对抗行为）。在某些中文书籍里面，它又被称作“对策论 or 赛局理论”。\nTHX FOR:\n 博弈论入门教程——从基本概念到具体案例  历史 HISTORY  约翰·冯·诺伊曼（John von Neumann）  《博弈论与经济行为》（“Theory of Games and Economic Behavior”） 路德维希·冯·米塞斯是摩根斯坦的博士生导师    类型   合作博弈（cooperative game） VS 非合作博弈（non-cooperative game）\n 区别在 某种外部约束力与博弈过程的其它参与者。    同时博弈（simultaneous game） VS 顺序博弈（sequential game）\n 是否已知其它参与者的行为信息 棋牌类游戏都属于这种    零和博弈（zero-sum game） VS 非零和博弈, 变和博弈（non-zero-sum game）\n 区别在参与各方的利益总和为常量还是变量 变和博弈存在可以使得参与各方利益最大的可能, 所以产生了合作.    非重复博弈, 单次博弈（non-repeated game） VS 重复博弈, 多次博弈（repeated game）\n 博弈的次数    收益矩阵( normal-form) VS 决策树(extensive-form)  描述博弈过程  收益矩阵特指“静态博弈”（同时博弈）, 类似离散数学的关系矩阵.1 表示赢；-1 表示输；0 表示平局。 决策树（decision tree） 两者均可.    策略 ＆ 策略集合   决策选项（move） VS 策略（strategy）\n 策略（strategy）是决策选项（move）的总和.    策略集合（strategy set）: 所有可能的策略\n  纯策略（pure strategy） VS 混合策略（mixed strategy）VS 完全混合策略（totally mixed strategy）  是否总是【固定选择】“策略集合”中的某【一个】策略  支配策略（优势策略）   策略之间的【支配性】(优先性)(dominated by)\n  支配策略/优势策略（dominant strategy）: 某个策略能够支配【所有】其它策略\n  强支配策略（strictly dominant strategy） VS 弱支配策略（weakly dominant strategy）: 评价策略的好坏.\n  支配策略 VS 制胜策略（winning strategy）\n “制胜策略”也称“必胜策略”，它通常只用于“零和博弈” “制胜策略”肯定是“支配策略”（最起码是“弱支配策略”）；但“支配策略”不一定是“制胜策略”。    实例：（二战中）新几内亚的航路作战\n  如何发现“支配策略”？\n 逐步删除【被】支配的策略（“Iterated Elimination of Strictly Dominated Strategies”，简称 IESDS）。    罕见性: 只存在有极其简单的博弈\n  乏味性\n 为啥绝大部分棋牌类游戏都【没有】“支配策略”。    最小最大定理(Minimax)   在最坏情况下最小化损失。\n  举例：动态博弈——切蛋糕博弈\n  反向归纳法(backward induction)  决策树的展开一直推演到【最后一步】（也就是决策树的叶子节点）。此时你就可以看清双方在最后一步各自的最优选择；然后再反向回推到第一步。 **局限性: **充分的信息 重复博弈中的“囚徒困境” 海盗博弈（海盗分金问题）  纳什均衡（Nash equilibrium）   在多人的“非合作博弈”中，如果每个博弈者都无法【单方面】改善自己的境地，此时的局面称作“纳什均衡”。\n “纳什均衡”的前提是【非合作博弈】。不要望文生义，把“非合作博弈”误解为“没有合作的博弈”。请参见本文开头章节对“博弈类型”的解释。 【单方面】指的是——在其他博弈者都没有改变策略的情况下，自己改变策略。    稳定性: 如果每个博弈者都足够理性，他们都【不愿意】主动改变当前的策略。\n  实例：囚徒困境\n  对“纳什均衡”的【误解】\n 把“纳什均衡”误解为“各方利益总和最大化”。 认为“纳什均衡点”是唯一的。    局限性\n 非建设性 依赖于非常非常多的约束条件    博弈中的【信息】因素   “perfect information” VS “imperfect information”\n 是否知道已经发生的每个事件 大部分棋类游戏（围棋、象棋、跳棋...）属于前者；某些军棋游戏（只能看到己方的棋子）属于后者；大部分扑克游戏（比如：桥牌、拱猪...）属于后者。    “complete information” VS “incomplete information”\n 是否每个博弈者的特征都是公开的 【棋牌类游戏】属于“complete information”;【拍卖】则属于“incomplete information”。    贝叶斯博弈（Bayesian game）＆ 贝叶斯纳什均衡（Bayesian Nash equilibrium）\n 概率分析，从而猜测其它对手的特征。    实例分析：FQ VS GFW\n  博弈中的【心理】因素   换位思考: 通过某些复杂的博弈游戏，进行练习。\n  早期经济学的“理性人假设”\n 设定市场的行为主体全都是充分理性的    装疯策略\n 北朝鲜的金三胖    “博弈论”对其它领域的影响   对【经济学理论】的影响\n  对【金融、投资、营销】的影响\n  对【军事＆外交】的影响\n  对【生物学】的影响\n ","description":"","title":"GAME THEORY | 博弈论","uri":"/blog/posts/2020-11-29-game-theory/"},{"categories":null,"content":"版本控制系统 —— 记录每次文件的改动，协作编辑，避免管理一堆类似的文件了，也不需要把文件传来传去。\n如果想查看某次改动，只需要在软件里瞄一眼就可以，能记录每次文件的改动：\n这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。\n   版本 文件名 用户 说明 日期     1 service.doc 张三 删除了软件服务条款5 7/12 10:38   2 service.doc 张三 增加了License人数限制 7/12 18:09   3 service.doc 李四 财务部门调整了合同金额 7/13 9:51   4 service.doc 张三 延长了免费升级周期 7/14 15:17    \r\rHistory  Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。\n Linus 在 1991年 创建了开源的 Linux\n2002年前，志愿者把源代码用 diff (命令) 的方式发给Linus，后由本人手工合并。\nBitKeeper 的东家 BitMover 公司授权 Linux社区 免费使用这个版本控制系统。\n2005年 Linux社区牛人聚集 开发Samba的Andrew试图破解BitKeeper的协议，被BitMover公司发现了，收回Linux社区的免费使用权。\nLinus 花了两周时间自己用C写了一个分布式版本控制系统——Git！一个月之内，Linux系统的源码已经由Git管理了！\n2008年，GitHub上线，为开源项目免费提供 Git 存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。\n[关于 diff 的延拓]：醉卧沙场的回答 - 知乎\n\nInstall Git  Linux：  1 2 3  git # 测试一下电脑里面有没有git sudo apt-get install git # Debian 或 Ubuntu Linux sudo apt-get install git-core # 老版本Debian 或 Ubuntu Linux（避免和一个叫GIT(GNU Interactive Tools)的软件重名）    Win  安装完后配置自己的账户\n1 2 3 4 5  git config --global user.name \"Your Name\" git config --global user.email \"email@example.com\" # 检查 git config --global user.name git config --global user.email   注：\ngit config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\nRepo 仓库(Repository)，版本库，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n\r一个合适的地方，创建一个空目录：\n1 2 3  mkdir text cd text pwd   通过git init命令把这个目录变成Git可以管理的仓库：\n1  git init   可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了(用ls -ah命令就可以看见)。也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。\n补：Git配置同时推送到GitHub和码云\n1 2  git remote add origin + Url # 本地初始化需要先添加默认的远程仓库 git remote set-url --add origin + Url # 配置需要同时推送到的其他仓库添加码云   \nAdd Sth into Repo 版本控制系统可以告诉你每次的改动，而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。\n\r 使用Windows的童鞋要特别注意：\n千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：\n 编写一个readme.txt文件，然后开始试验：\n1 2 3 4 5 6 7  git add readme.txt git commit -m \"wrote a readme file\"# -m后面输入的是本次提交的说明 git add file1.txt git add file2.txt file3.txt git commit -m \"add 3 files.\" # `commit`可以一次提交很多文件，所以你可以多次`add`不同的文件 git status# 时刻掌握仓库当前的状态 git diff readme.txt #如果你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的; 顾名思义就是查看difference，显示的格式正是Unix通用的diff格式   \n版本回退 Git每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。 版本控制系统帮助我们记得一个几千行的文件每次都改了什么内容。在Git中，我们用git log命令查看：\n1  git log # (--pretty=oneline) 显示从最近到最远的提交日志;如果嫌输出信息太多，看得眼花缭乱的，可以试试加上   需要友情提示的是 一大串类似1094adb...的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字（哈希值），用十六进制表示，具有一致性。\n因为Git是分布式的版本控制系统，我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。每提交一个新版本，实际上Git就会把它们自动串成一条时间线。\n好了，现在我们准备把readme.txt回退到上一个版本，最早的的那个版本.\n Git必须知道现在是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。现在，我们要把当前版本append GPL回退到上一个版本add distributed，就可以使用git reset命令：  1 2  git reset --hard HEAD^ cat readme.txt    [Tip1] : 其实如果你把窗口关掉，想再回去已经回不去了。反之，找到他的哈希值，或者从记忆里找，至少包含前四个值，Git会自动去找。值得注意的是，版本号是自上而下的，就是新的改动先显示 [Tip2]: Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL：然后顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在哪。  1 2  git reset --hard 1094a cat readme.txt   正对于[Tip1]，怎么办？\n1 2  git reflog # 记录你的每一次命令；从输出可知append GPL的commit id是1094adb，现在，你又可以乘坐时光机回到未来了。   \n工作区 \u0026 暂存区 Git和其他版本控制系统（如SVN）的一个不同之处就是有暂存区的概念。\n 工作区（Working Directory）: 就是你在电脑里能看到的目录，比如text文件夹就是一个工作区： 版本库（Repository）: 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。版本库里存了很多东西，其中最重要的就是称为**stage（或者叫index）**的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。  前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n 是用git add把文件添加进去，实际上就是把文件修改添加到暂存区； 是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。  因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。\n\r管理修改 Git跟踪并管理的是修改，而非文件。为什么说Git管理的是修改，而不是文件呢？\n做实验：\n1 2 3 4 5 6  cat readme.txt# 对readme.txt做一个修改，比如加一行内容 git add readme.txt git status cat readme.txt git commit -m \"git tracks changes\" git status   发现第二次的修改没有被提交？原因就是Git add就是追踪每一次的修改，第二次没有追踪，自然提交没有。提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：\n1  git diff HEAD -- readme.txt   \n撤销修改 在暂存区 自然，你是不会犯错的。不过现在是凌晨两点，你正在赶一份工作报告，你在readme.txt中添加了一行：\n1 2 3 4  cat readme.txt git status git checkout -- readme.txt # readme.txt文件在工作区的修改全部撤销，--很重要，没有--，就变成了“切换到另一个分支”的命令。   这里有两种情况：\n readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。  总之，就是让这个文件回到最近一次git commit或git add时的状态，意思就是说如果自你上次改完文件后，如果你的修改全都错误，那么git checkout适合你。\n\n不在暂存区 另外一种Scene，现在假定是凌晨3点，你不但写了一些胡话，还git add到暂存区了：\n1 2 3 4  cat readme.txt git add readme.txt #在commit之前，你发现了这个问题。用git status查看一下，修改只是添加到了暂存区，还没有提交 git status # 此时用命令git reset HEAD可以把暂存区的修改撤销掉（unstage），重新放回工作区 git reset HEAD readme.txt   注意：此前的版本回退是git reset --hard readme.txt。这时，git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。再用git status查看一下，现在暂存区是干净的，工作区有修改：\n1 2 3  git status git checkout -- readme.txt# 丢弃工作区的修改 git status   存在于版本库 最糟糕的是现在你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？\n还记得版本回退吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？一旦你提交推送到远程版本库，下个公司再见……\n这教会你在代码提交到远程库的时候千万千万多看两眼，仅仅为了活下去\r删除文件 Git中删除也是一个修改操作，我们实战一下，先添加一个新文件test.txt到Git并且提交：\n1 2 3 4  git add test.txt git commit -m \"add test.txt\" rm test.txt # 此时工作区和版本库就不一致了 git status # 这个时候，Git知道你删除了文件，因此，，`git status`命令会立刻告诉你哪些文件被删除了   现在你有两个选择：\n 确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：  1 2 3  git rm test.txt# 意思是删除资源库里面的存档，效果是个git add差不多的 rm 'test.txt'# 或者手动删除文件效果是一样 git commit -m \"remove test.txt\"# 提交这次的修改OKAY    删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本，因此你会最近一次提交后你修改的内容：  1  git checkout -- test.txt# 用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”   从来没有被添加到版本库就被删除的文件，是无法恢复的！ \r\nGit Sever SVN: 这些功能在SVN里早就有了，没看出Git有什么特别的地方。\n没错，如果只是在一个仓库里管理文件历史，Git和SVN真没啥区别。但是远程仓库就是一个点。Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？\n 最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。不过，现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，因为一台电脑上搞几个远程库完全没有意义，而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在一台电脑上怎么克隆多个仓库（???怎么做???）。实际情况往往是服务器充当中间的媒介。\n 完全可以自己搭建一台运行Git的服务器，而GitHub网站提供Git仓库托管服务的，由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要一点设置(Github 拿到你电脑的公钥)。 为什么GitHub需要SSH Key呢？\n 因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。\n 添加远程库 现在我们根据GitHub的提示，在本地的仓库下运行命令：\n1 2  git remote add origin git@github.com:youraccountname/yourreponame .git #远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的 git push -u origin master# 把本地库的所有内容推送到远程库上，由于远程库是空的，第一次推送分支时，有了 -u   Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样。从现在起，只要本地作了提交，就可以通过命令：\n1  git push origin master# 把本地`master`分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！   SSH Worning: 当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：\n1 2 3  # The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established. # RSA key fingerprint is xx.xx.xx.xx.xx. # Are you sure you want to continue connecting (yes/no)?   这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了，这个警告只会出现一次，后面的操作就不会有任何警告了：\n1  # Warning: Permanently added 'github.com' (RSA) to the list of known hosts.   如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。\n从远程库克隆 Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。使用https除了速度慢以外（大陆除外），还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。 Master Commit  分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！\n 其他版本控制系统如SVN创建和切换分支比蜗牛还慢。\n创建与合并分支 版本回退的每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。\n一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：\n每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：\n你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：\n所以Git合并分支也很快！就改改指针，工作区内容也不变！合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支： 真是太神奇了，你看得出来有些提交是通过分支完成的吗？下面开始:\n1 2 3 4  git checkout -b dev # 创建dev分支，然后切换到`dev`分支; 加上`-b`参数表示创建并切换，相当于以下两条命令: # git branch dev # git checkout dev git branch # 列出所有分支，当前分支前面会标一个*号   我们就可以在dev分支上正常提交，比如对readme.txt做个修改然后提交：\n1 2 3 4 5 6  git add readme.txt git commit -m \"branch test\" git checkout master# 切换回master分支; 之后查看原来提交分支的内容其实并没有变化 git merge dev# dev分支合并 git branch -d dev# 删除dev分支 git branch# 只剩下master分支   注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。当然，也不是每次合并都能Fast-forward, 参考后面的 。因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。\n\r冲突 一个场景：\n1 2 3 4 5 6  git switch -c feature1 # Switched to a new branch 'feature1' # 修改文件 git add readme.txt # 在feature1分支上提交： git commit -m \"AND simple\" git switch master# 切换到master分支, 修改文件： git add readme.txt git commit -m \"\u0026 simple\"   这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，冲突发生:\n1 2 3 4 5 6 7 8 9 10 11 12 13  git merge feature1 git status cat \"readme.txt\" #Git用\u003c\u003c\u003c\u003c\u003c\u003c\u003c，=======，\u003e\u003e\u003e\u003e\u003e\u003e\u003e标记出不同分支的内容；我们修改如下后保存：`Creating a new branch is quick and simple.` git add readme.txt git commit -m \"conflict fixed\" git log --graph --pretty=oneline --abbrev-commit # git log --graph`命令可以看到分支合并图 # * cf810e4 (HEAD -\u003e master) conflict fixed # |\\  # | * 14096d0 (feature1) AND simple # * | 5dc6824 \u0026 simple # |/  git branch -d feature1# 删除feature1分支：   Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n分支管理策略 Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息，如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息，这时可以用--no-ff方式的git merge.q其实加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。\n1 2 3 4 5 6 7 8 9 10 11  git switch -c dev# 创建并切换dev分支 git add readme.txt #修改后提交非分支 git commit -m \"add merge\" git switch master# 切换回master git merge --no-ff -m \"merge with no-ff\" dev# 合并要创建一个新commit，故+ -m参数 git log --graph --pretty=oneline --abbrev-commit # * e1e9c68 (HEAD -\u003e master) merge with no-ff # |\\  # | * f52c633 (dev) add merge # |/  # * cf810e4 conflict fixed   所以最后下来是这样做的：\n首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。所以，团队合作的分支看起来就像这样：\nBug分支--Stash 保存现场 在Git中分支是如此的强大，所以每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：\n并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：\n1 2 3 4 5 6 7 8 9 10 11  git stash git status # 查看工作区，就是干净的（除非有没有被Git管理的文件）确定要在哪个分支上修复bug，假定需要在 master 分支上修复，就从`master`创建临时分支： git checkout master git checkout -b issue-101 git add readme.txt git commit -m \"fix bug 101\" git switch master git merge --no-ff -m \"merged bug fix 101\" issue-101 # 完成合并，最后删除issue-101分支 git switch dev#切回去继续干活 git status git stash list   恢复有两个办法：\n git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除； git stash pop，恢复的同时把stash内容也删了：  可以多次stash，恢复的时候用git stash list查看，然后恢复指定的stash：\n1 2 3  git stash pop git stash list git stash apply stash@{0}   在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。那怎么在dev分支上修复同样的bug？\n重复操作一次，提交不就行了？\n有更简单的方法。同样的bug，要在dev上修复，我们只需要把4c805e2 fix bug 101这个提交所做的修改“复制”到dev分支。注意：我们只想复制4c805e2 fix bug 101这个提交所做的修改，并不是把整个master分支merge过来。为了方便操作，Git专供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支：\n1 2  git branch git cherry-pick 4c805e2   Git自动给dev分支做了一次提交，注意这次提交的commit是1d4b803，它并不同于master的4c805e2，因为这两个commit只是改动相同，但确实是两个不同的commit。用git cherry-pick，我们就不需要在dev分支上手动再把修bug的过程重复一遍。\n既然可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在master分支上“重放”行不行？\n当然可以，不过你仍然需要git stash命令保存现场，才能从dev分支切换到master分支。即在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick 命令，把bug提交的修改“复制”到当前分支，避免重复劳动。\n\rDelete分支 添加一个新功能时，你会每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。但是突然接到上级命令，因经费不足，新功能必须取消！\n1 2 3 4 5 6 7  git switch -c feature-vulcan git add vulcan.py git status git commit -m \"add feature vulcan\" git switch dev git branch -d feature-vulcan# Error git branch -D feature-vulcan# 强行删除   \n多人协作 当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。要查看远程库的信息，用git remote：\n1 2  git remote (-v)# 显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址  git push origin XXX   \nRebase -\u003e 变基 拉去远程的仓库和自己的仓库后准备提交, 有冲突的可以用前面的命令存一下.\n1 2  git log --graph --pretty=oneline --abbrev-commit # 查看历史 git rebase # 看上去更直观, 缺点是本地的分叉提交的哈希值已经被修改过了(?)   \n标签管理 发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。其实它就是指向某个commit的指针. 创建和删除标签都是瞬间完成的。\n创建标签 命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n1 2 3 4  git tag v1.0.0 1094adb git tag -a v0.1 -m \"version 0.1 released\" # 可以指定标签信息，``-a`指定标签名，`-m`指定说明文字; git tag# 查看所有标签 git show v0.9 #查看标签的详细信息   \n操作标签 创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。如果要推送某个标签到远程，使用命令git push origin ：\n1 2 3 4 5  git tag -d v0.1 git push origin v1.0 git push origin --tags git tag -d v0.9 #删除远程标签 git push origin :refs/tags/v0.9   \n提升Git Clone 速度的Git命令 明明Git提交分支的时候速度可以上2Mib/s，但是Clone的时候就奇慢无比……佛了\n梯子 用SSh无用，对比如下，可能是我的SS不太好用……\n用Git代理默认SS的1080端口，花个好价钱买个好机子……\n1 2  git config --global http.https://github.com.proxy socks5://127.0.0.1:1080 # 只对 github.com git config --global --unset http.https://github.com.proxy # 取消代理   码云 无脑关联Github，然后导入自己的仓库，从Github下面直接Clone ，缺点就是暂时不确定Pull到Github是否正确提交……\n速度你根本无法想象，工具人码云了解一下\n\r后记  在Clone一个300+M的项目的时候，出现了git clone: error: RPC failed;The remote end hung up unexpectedlyfatal: The remote end hung up unexpectedly Everything up-to-dat的错误，好像是因为curl的postBuffer 默认值较小的原因,配置下个这个值,就不会出现该错误了.   git config http.postBuffer 524288000=\r 50G左右，应该没有问题了，我不信代码给我写了一个云盘…… 然后再次Clone就没有这个问题了……   其实感觉有的时候中国的教材不是给下面的人看的，而是给同僚和自己看的，我会嫌弃写的过于详细而浪费时间，但是当我在拜读那些大佬的作品的时候常常因为他们的“此处省略”而抓耳挠腮……  git remote：列出remote 别名。 git remote rm [别名]: 删除一个存在的remote alias。 git remote set-url [别名] [url]:更新远程repo的url。 git branch：列出本地所有分支,当前分支会被星号标示出。 git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的)。 git config -l：查看git config的信息 git push -f：强推（慎用），即利用强覆盖方式用你本地的代码替代git仓库内的内容    Reference [1]. 廖雪峰的官方网站的Git教程 : 教程事无巨细且读来有趣不乏味，推荐原文阅读。\n[2]. Git-Book:Git的官方文档，可以随时查看。如果需要官方书籍请点击这里.\n[3]. 要方便管理公钥，用Gitosis；要像SVN那样变态地控制权限，用Gitolite。 搭建Git服务器参考这个\n[4]. 知乎-git clone一个github上的仓库，太慢，经常连接失败，但是github官网流畅访问，为什么？.\n[5]. V2ex- github 克隆速度慢无止境，最近被此问题困扰浪费太多时间.\n[6]. 修改Host\n[7]. Git 筆記 - 作者(Auhtor)與提交者(Commmitter)差異實驗\n","description":"","title":"Git","uri":"/blog/posts/2020-11-16-git/"},{"categories":null,"content":"其实在现在的我来看, 生产环境配置都很简单, 只需要两个步骤 :\n 安装环境依赖, 往往在 官网/README 都有 Developer 已经数次打包好新特性的包放在对应的位置.  linux 比较 win 稍微复杂, 但是 README 里面应该都有现成的. 最简单的情况就是 下载安装直接用就可以, 什么环境变量都给你配置好   设置变量环境, 有 系统变量 和 用户变量 两种.  系统首先去用户本地变量的 bin 里搜索所有文件, 如果没有找到, 那么就去 系统变量 里再找. linux 添加变量则需要到对应中断的 rc 的配置文件里, 添加export PATH=$PATH:XXX , 如果在 \\ 就是系统变量, home 则是用户变量. 然后source ~/.zshrc 刷新即可.     **Win ** 较于Linux, 有以下特点  不区分大小写 系统变量对所有用户有效, 优先级高于用户变量 系统在执行用户命令时，若用户未给出文件的绝对路径，则首先在当前目录下寻找相应的可执行文件、批处理文件等, 找到为止(不会递归文件夹, 只指文件 )； 新加命令后注意要保存.    JAVA - JDK  Download  配置踩坑小记:\n1 2 3 4 5 6  # Win10 bin/jlink.exe --module-path jmods --add-modules java.desktop --output jre bin/jlink --module-path jmods --add-modules java.desktop --output jre # 这里生成对应的JRE文件, java 不会自带, 需要不同的电脑用对应JDK生成 # export JAVA_HOME=/usr/libl/jdkXXX  # export JRE_HOME=${JAVA_HOME}/jre  # export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  # export PATH=${JAVA_HOME}/bin:$PATH   关于 Java 以及相关的配置走 Github-JavaCollection.\nANDROID-SDK   Studio Download\n  Cmdline-tools Download\n  Sdk-manager\n  Guide\n  CPP   linux\n 依赖: gcc , g++ , (c)make    Win\n 下载 mingw64. 配置环境变量    Vscode Config\n  REFERENCE 参考资料  [1]. 环境变量的用户变量与系统变量的区别 ","description":"","title":"Environment Config","uri":"/blog/posts/2020-10-16-envir_config/"},{"categories":null,"content":"Version 0.1 -\u003e 1.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  npm install electron -g # ? npm install electron --save-dev # ?? npm install electron -g --unsafe-perm # ??? sudo npm npm install electron -g # ???? sudo npm npm install electron -g --unsafe-perm # ????? npm config set proxy url # ??????!!!!!! npm config delete proxy # what about you??? # reboot! F*** U # \u003e electrona9.2.0 postinstall /usr/local/lib/node modules/electron # \u003e node install.js # Error: EACCES: permission denied. mkdtemp '/usr/local/lib/node modules/electron/electron-download-nosukt' #npm ERR! code ELIFECYCLE #npm ERR! errno 1 #npm ERR! electron@9.2.0 postinstall: node install.js #npm ERR! Exit status 1 #npm ERR! #npm ERR! Failed at the electronag.2.0 postinstall script. #npm ERR! This is probably not a problem with npm. There is likely additional logging output above. #npm ERR! A complete log of this run can be found in: #npm ERR! /root/.npm/ logs/2020-08-13T05 20 38 701z-debug.log   从上面可以看出总是卡在 node install.js 的 download electron-linux-x64.zip, 是校园网+GFW的原因了.\n而因为不知道具体的路径, 所以智能乖乖的执行这个脚本...\n失败总结:\n 就算挂代理下载这个JS包还是很慢, 几乎没有进度... 所以以后开发还是用上阿里的 cnpm 吧, 在这方面不能不妥协1. /home/usr/.npmrc 加上 electron_mirror=\"https://npm.taobao.org/mirrors/electron/\"2  Demo 3 1 2 3 4 5 6 7 8 9 10 11 12  \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eText\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ccenter\u003e \u003ch1\u003e Hello, Electron!!! \u003c/h1\u003e\u003c/center\u003e \u003c/body\u003e \u003c/html\u003e   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var electron= require('electron') //引入electron var app=electron.app // 创建引用 var BrowserWindow = electron.BrowserWindow // 创建窗口应用 var mainWindow=null;//声明要打开的主窗口 app.on('ready',()=\u003e{ mainWindow=new BrowserWindow({ width:800, height:800, // webPreferences: {//最新的electron@5.0系列中，nodeIntegration参数默认是false。而在以前版本的electron中，这个nodeIntegration参数，默认为true。  // nodeIntegration: true  // }  }) // 设置窗口大小  mainWindow.loadFile('index.html') //加载这个页面  mainWindow.on('closed',()=\u003e{////监听关闭事件，把主窗口设置为null  mainWindow = null }) })   之后总算是交上了这四天的答卷 ...\nNotes4  NodeJS: http://nodejs.cn/learn Electron: https://www.electronjs.org/docs/tutorial  Nodejs 1 2 3 4 5 6 7 8 9 10 11 12 13 14  const http = require('http') const hostname = '127.0.0.1' const port = 3000 const server = http.createServer((req, res) =\u003e {//会创建新的 HTTP 服务器并返回它  res.statusCode = 200 res.setHeader('Content-Type', 'text/plain') res.end('你好世界\\n') }) server.listen(port, hostname, () =\u003e { console.log(`服务器运行在 http://${hostname}:${port}/`) })   每当接收到新的请求时，request 事件会被调用，并提供两个对象.\n  一个请求（http.IncomingMessage 对象）提供了请求的详细信息。 在这个简单的示例中没有使用它，但是你可以访问请求头和请求数据。\n  一个响应（http.ServerResponse 对象）用于返回数据给调用方。\n  Electron 使用ipcRenderer 和 ipcMain模块发送消息\n使用 remote模块进行RPC方式通信\nRPC方式通信\nweb页面间如何共享数据。\n主进程和渲染进程中，你可以通过require的方式将其包含在模块中以此，获取Electron的API\n1  const electron = require('electron')    主进程或渲染进程 一些API可以同时在两种进程中使用. 每一个API的文档都将声明你可以在哪种进程中使用该API。 Electron通过remote模块暴露一些通常只能在主进程中获取到的API。 为了在渲染进程中创建一个BrowserWindow的实例，我们通常使用remote模块为中间件：  同时对主进程和渲染进程暴露了Node.js 所有的接口\n1)所有在Node.js可以使用的API，在Electron中同样可以使用。 在Electron中调用如下代码是有用的：\n1 2 3 4 5  const fs = require('fs') const root = fs.readdirSync('/') // 这会打印出磁盘根级别的所有文件 // 同时包含'/'和'C:\\'。 console.log(root)    加载远程内容的信息和指南 npm 提供了目前世界上最大的开源代码库，那里包含了经过良好维护和测试的代码，这些代码之前往往是专门供给服务器应用程序使用的，能够使用这些代码是Electron的重要特色之一。 在你的应用程序中如果要使用官方的AWS SDK，你需要首先将它作为一项依赖进行安装, 然后在你的Electron应用中，通过require引入并使用该模块，就像构建Node.js应用程序那样：  1 2  // 准备好被使用的S3 client模块 const S3 = require('aws-sdk/clients/s3')   原生Node.js模块 (即指，需要编译源码过后才能被使用的模块) 需要在编译后才能和Electron一起使用。绝大多数的Node.js模块都不是原生的， 在650000个模块中只有400是原生的。 当然了，如果你的确需要原生模块，可以在这里查询如何重新为Electron编译原生模块(很简单)。\n  https://developer.aliyun.com/mirror/NPM?from=tnpm ↩︎\n https://www.electronjs.org/docs/tutorial/installation ↩︎\n https://jspang.com/detailed?id=62 ↩︎\n https://www.electronjs.org ↩︎\n  ","description":"","title":"Electron","uri":"/blog/posts/2020-08-20-electron/"},{"categories":null,"content":" Any application that can be written in JavaScript, will eventually be written in JavaScript\n任何能够用JavaScript实现的应用系统，最终都必将用JavaScript实现\n--Jeff Atwood 在2007年提出 Atwood定律\n 自带 TypeScript 和 JavaScript 提示, MIT开源.\n[LINK] :\n https://code.visualstudio.com/docs  https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf   https://juejin.im/post/5cb87c6e6fb9a068a03af93a 设置 VSCode 缩进的空格数  Plugin  Theme:  Atom One Light/Dark Materoal icon theme Panda Theme Community Material Theme   Font:  首选等宽字体 https://github.com/abertsch/Menlo-for-Powerline   Markdown  Markdownlint Markdown Preview Enhanced   Python  Python  1 2  pip install yapf # “python.formatting.provider” pip intssll jupyter    C++  C/C++ Visual Studio IntelliCode environment config: https://zhuanlan.zhihu.com/p/87864677   Java  Beautify：代码高亮 Terminal：直接唤起终端 Project Manager：多个项目切换 Auto Close Tag：标签自动闭合（其实我觉得可以内置的）   HTML  Svg viver VS Color Picker Regex Previewer Quokka.js Open in Browser Liver Sever Html Snippets HTML Boilerplate CSS Peek color info Code runner Auto Close Tag    Tips Proxy  勾选设置里面把代理选项. 无法在只读文本中编辑  在终端编译 修改 JavaScript   上下拆分窗口: View-\u003eEditor Layout 设置默认空格缩进editor.detectIndention: false  自动换行 ShortCut    Mac 快捷键 Win 快捷键 作用 备注     Cmd + Shift + P Ctrl + Shift + P，F1 显示命令面板    Cmd + B Ctrl + B 显示/隐藏侧边栏 很实用   Cmd + \\ Ctrl + \\ 创建多个编辑器 【重要】抄代码利器   Cmd + 1、2 Ctrl + 1、2 聚焦到第 1、第 2 个编辑器 同上重要   cmd +/- ctrl +/- 将工作区放大/缩小（包括代码字体、左侧导航栏） 在投影仪场景经常用到   Cmd + J Ctrl + J 显示/隐藏控制台    Cmd + Shift + N Ctrl + Shift + N 重新开一个软件的窗口 很常用   Cmd + Shift + W Ctrl + Shift + W 关闭软件的当前窗口    Cmd + N Ctrl + N 新建文件    Cmd + W Ctrl + W 关闭当前文件     跳转操作    Mac 快捷键 Win 快捷键 作用 备注     Cmd + ` | 没有 | 在同一个软件的多个工作区之间切换 | 使用很频繁 |      Cmd + Option + 左右方向键 Ctrl + Pagedown/Pageup 在已经打开的多个文件之间进行切换 非常实用   Ctrl + Tab Ctrl + Tab 在已经打开的多个文件之间进行跳转 不如上面的快捷键快   Cmd + Shift + O Ctrl + shift + O 在当前文件的各种方法之间进行跳转    Ctrl + G Ctrl + G 跳转到指定行    Cmd+Shift+\\ Ctrl+Shift+\\ 跳转到匹配的括号     移动光标    Mac 快捷键 Win 快捷键 作用 备注     方向键 方向键 在单个字符之间移动光标 大家都知道   option + 左右方向键 Ctrl + 左右方向键 在单词之间移动光标 很常用   Cmd + 左右方向键 Fn + 左右方向键 在整行之间移动光标 很常用   Cmd + ← Fn + ←（或 Win + ←） 将光标定位到当前行的最左侧 很常用   Cmd + → Fn + →（或 Win + →） 将光标定位到当前行的最右侧 很常用   Cmd + ↑ Ctrl + Home 将光标定位到文章的第一行    Cmd + ↓ Ctrl + End 将光标定位到文章的最后一行    Cmd + Shift + \\  在代码块之间移动光标     编辑操作    Mac 快捷键 Win 快捷键 作用 备注     Cmd + Enter Ctrl + Enter 在当前行的下方新增一行，然后跳至该行 即使光标不在行尾，也能快速向下插入一行   Cmd+Shift+Enter Ctrl+Shift+Enter 在当前行的上方新增一行，然后跳至该行 即使光标不在行尾，也能快速向上插入一行   Option + ↑ Alt + ↑ 将代码向上移动 很常用   Option + ↓ Alt + ↓ 将代码向下移动 很常用   Option + Shift + ↑ Alt + Shift + ↑ 将代码向上复制    Option + Shift + ↓ Alt + Shift + ↓ 将代码向下复制 写重复代码的利器    多光标编辑    Mac 快捷键 Win 快捷键 作用 备注     Cmd + Option + 上下键 Ctrl + Alt + 上下键 在连续的多列上，同时出现光标    Option + 鼠标点击任意位置 Alt + 鼠标点击任意位置 在任意位置，同时出现光标    Option + Shift + 鼠标拖动 Alt + Shift + 鼠标拖动 在选中区域的每一行末尾，出现光标    Cmd + Shift + L Ctrl + Shift + L 在选中文本的所有相同内容处，出现光标     其他的多光标编辑操作：（很重要）\n 选中某个文本，然后反复按住快捷键「 Cmd + D 」键（windows 用户是按住「Ctrl + D」键）， 即可将全文中相同的词逐一加入选择。 选中一堆文本后，按住「Option + Shift + i」键（windows 用户是按住「Alt + Shift + I」键），既可在每一行的末尾都创建一个光标。  删除操作    Mac 快捷键 Win 快捷键 作用 备注     Cmd + shift + K Ctrl + Shift + K 删除整行 「Cmd + X」的作用是剪切，但也可以删除整行   option + Backspace Ctrl + Backspace 删除光标之前的一个单词 英文有效，很常用   option + delete Ctrl + delete 删除光标之后的一个单词    Cmd + Backspace  删除光标之前的整行内容 很常用   Cmd + delete  删除光标之后的整行内容     备注：上面所讲到的移动光标、编辑操作、删除操作的快捷键，在其他编辑器里，大部分都适用。\n编程语言相关    Mac 快捷键 Win 快捷键 作用 备注     Cmd + / Ctrl + / 添加单行注释 很常用   Option + Shift + F Alt + shift + F 代码格式化 很常用   F2 F2 以重构的方式进行重命名 改代码备   Ctrl + J  将多行代码合并为一行 Win 用户可在命令面板搜索”合并行“   Cmd +      Cmd + U Ctrl + U 将光标的移动回退到上一个位置 撤销光标的移动和选择    搜索相关    Mac 快捷键 Win 快捷键 作用 备注     Cmd + Shift + F Ctrl + Shift +F 全局搜索代码 很常用   Cmd + P Ctrl + P 在当前的项目工程里，全局搜索文件名    Cmd + F Ctrl + F 在当前文件中搜索代码，光标在搜索框里    Cmd + G F3 在当前文件中搜索代码，光标仍停留在编辑器里 很巧妙    自定义快捷键 按住快捷键「Cmd + Shift + P」，弹出命令面板，在命令面板中输入“快捷键”，可以进入快捷键的设置。\n当然，你也可以选择菜单栏「偏好设置 --\u003e 键盘快捷方式」，进入快捷键的设置：\n","description":"","title":"VSCode","uri":"/blog/posts/2020-07-15-vscode/"},{"categories":null,"content":"夜色正浓，他再一次被热醒，有点迷糊，侧过身子，他看向周围的一切，远处灯光平静地打在课桌上，书本试卷被卷在他的身后，褶皱书本已被汗渍浸湿，那些断断续续失色的黑字让他感到厌倦，起身，他静静地注视着周遭的一切，书本像行星围绕在他周围，他自己仿佛就是一个巨大的黑洞，会吸引吞噬并摧毁周围的一切。一只蚊子飞过，起飞，着陆，起飞，再着陆，他感到厌烦，用拳头握住头顶的蚊子，草草结束了蚊子的一生。\n顿时间房间里没了声，他有点受不了，他渴望逃离。\n暗淡的灯火打在书桌上，透过桌椅狭缝的光束照在他的脸上，不知怎么地，虽不亮堂，却如此让他着迷。他迷恋聚光灯下的事物，他甚至觉得此时背后的试卷是自己的背景, 头顶的台灯是录影室的机器, 他觉得此刻一切的事物都光鲜美丽，世事浮沉而从未变更, 他有点自我陶醉。但那张老旧书桌就不同了，从他记事开始它就默默的守到那里，它拥有比他还大的年龄，而他甚至也明确书桌上每一处指缝大小的痕迹，而这书桌从何而来？如何由来？他并不关心。只是最近的书桌写起字来有些摇摆不定，他害怕自己的暴力促使书桌散架，唯有这点让他感到恐慌，他跑去和父母商量，希望可以换掉这张桌椅，但是几次争取父母还是以“又不是不能用”搪塞过去。\n周遭的一切让他形如囚兽，有些心寒，而他渴望逃离。\n在这暗淡的色调下，他仿佛穿越到了上个星期语文老师给同学们放的一部电影，一时间他想不起故事的开头讲了什么，但他记得那个冰冷色调下一位母亲疲于现实为孩子奔波的情景，一场场意外悄然而至……母亲得知孩子学习被自己耽误后，怒斥孩子……而电影的最后, 他痛苦地挣扎起来, 结局到底是什么他终是想不起来了，他不清楚到底老师是否有给同学们放完，他又想起来前几天妈妈吃饭时一言不发，他问后母亲也只是搪塞几句，最后以好好学习为句号打断了这场对话。\n他想起来三年前的班主任组织看的励志电影，他还记得为剧中的老师骂学生的一句爆款 “你一个三无人员，现在不好好读书，将来你怎么办啊你……”。突然间他想起了什么，一跃而起，却又像是被谁扼住咽喉，于是他再次躺下，喘着粗气，企图寻求生机。\n他决定逃离，于是他沉沉睡去。\n他再度被热醒，他摆弄着已成鸡毛的头发，起身，下床，拉开窗帘，楼外昏黄的灯光打在他的脸上，又是一个没有月亮与星星的夜晚，可他能隐隐感到云翳后的悸动。一瞬间他凝固了，若有所思地想到什么，转身走回书桌，捡起落在地上密密麻麻的试卷，俯身，起身，回桌，伏案，着笔。在那一刻，他能感受到窗外老树正不停抽芽，他能看到的月亮和星星高悬在空，闻到寒冬腊月梅花分外扑鼻。他不知道彼时的这些东西是否是真的，但是又有什么关系呢？他明白这些热爱而美好的东西不必时时打捞，他们永远都是真的。\n叹了口气，他有点迟疑，逃不逃离好像也有点无所谓了。\n这个时候母亲推门而入，“孩子醒了？想吃点什么吗？”。他支支吾吾了一会，他甚至觉得自己开始有点眷恋这个熟悉的地方，几个月后的高考是不是真的要离开这座城市，这个熟悉的家，这些熟悉的微小的一切，有点期待，亦有些害怕。\n“随便吃点吧……”\n“那就热昨晚的剩饭吧？”\n“好。”\n“妈！”\n“嗯？”\n“最近是不是发生了点什么啊？看你这几天挺忙的。”\n母亲反手把窗帘拉开，阳光打在逼仄的房间里，原来天已经亮了啊，突然他感到很温馨，温度开始上升。\n“没事啦，都过去了！”\n母子一前一后走去吃饭\n\"上次考了第几名啊? 是不是又该模考了?\"\n......\n一切如故……\n(终)\nAfterwards 生活不易, 但庆幸我们所热爱的事物都是真的；他们就在那里, 某种程度上可以说是命运的邂逅. 我相信孤军奋战注定是人生的常态, 写下这些杂乱的文字只是过去无数孤立的瞬间渴望得到情绪的释放和共鸣. 看到这里的话, 我想对你说一句:\n\"加油啊, 就算什么都没有, 你一样一定可以做到更好!\"\n","description":"","title":"逃离","uri":"/blog/posts/2020-07-15-escape/"},{"categories":null,"content":"主讲人：沈弈斐副教授\n Q：为什么女性总是喜欢霸道总裁的片段？\n A ：源于男女不同的内在追求，女性眼里往往更加在乎独特的自我，而男性往往在乎自己的权威。这样想：如何我被一个普通的人爱了，那么我的特殊的自己不就很普通吗？反过来，如果我被一个拥有众多选择的总裁爱上了，那么我的价值不就更大了吗？所以往往对霸道总裁片段的喜爱，对应着独特自我的体制在自己身上的投射。\n\r Q：为什么现在两性都不会太主动？\n A : 像是传统的《呼啸山庄》《傲慢与偏见》一样，我们往往从道德的角度说说那个抛弃对方的人是有问题的。但更重要的是，从自我的角度看，女性吸引你的自我是不够好的，而如果我迈出那一步，我的自我就会暴露在你的自我的评价体系中，我一定会受到我是不是足够好的评价，对我的影响是很大的，起码在我自己的世界中，我自己知道就好。所以有的人出轨特别恨小三，因为在竞争体系中，小三和我的自我体系在作斗争。所以现在男性往往不愿意追求女性，女性也越来越谨慎，男的在被拒接的时候往往会想到的是自己背后的物质条件，女性往往想到的是自我。恰恰有趣的是，如何和你建立起羁绊，我这个独立的个体往往会丧失部分自主性，这个时候，陷入爱情的自我认同和自我自主性之间形成了张力。\n\r Q；优秀两性往往是很难进入婚姻的？\n A：这恰恰引出了在这个市场经济下两性的不同取向：\n 男性自我价值取向是自我气质的彰显，比如男性在家庭的权威不再和自我气质挂钩，而是暴力。女性自我价值取向是个体自我的发现、赋能、认同。 男性权威在市场商业化，消费文化的影响下，男性占有性资源、个体多有魅力相关联，这往往和西方是相左的，西方往往男性权威在于身体的强壮，所以大部分的人回去健身，东方不同，很资本主义，靠的是是经济实力。所以往往在择偶的时候遇到一个是有征服成就感（20，有较强的的性资源），一个是没有活力、已经准备好进入婚姻的（40，性资源较弱，有生育年龄的限制）造成了男性无论多少岁都对20岁的女性钟情。 男性的自我是向外的，女性相反。所以学心理学的大部分是女性而不是男性，即使男性也学心理学，他也是在想如何搞定对方，明白对方所想，女性不同，他们往往想的是他们自己本身。女性的自我常常被认为是不完整的，所以喜欢心理学。 男性在婚姻市场上要求进一步要求提供强大的经济基础。而往往中国女性在追求经济独立的时候走的比任何希望国家都要彻底，这要归功于新中国成立，所有女性被赋予和男性相同的权利，所有的人都要工作。所以在婚姻市场里面，女性不希望是自己的经济实力打动对方，而希望是独特的自己，女性往往有最佳生育期（28-35），女性特别害怕这个，但其实这个是商业文化的塑造，毕竟没有哪一个四十得子然后说孩子不健康。  在消费文化的塑造，吉登斯提出，在消费文化中，自我和外在不应该有挂钩。\n\r Q : 性别刻板影响——对立的刻板印象\n A：研究两性关系的时候，一个人有两种性别——生理性别，社会性别（文化属性），对性别的规范是建立在文化的基础上的。文化的滞后性和惯性就导致观念会被一代代传递，比如传统刻板影响中对女性的坐姿有别于男性的要求。\n随着时代的发展，女性进入公共领域，偏向于男性发展，所以会有女汉子一说，相反，男性则没有那么高强度的变革。男性分野在公共领域和家庭领域，所以当男性找到富婆时候是被鄙夷的，因为这个是私人领域，但是女性可以，可以有顺从依赖，“他对我很好”。刻板影响中，男公共女私人，存在性别的二元对立——性别平等出现一系列问题。\n传统角色加强版 举例：李安的性别观✔\n\r Q：婚恋之后的不确定的自我和角色的冲突\n A：社会学中有一个序列理论：两性关系不同阶段影响因素不同。由学生时代的外貌论，到三观（家庭理想情况；买什么婚介、公益的做法；你对川普是怎么看待的）。爱到最后是角色的想象，而自我是不确定的。所以我们讨论更多的应该是对角色的想象，男士往往就事论事，女士往往需要维护，认同的跟进。\n\r Q：男性自我的发展是加强版\n A：论道更好的自己，女性和过去不一样，但是男性（贡献权威）自我成长没有改变（男性可怜往往死的早，呜呜呜、照顾自我）。\n\r Q：现在的爱情发展\n A：缘分婚姻（没有独特的自我、你需要接受最自然的我，我们已经确定了关系）——（压缩的现代型）（过去常常用确定的东西去敲定不确定的事情）——爱情婚姻（两个自我的吸引力、努力的自我）（天注定我不用说我爱你、今世不用努力）\n\r Q：涨知识\n  为什么古代订婚一年才会结婚——防止后代的孩子不是自己的。 我们人人标榜铜臭味不好，但是在爱情里面所有的赔偿都可以用金钱达成，也或许除了金钱，再也没有什么可以赔偿爱情。 家庭是抵御风险的一环。社会上更多的责任主体是由家庭承担的。家庭有许多的功能，你可以选择不进入，但是前提是你得知道用什么来替代它。 你应该懂得处理差异的能力，学会同理心和共存，共存不等于一致，同理心不同于理解，什么是你该容忍的，什么是你不该容忍的。 人是很孤独的，爱情是产生链接的最简单的一种方式。 爱情不存在对的人，只存在让你产生性冲动的人。 爱情不是比较关系，它无法处理差异。他首先更应该是朋友关系。 白头偕老不是目的，而是结果。 相亲不会是爱情，爱情是无私的，如果你相亲成功，你一定放弃了爱情。  \rAfterwords  Q：很多女性心想：如果我遇到一个Mr.Right，我是不是就能改变人生了?\n A：并不会。因为爱情是棋逢对手的喜悦，你如果弱的话，不见得找得到那个Mr.Right。就算找到一个Mr.Right，他能拯救你的人生吗？\n你的人生其实依然要靠你自己奋斗，所以在这个过程中你会发现，即使找到一个Mr.Right，也完全不能解决这些问题。如果你想依赖爱情来解决婚姻问题、家庭和工作的平衡问题，那么你一定会很失望。\n 我们要打开爱情的想象。爱情不仅仅是我喜欢你，它还会激发我们对生活的热情。 没必要排斥外貌，排斥金钱，这并不说明你肤浅。 爱情可能只有几个月的热度，你要好好享受。但爱情冷却了之后，恰恰才能显示出你们的智慧，才能让彼此的生活更美好。——沈奕斐   Q：同理心\n A：来自 图图just的视频下的理解（AV16166351）\nTo:我知你身处黑暗，也会陪你直至你走出黑暗，看见自己的光\n“在他人遭遇不幸时选择同情他人会给人一种不平等的感觉，使人与人之间造成疏离；而选择同理心却会给人一种平等的感觉，使人与人之间多了一种共性连接起来。在安慰他人时不要用一线希望去美化它，让人向前看，可希望太遥远，他此时需要的是一种懂他感受的人，要的不是希望，因为痛苦只会在某个特定时期爆发激动，随着时间的推移，事情的繁杂，痛苦还是会渐渐遗忘的。所以，安慰他人时，不需要多说什么，只需表达你的同理心，同感即可。如何表达同理心：换位思考，事情发生对他的意义是什么，他的感受情绪是什么，想他表达自己也有同感，能理解。或者，在必要时给他一个更不幸的比较，让他心里有一丝丝温暖幸运。要感谢那些能做到对他人有同理心的人，因为，在他选择对你表达同理心时，他的心里也跟着痛苦，疼痛过一次。”\n“我也不知道说什么，我只是很高兴你愿意告诉。”——赤耳大魔王.\n\nReferance  B站某学生Up（Norkie）搬运腾讯视频的，作者是逗逗妈。 后记的笔记来自沈奕斐的第二个演讲，《沉迷韩剧的人，爱情和婚姻都没好结果》造就Talk。 后记的笔记来自评论区的阿银天然卷啊卷的笔记，有点感触所以搬过来了。 感觉Up搬运很不可思议，腾讯视频源里是将一个视频分为多个5分钟的小视频拼接播放的，究竟视频脚本如何在5分钟内刷新一次以获取新的视频，然后不断的拼接……这确实是个技术活，而我们一直做得不错。 ","description":"","title":"社会学下的热恋和冷婚","uri":"/blog/posts/2020-02-25-social-love-marry/"},{"categories":null,"content":"文字选自拾穗人的画集《我希望自己足够渺小》。有趣的是，不足1100的文字却足够让我震撼。在高三那段一个人的时间里，情感堆积，这本书成为了我短暂的情绪宣泄的出口，坐在图书书架下埋头一个小时看完总是让人浮想联翩。和往日看到的画作不同，他讲的是一个个个人的悲剧，将视角拉近，一个人内心的私欲被揭而讽刺。看完之后自然很是压抑，但是我们还是必须相信美好的事情即将发生，因为真的有源源不断的希望等着我们。祝福你我。 🎈\n正文 这部作品从记录下第一个点子到十八个短篇最后成书，这中间用了六年。\n这六年是我被迫笨拙地适应社会的过程也是我学习与日常焦虑相处的过程。\n我知道在每一天的疲惫和焦虑中，人最需要的就是便捷的逃避。\n在过度的感官刺激中遗忘真正的自我，遗忘那些造成我们困境的真相。\n我常怀疑自己创作的意义，我不能鼓励悲伤中的人去寻找希望，更不能帮助他们逃避现实。\n各种可消费的逃避带来的慰藉是极其短暂的，被剩下的我只能直面真相。\n常人总是不愿面对真相 比如无法逃避的死亡。\n面对真相却无力改变令人感到绝望。\n为了对抗这焦虑，我宁可相信事情会有转机：\n木炭会结为钻石，汕子可以幻化成黄金。\n\r创作是我拙劣的尝试，为了弥补自己社会化程度的不足。\n在对自身困境的观照中，\n我将高山看作途路，将火焰视作野风，\n将内心曾经认为不可逾越的，看作日转流长。无法逃避和自欺.\n在说服自己之前，我没有信心说服别人。\n在对抗虚无的一个人的长城上.我努力不跌落山谷，\n努力澄清视野、积累资粮，一心想着去点亮哪怕是一处天边的烽火。\n为了我们再次相遇。\n\r创作《我希望自己足够融小》用了六年，从作品完成到付粹出书，又过了六年。\n十二年后的今天我还是不得不直面当时留在作品中的困惑，\n六年前，我为自己的作品不能鼓励悲伤中的人们而感到惭愧。\n那时候我认为问题全在自己.自己还没有“活开”。\n后来我发现，人都是相信自己愿意相信的东西。\n所谓“能鼓励人”的作品是可以通过有章可循的写作技巧采实现的。\n即便被传达的概念不能自洽，只要表达技巧足够高超、熟练，一般读者常常乐于接受。\n在我的现实生活圈子里，不乏所谓“聪明人”和“成功者”，\n但少有真正“活开”的榜样。我始终憧憬那种通达的生命状态，\n并且愿意相信那样的生命状态是可以达到的\n但由于自己还没做到，所以在表达时始终缺乏确信和勇气。\n\"愿意相信\"不是“真正相信\"，更不是“坚信”，“诚实”能成为动摇的借口吗？\n高超的叙事技巧可以给读者带来暂时的情感释放。\n虽然这些小小的心灵火花无法带来真正的信仰，\n但它恰恰证明了每个平凡的内心都愿意相信一些美好的事情。\n哪怕挫败之后的理性反复告诉我们现实的残酷，\n人性中这点小小光亮总在通过各种方式传递。\n虽然历经战争和屠戮.黑暗时代和文化断层.\n文明仍然幸运地延续到了今天。\n这是无数人内心小小光亮的薪火相传。\n所以即便做不到“坚信\"，哪怕是“愿意相信”这样的信念都仍然值得传递。\n\r先圣如孔子亦有郑城东郭之子立，\n穆罕默德盖过赫蒂彻的被子\n\r疲惫、怀疑和动摇是人的常态，\n所幸它们不常是所有事情的终点。\n我们口耳相传的言说中总有些东西能使人在逆境中继续走下去。\n\r这些东西总是被幢憬希求，又常常被漠视遗忘，\n它如此珍稀却又可以转念升起。\n\r也许每个人对它都有一个独特的命名，\n而我把它称为“希望”。\n\r","description":"","title":"我希望自己足够渺小","uri":"/blog/posts/2020-02-20-i-wish-i-could-small-enough/"},{"categories":null,"content":"据 GitHub Flavored Markdown（GFM）官方文档介绍，Markdown 是由约翰·格鲁伯（John Gruber）在亚伦·斯沃茨（Aaron Swartz）的帮助下开发，并在 2004 年发布的标记语言。\n其设计灵感主要来源于纯文本电子邮件的格式，目标是让人们能够使用易读、易写的纯文本格式编写文档，而且这些文档可以转换为 HTML（Hyper Text Markup Language，超文本标记语言）文档。\n起初 Markdown 主要用于网络写作，后来人们希望 Markdown 能够应用到更多的领域，如写书、记笔记、写文档、写幻灯片等。\n由于 Markdown 本身功能有限，一些特定的需求和场景无法被满足，因此产生了许多扩展语法，这些语法在基础语法之上新增了如表格、任务列表、围栏代码块等功能。\n历史  2004 年，Markdown 发布，作者是 John Gruber。 2006 年，Pandoc＇s Markdown 发布，作者是 John MacFarlane。 此版本对 Markdown 语法有额外的扩充和些许修正，这使 Markdown 可以转换为更多的文件格式，Pandoc 堪称文件转换领域的「瑞士军刀」。 2011 年，MultiMarkdown（简称 MMD）发布，作者是 Fletcher T.Penney。 此版本让 Markdown 可以转换为更多的文件格式，包括 HTML/XHTML、LATEX、OpenDocument、OPML（Outline Processor Markup Language，大纲处理标记语言）。 2013 年，Markdown Extra 发布，作者是 Michel Fortin。 此版本最初使用 PHP 语言实现，新增了围栏代码块、具有 id/class 属性的元素、表格、任务列表、脚注、缩写等功能。 2014 年，CommonMark 规范发布，主要作者是 Jeff Atwood 和 John MacFarlane。 CommonMark 旨在为人们提供一个标准的 Markdown 语法规范和参考实现。 Markdown 标准化工作开始于 2012 年，2014 年 9 月，由于 John Gruber 反对在这一工作中继续使用「Markdown」这个名字，其被更名为 CommonMark。 2017 年，GitHub 发布了 GitHub Flavored Markdown，即 GFM。 此版本遵循 CommonMark 规范，新增了围栏代码块、表格、删除线、自动链接、Emoji 表情和任务列表等功能，是目前使用最广泛的版本。  总之，版本之多 John Gruber 认为合理，未做约束，作出约束的是CommonMark ——它为 Markdown 提出了一个标准的、明确的语法规范，以及一套全面的测试，根据此规范可以验证 Markdown 的实现结果，GitHub Flavored Markdown（GFM）遵循的就是 CommonMark 规范。\n编辑器： Typora、熊掌记、Ulysse\n心得  表情符号参考: http://www.webpagefx.com/tools/emoji-cheat-sheet/ 锚点（书签）-\u003e 就是URL。  JS 插件: \u003csup\u003e\u003ca class=\"xxx\" href=\"xxx\"\u003e\u003c/a\u003e\u003c/sup\u003e + \u003ca class=\"xxx\"\u003e[1].xxxxx\u003c\u003e 下标对应使用\u003csub\u003e\u003c/sub\u003e   点击展开: \u003cdetails\u003e\u003csummary\u003e点击展开\u003c/summary\u003e\u003ca\u003exxxxx\u003c/a\u003e\u003c/details\u003e 一些来自他人的建议：  幻灯片插件——reveal.js 邮箱渲染插件——Markdown Here 交互性文档——Jupyter Notebook \u0026 R Markdown  R Markdown 的内容请参考官方文档 https://rmarkdown.rstudio.com/ R Markdown 权威指南 https://bookdown.org/yihui/rmarkdown/   网页便携程序——md-page  url：https://github.com/oscarmorrison/md-page   项目文档书写：  Mkdocs: 如 Google 的 python-fire. VuePress: 集成了 Google Analytics，以及基于 Git 的「最后更新时间」功能，见https://vuepress.vuejs.org/zh/guide/   Hexo Gitbook——支持 Markdown 和 AsciiDoc 语法，可以导出静态站点或电子书（支持 PDF、ePub、mobi 等格式） 付费渠道   空格尽量用 _ 来替换, 因为在网页的编码中, ' '代表%20, 出来的网址会冗杂.  Code list1    code type     1c 1C:Enterprise (v7, v8)   abnf Augmented Backus-Naur Form   accesslog Access log   actionscript ActionScript   ada Ada   angelscript AngelScript   apache Apache   applescript AppleScript   arcade ArcGIS Arcade   arduino Arduino   armasm ARM Assembly   asciidoc AsciiDoc   aspectj AspectJ   autohotkey AutoHotkey   autoit AutoIt   avrasm AVR Assembler   awk Awk   axapta Microsoft Axapta (now Dynamics 365)   bash Bash   basic Basic   bnf Backus–Naur Form   brainfuck Brainfuck   cal C/AL   capnproto Cap’n Proto   ceylon Ceylon   clean Clean   clojure-repl Clojure REPL   clojure Clojure   cmake CMake   coffeescript CoffeeScript   coq Coq   cos Cache Object Script   cpp C++   crmsh crmsh   crystal Crystal   cs C#   csp CSP   css CSS   d D   dart Dart   delphi Delphi   diff Diff   django Django   dns DNS Zone file   dockerfile Dockerfile   dos DOS .bat   dsconfig dsconfig   dts Device Tree   dust Dust   ebnf Extended Backus-Naur Form   elixir Elixir   elm Elm   erb ERB (Embedded Ruby)   erlang-repl Erlang REPL   erlang Erlang   excel Excel   fix FIX   flix Flix   fortran Fortran   fsharp F#   gams GAMS   gauss GAUSS   gcode G-code (ISO 6983)   gherkin Gherkin   glsl GLSL   gml GML   go Golang   golo Golo   gradle Gradle   groovy Groovy   haml Haml   handlebars Handlebars   haskell Haskell   haxe Haxe   hsp HSP   htmlbars HTMLBars   http HTTP (Header Plaintext)   hy Hy   inform7 Inform 7   ini TOML, also INI   irpf90 IRPF90   isbl ISBL   java Java   javascript JavaScript   jboss-cli jboss-cli   json JSON / JSON with Comments   julia-repl Julia REPL   julia Julia   kotlin Kotlin   lasso Lasso   ldif LDIF   leaf Leaf   less Less   lisp Lisp   livecodeserver LiveCode   livescript LiveScript   llvm LLVM IR   lsl LSL (Linden Scripting Language)   lua Lua   makefile Makefile   markdown Markdown   mathematica Mathematica   matlab Matlab   maxima Maxima   mel MEL   mercury Mercury   mipsasm MIPS Assembly   mizar Mizar   mojolicious Mojolicious   monkey Monkey   moonscript MoonScript   n1ql N1QL   nginx Nginx   nimrod Nim (formerly Nimrod)   nix Nix   nsis NSIS   objectivec Objective-C   ocaml OCaml   openscad OpenSCAD   oxygene Oxygene   parser3 Parser3   perl Perl   pf pf.conf   pgsql PostgreSQL SQL dialect and PL/pgSQL   php PHP   plaintext Plaintext   pony Pony   powershell PowerShell   processing Processing   profile Python profile   prolog Prolog   properties Properties   protobuf Protocol Buffers   puppet Puppet   purebasic PureBASIC   python Pythin   q Q   qml QML   r R   reasonml ReasonML   rib RenderMan RIB   roboconf Roboconf   routeros Microtik RouterOS script   rsl RenderMan RSL   ruby Ruby   ruleslanguage Oracle Rules Language   rust Rust   sas SAS   scala Scala   scheme Scheme   scilab Scilab   scss SCSS   shell Shell Session   smali Smali   smalltalk Smalltalk   sml SML (Standard ML)   sqf SQF   sql SQL (Structured Query Language)   stan Stan   stata Stata   step21 STEP Part 21   stylus Stylus   subunit SubUnit   swift Swift   taggerscript Tagger Script   tap Test Anything Protocol   tcl Tcl   tex TeX   thrift Thrift   tp TP   twig Twig   typescript TypeScript   vala Vala   vbnet VB.NET   vbscript-html VBScript in HTML   vbscript VBScript in HTML   verilog Verilog   vhdl VHDL   vim Vim Script   x86asm Intel x86 Assembly   xl XL   xml HTML, XML   xquery XQuery   yaml YAML   zephir Zephir    \rReference [1]. Code list : https://terryl.in/en/highlight-js-html-code-language-list-for-syntax-highlighting/#how-it-works","description":"","title":"Markdown Notes","uri":"/blog/posts/2020-02-18-markdown/"},{"categories":null,"content":" Q：无法上传图片，提示信息“无法创建目录”。\n A：方法一：定位wordpress/wp-contect/uploads的文件夹，更改权限为777.\n方法二：参考下述修改用户属性的的方法。（安全）\n\r Q：填写主机名称，无法进行下一步操作\n A： 方法一：填写localhost或者www.yoursite.com.\n​\t方法二： 修改wp-config.php文件（来自老蒋部落） \n1 2 3  define(\"FS_METHOD\", \"direct\"); define(\"FS_CHMOD_DIR\", 0777); define(\"FS_CHMOD_FILE\", 0777);   \r Q：发布失败。错误信息：此响应不是合法的JSON响应。\n A：在写文章的时候出现的Bug，目前定位是WordPress的5.0版本和 Gutenberg古腾堡编辑器 有点不兼容。\n​\t一种是禁用Gutenberg古腾堡编辑器，然后有插件禁用和代码禁用。代码禁用的话是在主题的 functions.php 文件添加下面的代码：\n//Wordpress 5.0+ 禁用 Gutenberg 编辑器\radd_filter('use_block_editor_for_post', '__return_false');\rremove_action( 'wp_enqueue_scripts', 'wp_common_block_scripts_and_styles' );\r​\t插件禁用的话是下载Classic Editor的编辑器即可。\n​\t另外一种是继续使用Gutenberg古腾堡编辑器，但是方法还没找到，听说是因为网站没有配置伪静态的原因，于是自己又跑去配置伪静态，顺便百科、维基了一下。\n\r Q：woc，WordPress官网那么垃圾我怎么才能从官网索取主题以及插件呢？？\n A：直接去插件和主题的控制面板搜\n\r \nQ: 文章粘过来发现不支持Markdown\n A：去搜 WP Githuber MD插件，网上一边倒另一款编辑器[WP Editor.md 但是不可用果断放弃。\n但是有一个缺点，就是如果字数太多的话，实时预览的速度会有点慢，我直接把它关掉了。\n\r Q：我的代码不可以高亮，怎么半？装什么代码高亮的插件到没有用\n A： Markdown姿势，找到规范！\n\r Q：Warning: ftp fget() expects parameter 1 to be resource, null iven n w/wwmoot/www. dandelionflowers. xz/wordpress/p-admin/includes/class-wp-filesystem-ftpext. php on line 143\n A：一般（插件WPForms Lite）是WordPress不兼容报错，禁掉就好了。\n\r Q：Wordpress伪静态规则的配置以及原理？\n A：参考配置伪静态规则，伪静态规则，伪静态规则，伪静态规则，伪静态隐藏。\n这个又和古腾堡编辑器的使用息息相关，留作日后开发使用。\n\r Q：WordPress 常使用的插件？\n A：爬了爬常用的插件：留作日后使用。：留作日后使用。\n​\t插件.\n\r Q : 出现无法创建文件夹需要修改文件夹权限的问题\n A：之前为了解决升级主题的缘故，所以将好多文件的权限改成了777(wp-content下的文件)，有的是644，有的是755，现在希望研习一下这个的修改的操作。\n这里先贴出这样做的原因吧：\n 所有的人都可以来这里随便指点一下，随便来删除一下啊。 记得当初一个兄弟的遭遇：刚进一间公司不久，然后执行了一下删除命令，没想到把该公司的一个项目的所有上传的资源全部删掉了～悲催！此处先不讨论做该项目的人的部署问题。如果操作得当，大家都可以避免。既然可以在开始就避免，何乐而不为呢？\n 出现无法创建目录的确是权限的问题，但是，不是目录读写的权限，而是用户组的问题。（这里回去温习一下Linux的用户组知识……） **想要下载插件的用户组为web用户组，用户名组名为 www（ lnmp环境——ngnix.conf中第一行查看，可以用locate nginx.conf的操作搜索一下） **\n读写的权利全是1006，自然不可以成功，所以目标是把读写权利交给www.退出wordpress的目录运行 chown -R www:www wordpress,发现报错\n1  chown: changing ownership of ‘wordpress/.user.ini’: Operation not permitted   如果你没有root账户，就是上面的情况：\n1  sudo chown www wordpress   发现什么都没有，发现成了。\n(注意：还有一个版本，用户不是www,而是apache，这个我还没有搞清楚，留下坑日后再改，如果哪位知道还劳烦指点一下。)\n\r Q : 添加网络搜索引擎的索引\n A：让自己的站点可以增加更多的曝光机会。在上面的危险操作完成之后就可以操作了。\n\r Q : 备份自己的WordPress，腾挪更加方便\n A：方法\n\r Q : 添加自己网站的留言板\n A：方法\n\r Q:官网访问429\n A: WP-China-Yes 插件，Github源码\n[参考]：https://www.imahui.com/resource/2326.html\n","description":"","title":"Wordpress FAQ","uri":"/blog/posts/2020-02-14-wordpress-faq/"},{"categories":null,"content":"高三乍见，甚是欢喜, 刷音乐时看到他人关于课程的截图，感觉讲的很通透，遂找来细品.\n作者：梁永安，⽂学博⼠，复旦⼤学⽐较⽂学与⽐较⽂化专业副教授，韩国梨花⼥⼦⼤学⼤学客座教授 ，⽇本神户外国语⼤学客座教授 ，⽇本冈⼭⼤学客座教授 美国波⼠顿⼤学客座教授 长期从事⽐较⽂学与⽐较⽂化研究，主要研究领域为： 中国近代教会⼤学与中外⽂学关系 景观社会中的⼩说与电影 城市化与中国多元⽂化资源的再⽣性聚合 。\n\n初恋\u0026分手 一、初恋\u0026投入 🏃‍♂️ 像这种初恋真是让一个人完全改变了。 \n因初恋而美好，而有时候你会舍不得把自己的全部决定放在这么一个初见上\n初恋对人来说其实是特别关键的，我们在社会生活里面可以看到，**一个人失去初恋之后，越找越好这种情况比较少，在内心深处特别怀念的还是初恋。**为什么呢？首先从年龄上看，初恋一般来说比较年轻，比较单纯。爱一个人的时候，内心是最重要的，他会从直觉上一下子喜欢一个人。第二方面，年轻的时候没有很复杂的社会关系，所以他的投入感、对爱的彻底性比较好。\n我们的人生，比如中国传统的“三十而立，四十不惑”等等，好像生活是可以用一个流程来描述的。但这个流程对一个人来说并不是最重要的，最重要的是里边的那些片段。你的人生里面有没有一个精神的高峰，或者说情感的高峰、事业的高峰？有这些东西的时候，人生才会获得一种精神，这些东西会定义你这个生命是不是有价值。\n在现代社会里面，遇到初恋或者说打开初恋，它的障碍比传统社会要大得多，因为人会疑虑，人面前有各种可能。有时候你会不舍得把自己的全部决定放在这么一个初见上，所以我们人性深处有时候对于初恋的投入可能是有所保留的。一个人一生如果没有初恋的话，对生命来说是非常遗憾的。年轻的时候，你有巨大的冲力，你有这种向往；长大以后，成熟以后，你就再也不会有这样一种心境了，再也不会有这样一种勇气了，你考虑问题的方式已经变了，参照系已经变了。\n当代社会打开初恋要困难的多。这个时候你面对有各种可能性的人生，不舍得全都投入进去，这个时候的初恋你会有所保留。很多人把初恋当作一种训练，这是我们当前的一个问题。\n\n二、初恋\u0026一生 🚶‍♂️ 从历史上来看，人生往往是因为初恋而美好的，因为有初恋，所以对生活的定义变了。以前对生活美好的定义可能就是你有一个好工作，你的成绩很好，或者别人肯定你了；但是初恋之后你才发现生活是另外一回事，“美好”的定义变了。\n 他来我家时的情景至今仍浮现在我的眼前。他身材瘦削，两腿修长，步展轻盈，动作敬抱，初看去似乎没有什么特殊之处，但他还是吸引了我的注意力，他有一种用眼睛看不到的东西，具体的说是什么，我也说不清。 --弗里达·劳伦斯《不是我，而是风》\n 你看英国作家劳伦斯的夫人弗里达写的回忆录，回忆她和劳伦斯的情感经历，叫《不是我，是风》。那个时候，弗里达已经31岁，有3个孩子。在英国，当时称这样的女性叫作“领扣已经打开的女人”，就是已经嫁人了。她的丈夫是个大学教授，这在英国传统社会里面已经是一个很好的生活了。这个时候，23岁的劳伦斯来到他们家，想请她的丈夫写一封推荐信，去德国教英语。那天教授不在家，教授的夫人来开门，就在那一瞬里面，劳伦斯看到这个女人，忽然一下子满眼都是阳光。他回去给教授夫人写了一封信，其中有一句话说：你是全英国最美的女人。当然女性的表达比男性要含蓄得多，其实在开门那一瞬，教授夫人看到一个年轻人，面容严峻，但是眼神里面透着一种非常凌厉的光。一个女性爱一个人的时候，她不会去描述得很清楚，说“这个人很帅”怎么怎么样。教授夫人看到劳伦斯，心里突然感到一种东西，但她说不清楚。后来他们毅然决定走到一起，私奔了。两个人压力特别大，整个社会排斥他们，但因为排斥反而获得某种幸福，因为不可能再过平常的生活了。我去英国的时候到劳伦斯的故居去看，一个矿区旁边的镇，是那种中产阶级还算比较完整的生活，但劳伦斯就跟这样的生活告别了。他们当时写的书也不被接受，不被出版，所以在这个世界上只有互相依靠才能有一种生活的继续。很少有人真正把文学变成一种生活，而这两口子在与社会这么巨大的一种对抗里面，依靠文学，依靠创作，一步一步，一步一步，最后建立起一个自己也没想到的生活。\n在今天大学生活里面，我接触到很多人是把初恋当作一种训练、一种体验。因为初恋的成功率太低了，所以就形成了一个概念，初恋不过是不恋白不恋，后来肯定不是跟这个人在一起，这就把初恋一下子瓦解了。这是我们当前的一个问题。\n\n三、初恋\u0026人生 🕴 像这种初恋真是让一个人完全改变了。 \n 但你不会恨我很久的，伊本。我不是世界上最坏的女人，你和我有许多共同的东西，我一看到你就知道。\n 劳伦斯和弗里达转向了文学，如果没有这个初恋，他们还是搞文学，命运还是这个方向。但是有的初恋不一样，会让人从自己原来的追求方向上变成另外一个方向，这是初恋里面特别有力量的一部分。\n美国作家尤金·奥尼尔是我特别喜欢的一个剧作家，他的话剧《榆树下的欲望》特别地好。一个农庄主的小儿子伊本，他特别热爱土地，而两个哥哥就想往城里跑。后来70岁的老爹宣布自己到世界周游去了，一年都没回来。三兄弟一看肯定死在外边了，一商量，怎么办？伊本就对两个哥哥说，你们都到城里去吧，把地给我，我以后补偿给你们钱。两个哥哥一听很高兴，太好了，各得其所。没想到，刚刚商量好，传来了消息，老爸第二天就回来了。还带了个年轻的妻子，老爸70多，妻子21岁，三个兄弟极为震惊。第二天傍晚，这个伊本和他的后娘艾比见面了。两个人在进门的一瞬间一对眼，伊本马上明白后娘的出现是因为她渴望土地，她想通过这个婚姻获得土地。而艾比一眼就看出来，这个老三是她的死对头，他也爱土地，所以两个人就变成仇敌互相仇恨。我们说人都成长在黑暗中，但自己却不知道。**一个人一般是两重黑暗，一个是看不清自己的内心，还有一个就是不太清楚世界的黑暗。夹在两重黑暗中间，一个人是靠一点微弱的光亮在看自己的人生。**所以伊本和艾比在微弱的光亮里面互相敌视，但他们不知道其实在内心深处他们是一种人，他们是真正的一个路子上的人。有一天，两个人忽然爆发激烈的争吵，吵着吵着，艾比就对着伊本说，别看你对我这么凶暴，我告诉你，你的内心里面是最爱我的。这个伊本一听，简直莫名其妙，简直不能相信。艾比说，我现在回我的卧室，五分钟之后你就会跟过来。伊本一听，简直可笑。他看她走，嘴里念念有词，“怎么会呢，怎么会呢”。一边说一边挪着步子，一会儿就站在了她的房间门口——两个人终于相爱了。相爱之后两个人才发现，在土地之上还有更高的生活。我们在追求那么多东西，但是因为有了初恋，我们才发现生活其实有更符合内心的一种方向。后来他们俩有一个私生子。伊本的爸爸一开始不知道，还高兴，以为是自己的。风言风语听到以后，搞清楚了，就故意挑拨他们的关系。他跟伊本说，你的后娘原来跟我说过，她就是想办法生个孩子，生个孩子就可以得到土地。这一下子伊本就震惊了，搞了半天是中了她的计，一下子就敌视起来。所以最后你看这个悲剧结局：艾比为了证明自己，亲手掐死了这个婴儿。但是伊本并不知道是怎么回事，发现孩子死了就去报了警，结果警察来捉他们了。在警察来的路上，这一点空隙里面，伊本和艾比有一段对话，他忽然才知道所有的一切。最后警察来了，把艾比捉去，要绞刑。伊本就做出了一个决定，认为自己是共同谋杀，要跟她一起去死。\n爱情里面，像这种初恋真是让一个人完全改变了，当然这种改变也是来自他们的内心。一个人在忙忙碌碌的时候都忘记了一点，其实你的内心深处永远不会丢失。**从远古时代，我们看见闪电会想象神，看见流水会感叹形形色色的未来世界、前世今生。我们心里永远不是停滞在表面的这么一个短暂的生活里，我们内心永远是性灵化的。 所以我们会在某一个时刻忽然体悟到自己的来路，体悟到自己内心的本在，我们一下子会打开自己，然后那些无稽的世界、物质的世界，一下子就会退后了。 ** 这是初恋才能达到的一个境界，二恋、三恋、四恋的时候脑子已经变化了，你已经有对比了，已经有一个框架了，总的来说，是可以用理性来疏导的东西了。\n\n四、被边缘化\u0026爱恋 👥 不被理解的初恋其实是最深情的。 \n在我们这个世界上，恋爱心理语言有一种误区：希望获得外部的肯定。我们有很多说法，比如不被父母祝福的婚姻是不幸福的等等类似的条件句。靠自己的力量去排除是很难的，你内心深处总觉得是一种阴影，哪怕你很爱这个人，但是环境不肯定你，你总会觉得内心深处有惶惶。但是实际上这种不被理解的初恋往往更纯粹一些。\n 那个风度翩翩的男人从小汽车上走下来，吸着英国纸烟。他注意着这个戴着男式呢帽和穿镶金条带的鞋的少女。他慢慢地往她这边走过来。可以看得出来，他是胆怯的。\n 我们看杜拉斯的《情人》为什么很感人，如果放在一个正常的逻辑里面有点不伦，但是放在一个小说的环境里面，你觉得特别地好。16岁法国殖民者的少女遇到华裔男青年，两个人都处在社会的边缘里面。女孩子尽管是一个白人殖民者，但是她在家里是不受重视的，所以你看她穿得都不协调，戴着一个男人的帽子，穿着一个镶边的鞋，浑身都是没有被精心呵护的样子，是在生活里被冷落在一边的孩子。华裔男青年尽管有钱，但是他是被封建婚姻、封建家族统治的一个人，他特别不喜欢自己要去打开的生活。所以这样两个人碰到一起，立刻彼此之间就建立起一种命运的共同感。两个人种族不一样，在越南当时的印度支那社会里面，他们的层级也不一样，他们会走在一起，这就显得比较另类。但是正是因为另类，它会排除掉所有世俗的杂七杂八，只有唯一的向往。什么叫作边缘，就是知道不能实现，一旦知道不能实现，就会非常解放，非常珍惜，而且彼此之间不会有太多的压力。如果要期待永恒的话，各种细节都很敏感，风吹草动都会受影响。男青年也知道，这个女孩子作为一个殖民者的孩子不可能嫁给他；而女孩子也知道，他要跟另外一个家族规定的女人结婚。因为都知道，所以他们就走出了常规的从初恋到成熟的恋爱、最后结婚这么一个轨道。\n在我们中国社会，很多人如果真的遇到这种情况根本就不会开始，因为知道这个开始后面是没有结果的，但实际上它在我们的生活里面是特别特别优美的一部分。在现代社会里面以后会大量地遇到这种情况，我们怎么面对？我们需要打开一个新的视角，在生活里面给这样的情感一个空间。\n\n五、初恋\u0026家 👨‍👩‍👧‍👦 初恋可能不是托付终身的家，它是一份情感 。\n还有一个问题，很多初恋确实不是你的落点，概括地说，初恋可能不是你能够托付终身的家。这里面产生了一个问题，就是男女的差异。**从人类学角度看，男性去爱一个人，他真的是爱一个人，比较简单，就是看到这个人了，内心里很单纯地去爱她。但是女性不同。**在人类历史上、在传统社会里面，女性是从这个家到那个家，她从小就知道要离开原来的家，去另外建立一个家。所以她在对待情感的时候，会比男性要多一些东西：这个爱情是不是能达到一个家的要求。父母在给孩子的惯性上也会这样。很多女孩子在谈恋爱的时候，一开始的出发点、触动点是情感，但是落实点还是要有一个家的框架。家这个概念实际上是很丰富、很多变的，比如说乡村的家、城市的家，在不同的国家又有不同的家，都不一样。在中国这么一个变化的社会里面，重要的主题就是城市化，这就会产生很多初恋的悲剧。很相爱的一对农村男女，来到城市之后，不一样了，女孩子想在城里安个家，但男的到了城市里面要奋斗很长时间才能够把这个家真正建成，这很不容易。\n 晚点名时没有阿远。他立在碉堡顶上，那么高，也不知如何爬上去的，给人怪诞怖异的感觉。他把阿云的信，一叠一札都撕碎掉，扔到空中。\n 我们看侯孝贤的电影《恋恋风尘》，你看阿云和阿远，那么相爱的一对青年到了城里。阿远后来去当兵，阿云一直在等他，写了那么多信，结果临退伍前三个月收不到信了。后来阿远接到自己弟弟的信，说爸爸不让我给你写信，但是我不得不给你写，阿云已经嫁人了。嫁给谁了呢？邮递员。阿云是个很老实的女孩子，阿远当兵了，她接触最多的就是邮递员——整天互相写信，结果跟邮递员熟悉起来。而这个邮递员不管社会阶层再低，但他是个城里人。所以阿远最后被分手，非常痛苦，站在面向大海的悬崖上面哭。最后阿云带着新婚丈夫回故乡，连阿云的爸爸妈妈都不想理她。从乡村的父母来看，你这样做太不好了，但是从女性对生活的期待上，她也有自己的无奈。\n\n六、理性\u0026感性 🧠 初恋可能不是托付终身的家，它是一份情感 。\n初恋为什么会消失？一开始从感觉出发，最后在理智结束。这就是一个人作为一个个体、一个青年社会化的过程，社会给人提供理智，社会给人提供不停复杂化的标准。\n “喏，心肝宝贝。”她在拿到床上的字纸篓里乱摸了一会，掏出了那串珍珠，“把这个拿下楼去，是谁的东西就还给谁。告诉大家，黛西改变主意了。就说‘黛西改变主意了！’”\n 《了不起的盖茨比》里的黛茜，你说她不爱盖茨比吗？她年轻的时候跟盖茨比谈恋爱，最后真正要跟一个大富翁的儿子汤姆结婚的时候，下午要出嫁，上午在那个屋子里哭，哭得那么痛苦。 为什么呢？因为她原来是爱盖茨比的，盖茨比又英俊又聪明，就是缺钱。所以黛茜从这一点一衡量，冷静下来，就不能嫁给他。从理智出发，她嫁给汤姆特别好，她后来就出嫁了。 黛茜的这个选择里面，就是我们经不起社会的格式化。社会的格式化使人脑子里产生了一种逻辑，对生活的解释、对生活的定义就会越来越平衡，也就是说人生的加法越做越复杂，同时欲求的东西也越来越多，所以初恋承担不起这一份重担。莫泊桑的小说《幸福》，写两个人私奔，跑到一个荒岛上能够相爱终身，觉得自己的生活特别地幸福。但如果他们不是跑到意大利的荒岛上，而是跑到罗马去了，面前是各种五花八门的商店，社会上每天散发着种种消费的气息，这两人还能维持到底吗？\n我们从小受的教育是要追求纯粹的情感，追求高远的情怀，好像说起来都是这样的。但实际上潜在的那些广告，无形的那些视觉上的刺激，它悄悄地移植给你很多很多东西。所以你内心里面其实埋藏了太多的欲望，到一定的时候，这些东西都会释放出来，它会化为你的逻辑。这也是一个大的问题。\n\n七、爱恋\u0026极限 🌈 初恋可能不是托付终身的家，它是一份情感 。\n知道了自己的极限，内心深处也就甘心了 我们一生活得其实是非常地朦胧的，什么叫作朦胧，就是说我们不知道自己最高能做到什么，最低能做到什么。在很大程度上，我们都是在对自己不是很清楚的情况下度过一生的。但是，初恋有时候会推动你去触摸激情，看看能不能达到，你终于明白自己是个什么人。\n像乔伊斯写《都柏林人》，这个短篇小说集里面有15个故事，其中第四篇叫《伊芙琳》。伊芙琳这个女孩子过的是一种很平淡的小市民生活，后来她爱上了水手弗兰克，弗兰克要带她去南美的布宜诺斯艾利斯，去打开一个新的生活。伊芙琳就特别高兴、特别兴奋，要摆脱原来这些灰蒙蒙的日子。我们在恋爱里面经常可以看到，初恋显得人好像焕然一新。在这个焕然一新里面，他根本就没有想过那些困难、压力。所以那种启动很快的初恋往往很不靠谱，没有把这些东西真正地在心理上消化一下。伊芙琳跟弗兰克约好，第二天早上灰蒙蒙的天，两个人朝着码头跑了。码头上人山人海，弗兰克被人流冲到前面，伊芙琳在后面一点点距离。她只要跨过一个栏杆就可以上船了，结果没想到就在栏杆那个地方，她扶着那个铁栅栏，一步也迈不动。这是有高度象征性的，跨过这一步以后，新的世界是完全不知道的，而原来那个生活尽管很差，但是是可知的、可预计的，在某种意义上说也是可依赖的。我们很多人就会卡在这个关键口上，宁可过那种在自己心里面落满灰尘的生活，也不去打开有点惊心动魄的新世界。伊芙琳在那一刻非常绝望，她扶着栏杆，看着弗兰克。弗兰克回头看她，说伊芙琳，快来快来快来。结果他看到伊芙琳的眼神里面没有什么惜别之意，甚至也没有一丝爱怜的神色。当然，伊芙琳也明白了，自己做不到这样一种向远方的生活，因为以往的二十来年，已经在内部把她的灵魂给消蚀掉了，所以只有在脑子里浅浅的一层愿望使她要私奔，但是真正行动的时候，已经没有力量了，而这正是我们今天很多人的状态。\n 她对他板起一张惨白的脸，无可奈何地，恰如一只走投无路的动物。她茫然地瞅着他，目光中既没有恋情，也无惜别之意，仿佛望着一个陌路人。\n **我们很多人在谈爱情，谈向往，那不过就是谈谈而已，真正要去动是动不了的。真正要去动还是要找那个现实的，还是要找车子、房子。**如果知道了自己的极限，内心深处也就甘心了，那就建设一个小生活。这也是让人有点伤感、但是可能在某个历史阶段普遍存在的状况。\n\n八、破裂\u0026重生 🔥 就因为有这么一个不爱，她跟原来的生活做了一个告别。\n初恋里面的分手有时候也不见得是个坏事。在初恋的放下里面，有时候会打开一个新的世界，也有时候是因为看到了新的世界而放下了初恋。\n英国作家福斯特写的《印度之旅》，后来大卫·里恩把它改编成电影。奎斯特这个英国女孩子到印度是去看她的未婚夫，这个未婚夫在英国殖民社会里是一个特别标准的好青年，忠于职守，又英俊，是一个非常好的结婚对象。但是到了印度之后，奎斯特先去看了那些充满了性爱雕塑的神庙，后来到了山上，进了那种原始的山洞里面，忽然感受到了一种震撼，原来固有的白人社会建立起来的那套东西，都在那个震撼里面消失掉了，她就不知道自己是谁了。她回望这个山的时候，看到那么多英国人对印度本土人的歧视，深深感到痛苦。忽然一下子明白，那一刻，她发现自己已经不爱未婚夫了，就因为有这么一个不爱，她跟原来的生活做了一个告别。那个印度医生被诬告的时候，她最后终于站出来，为他洗清，站在整个白人社会的对立面。在未来的生活里面，你的有些初恋肯定是会被放弃的。这跟我们以前传统社会里从从头到尾的观念是有变化、有冲突的，因为原来的初恋是建立在原来的期待、原来的生活里，变化的生活使你成长，使你打开，使你不断地延伸。在这个时候，你对这个世界有了新的感知，你再真正地进入到更有深情、更有内心深度的情感。这在我们未来生活是非常常见的。\n几十年前我们中国还是一个农业社会，人只在一个单一性里生活，我们认定的情感轨道就是从头到尾、白头到老。不光是情感，其实我们整个生活也是一元化的，除了种地还是种地。今天就完全不一样了，今天在你的这个生活之外还有别的生活。什么叫远方，什么叫生活在别处，今天我们在这个地域上是大大地拓展了。拓展以后，你的初恋和分手放在这个新的历史语境里面的意义变化了，价值也变化了、所以，我们一方面要特别珍惜初恋，另一方面要特别珍惜分手。我觉得不适合把分手作为一个特别悲情的东西。当然，在今天的社会里面，有的初恋对你来说可能是一个悲剧，有的初恋对你来说可能是一个永恒。希望大家会有一个新的认识。\n等待\u0026错爱 一、等待 🙈 不等待的人其实没有真正的幸福。\n首先看等待。在我们传统社会是没有等待这个问题的，一个女孩子十六岁左右就结婚了，女大男小，男的十三四岁也就结了，等于还没成人就在一起了，所以没有等待的问题。现代社会变化就大了。前两天我在上海做讲座的时候，婚姻登记处的主任提供的资料，现在上海金山区的平均结婚年龄达到了35岁。我听了觉得有点震惊，因为以往一般都是在二十六七岁左右，一下子推后了这么长时间。二十三四恋爱，二十六岁结婚，这可能是原来的一个节奏。现在是30岁以上的话，意味着你要有七八年甚至是十年的恋爱，然后才能进入婚姻。这里面就有一个等待。\n还有一种等待，就是没有恋爱，我一直在等待一个真正的爱情。今天跟以往不一样，15岁开始基本上就接收各种信息，经历各种社会的变化，跟传统对比起来，已经进入了一个成人的社会里。尽管是在学校，但是在另外一个意义上说也是一个社会人了，然后你就开始在这么长的一个时期里游荡、成长。如果是站在一个传统的心态上，我们对这种等待就特别焦虑，很多人就觉得我怎么还是个单身狗，我怎么还没遇到自己的真爱。22岁没找到，到了25岁、26岁还是一个光棍，30岁以前应该生孩子了，结果什么都没有，倒逼过来，把自己搞得很紧迫。这就是今天社会里面的一个现象。恋爱的人需要等待，还没有恋爱的人也需要等待，不等待的人其实没有真正的幸福。在等待的过程中，其实我们加深了对社会的认识、对文化的认识，也是加深对自身的一个认识。在建立一定的个体判断之后，然后再去恋爱，这个恋爱内在的质量就比较高。\n我们看日本导演小津安二郎，今天讲的所谓的大龄女青年的婚姻，在他的电影里面是经常会出现的，比如《晚春》，特别是《麦秋》。 《麦秋》里面的纪子28岁了，还是一个人。有人给她介绍一个很有钱的男人，43岁，她不想跟他见面。为什么不想跟他见面呢？电影后面，最后她真正决定跟另外一个人结婚的时候她才说出来，说一个男人43岁还一直在社会上不定、游荡，让人心里面总是觉得不放心。 就是这么一个女孩子，她哥哥的好朋友被派到日本东北部远处的一个医院去当医生，最后的时刻她代表全家去给他送礼物。那个医生有个妻子，去世了，留下了一个小女儿。医生的妈妈忽然跟她提起，说心里一直有个梦想，如果她能做他儿子的媳妇，对她来说是多么幸福。这个婆婆其实只是说一说，因为儿子要走了，最后把心里话说出来。结果没想到，纪子听了以后，没有丝毫的犹豫，一口就答应下来了。回到家以后，全家都反对，但是纪子就说，他妈妈这么一说，她心里就觉得这个男人是自己一生可以相伴的人，所以没有丝毫犹豫就答应了。\n 纪子：可是，谦吉的妈妈对我谈起这件事的时候，我就自然而然有了这样的想法。不知怎么的，我突然感到我能得到幸福。——所以我就答应了。\n志夏：……可是，你去了那边不后悔吗……？\n纪子：我想不会。\n康一：一定不后悔吗？以后不会觉得可糟了吗？\n纪子：不会！\n 等待等待，要等待到你真正的那个人，而我们今天的人是经不起等待的。在焦虑中，忘记了自己的发展，好像我在等待的人他也在等待，就这样丧失了自己大量的生命的成长。本来这个时间你可以好好地去学学摄影，去听听音乐、看看话剧、弄弄电影，出去旅行，这是历史在这个阶段给你的一个机会，但是很多人不认为这是个机会，认为是自己的一种灾难，或者说是自己的一个痛苦，这就错位了。\n\n二、不期待 🐱 不期待就是最好的等待。\n真正能够获得幸福的人，他首先自己要活得很幸福，他在一个人的生活里面也能够过得很丰富、很饱满，然后才会看到另外一个相等的人，才能在这个过程里面彼此感受、彼此鼓舞，而不是说一个人特别稀缺，一个人特别地紧迫，认定别人是你的救星。很多人在半路上不等了，在脑子里已经预设了一个节奏（浪漫、才华、能力、稳妥），到了什么年纪就接受什么，所以自我打折的情况特别多。真正能幸福的人首先自己要活得很幸福，很饱满，去吸引其他的人，而不是很稀缺、紧迫，期待别人是自己的救星。这样的情况下会产生大量的问题，比如说觉得差不多了，这个人还可以，那就行了。其实你不知道在几年之后有另外一个人，真正让你幸福的人在远处会出现，但是你完全不知道，已经放弃了。我们今天特别缺乏一种等待的能力，所以离真正的幸福就很远。其实一个人在这个世界上就是两个主要的目标，一个是找到一件在这个世界上自己最喜欢的事情，而这个事情正好又是有社会价值，在这个时代是有意义的；\n另外一方面就是找到一个人，这个人跟自己在情感上、精神上是特别契合的，能够一起往前走的，能够“1+1\u003e2”、能够产生精神迸发的这样一个人。在很多情况下，尤其在青年时期，先找到那个事情是最重要的，你把那个事情找到了，然后那个事情里边有人，比如说两个都是喜欢电影的、喜欢艺术的、喜欢探索的，会在这条路上相遇、一起走。人是不同的，在不同的路上你会遇到适合你自己的人。但现在很多情况下是颠倒过来了，在年轻的时候把找人变成了自己生活的一个主题，忙着找人，事情根本就云里雾里，这样的话就使我们在生活里面产生了巨大的朦胧，巨大的失去。所以在今天，有时候可以说不期待就是最好的等待。什么叫不期待呢？就是说你不要去想找那个人，先把整个的精神都放在事情上，然后在这个过程里面，人就出来了。\n我很喜欢的一个电影叫《窈窕淑女》，乔治·库克导演的。电影里那个教授希金斯，他说自己特别不喜欢女人，他觉得女人又烦又啰唆又任性，稀里哗啦一大堆缺点。这个音乐片里面他那段唱词，把女人形容得一塌糊涂。他自己专心致志地搞他的语言学研究，好像是一个屏蔽了女性世界的人。他是一个很专业的语言学家，有一天他突然对在街上卖花的伊莉莎有兴趣了。伊莉莎说话很粗野，方言口音很重，所以他就想把她作为一个试验品，对她进行语言矫正，把它变成贵族语言，让她变成一个淑女的风格。所以希金斯后来就跟伊莉莎订了一个契约，训练她，开始一个字一个字教发音。两个人一天一天在一起，一天一天互相教和学，感情渐渐地、不知不觉地就出现了。所以你看伊莉莎爱上希金斯了，希金斯其实已经感知了，但是他自己不知道。所以到最后伊莉莎很生气，跑掉了。这个时候希金斯每天看不到她，感觉不到她的气息，才忽然发现自己离不开她了。影片最后两个人走到一起去了。\n 没有你树上照样结果，海水照样拍打海岸，没有你诗人们还会生活下去，西班牙的雨照样下在平原上。没有你他们都不会受影响，我也一样。\n 这个电影是非常好的，它不是那种恋爱模式。很多生活里面都是先确定一个恋爱，然后按照恋爱这个模式一点一点地进行。但这个电影不是，爱情其实是在悄悄地发生，它是在事情里面一点点一点点地发生。\n**一旦一个事情把它挑明了说是爱情的话，立刻爱情的程序化就来了，送花、请吃饭、一起干什么，会人为建构出来一个生活的模式，有时候还达不到爱情，但是已经把它建构成爱情了。当然也会产生一种情况，就是你建构起来，经过努力，确实也会发生感情，但是很多情况下会人为地变成一个——就像我们今天大城市吃的水果都不是自然熟的，像芒果，都是在树上还是青的时候摘下来了路上催熟的，所以那个味道、那个香甜度比原生的差得远了。今天很多恋爱里面都是催熟的恋爱，都是没有真正地达到爱情的那个成熟度，但却把它约定为爱情，然后去进行。\n\n三、单纯 🐣 等待使人变得可笑，但又使人在单纯中成长 。\n等待中的人有时候会爱上一个人，这个人对他没反应，但是他等待，他努力，所以他整个生活的中心就变了，他变得在常人看起来很可笑，做出一些傻事来。但是这个傻事里面，他内心又特别地美，人就在这个纯度里面成长。成长到最后，他没有得到那个人的爱情，但是会意外地因为自己的这种单纯被别人看见，会在无意中实现真正的他应该找到的那个爱情。\n德国作家黑塞有一篇不太被人注意到的小说，但也是他的一个名作，《婚约》。《婚约》里面一个布店的伙计叫翁格尔特，个子长得高，但没什么其他特长，他爱上了来店里的16岁少女迪尔兰姆。迪尔兰姆根本就不喜欢他，但是她享受他对她的爱，翁格尔特就被她鼓舞，觉得她好像不拒绝，所以就报名参加教堂的唱诗班。人家都是小孩子，但是翁格尔特自己也跑去。那些小孩子也知道他的来路，都开始让他发生各种搞笑的场景。比如说合唱的时候给他一个箱子垫着，让他变更高，像个电线杆子一样的，显得特别突出，看着很可笑。结局的时候，他们唱诗班郊游，一帮孩子就故意地恶作剧，让翁格尔特跳起来抓着那个树干，离地好远。翁格尔特胆子不算大，但是一看迪尔兰姆在这里，一下子来了劲儿，被大家举着到了树上，抓着树枝，高高地悬着，底下的人高兴得不得了。一会儿悬不动了，但底下越发高兴。摔下来的话会很疼，又不敢摔下来，一开始假装笑，最后慢慢地哀求大家把他接下来，大家都不理他，都在笑。这时候翁格尔特才发现，笑得最开心的就是那个迪尔兰姆，心里一下子知道了，手一松，掉下来了，浑身摔得酸疼。本来这是一个很悲剧的结局，但是另外有个姑娘过来把他扶起来了。这个姑娘叫波拉，平时翁格尔特根本就不注意她。波拉扶着他，非常地同情他，心里也心疼他，觉得他被大家戏弄。这时翁格尔特才深深地感觉到，原来这样的女孩子才是自己应该一起生活的人。\n 翁格尔特对这次郊游早就寄托了很大希望。这次他甚至有勇气询问迪尔兰姆小姐是否也去，并且问话时居然没有口吃。“是的，我当然去。”漂亮姑娘平静地回答，然后又添了一句：“刚才您不难受吗？”说着忍不住想笑，于是不待他答话就急忙走了。\n 一个人在这种等待里面，确实是让你过了不一般的生活，变得有目标了，但这个目标实际上是你的假目标。如果翁格尔特真正地娶到了迪尔兰姆，那也是个大悲剧**。但是在这个过程里边，人避免了社会的各种复杂化，心里面就形成了一种非常清澈的状态，渡过了我们人生可能会特别分化的一个阶段。** **波拉为什么会喜欢翁格尔特，就是看到他这种透明性，看到他的这种单纯性，所以这两个人走在一起。**\n\n四、错爱 💫 等待本身听起来很优美，但实际上可能也有很残酷的一面 。\n但是，等待中也不仅仅是好处，等待中也许隐藏着你人生中一个特别大的错爱。你很爱这个人，觉得这个人怎么怎么好，但实际上正因为你没有跟他真正地有一个比较深度的共在的空间，或者这么一个时间，所以误看一个人的概率确实是相当地大。像我们以前教过的学生，她在上海，跟北京的一个男生网恋，恋得太热烈了，每天晚上打电话，特别好，特别依恋。差不多半年了，终于到北京来见个面，一见面，浑身冰冰凉，一看一点都不喜欢，那感觉完全不一样，伤伤心心地回去了。这种情况也是很多的，所以我们说等待本身也是需要一个非常强的自省的过程。\n美国作家舍伍德·安德森写的《曾经沧海》，艾丽斯，很单纯的女孩子，结果跟内德这么一个人爱上了。这个男孩子后来跑到芝加哥打工，两个人约定以后一定要回来，一定要在一起。艾丽斯就在等他，脑子里想象内德天天怎么思念她。内德到了芝加哥以后，一开始还写些信，后来就没音信了。艾丽斯总是自我设定，她总是想我是一个好女孩，我一定要等他，我要做个好女孩——这已经不是对对方的期待，而是对自我的认定。到她二十几岁的时候，遇到一个中年绅士，三十多岁，这个绅士就请她去喝咖啡。她想我是一个现代女孩，去喝咖啡不要紧的。后来喝了一天又一天，喝着喝着，就忽然发现自己有点依赖性了，她觉得这样下去的话就会发展出另外一种关系来，她忽然想起来我是一个好女孩，我不应该这样做，然后就断然不跟他喝咖啡了，天天晚上在家里看书、干活，一直到了二十七八岁。有一天电闪雷鸣、暴雨如泻，一下子人产生一个庞大的欲望，在房子里面把自己的衣服全脱光，然后冲入狂风暴雨，沿着那个城市的街道狂奔，看到那边有一个男人走过来，大声地喊“你要等待我”。\n 艾丽斯开始奔跑起来。一种狂野和绝望的感觉抓住了她。“我才不管他是谁。他也是一个人，我要靠近他。”她想。也没停下来思考一下自己的疯狂举动可能会产生什么后果，她就轻声开口了。“等等！”她喊道，“别走开。不管你是谁，请你一定等等。”\n 一个人处在这种崩溃之中，但是这个崩溃也是一种猛醒，人在自己的约定里边这种被压抑的痛苦，终于像火山一样爆发出来。所以她的这个等待是她一生中最大的悲剧，为了证明自己好而去坚持一个虚无的东西。两个人在谈恋爱的时候，经常会用这种自我想象来相互对待，其实内心积郁的这种艰涩越来越多， 这种坚持、这种等待会使人导入一个非常倾斜的方 向，人为了不倾斜勉强支撑自己，要花费太多的生命力，终于支撑不住的时候，就轰然倒下。古代社会没有别的选择，像什么薛仁贵征西，王宝钏在窑洞里等他17年，我们就歌颂这种。等待本身听起来很优美，但实际上里面可能也有很残酷的一面，对我们生命来说，可能也是一个巨大的陷阱。\n\n五、预设 ☄️  错爱往往就来自你的想象，来自你对爱人的那种设计。\n错爱有时候的来源不一定是对方不好，而是我们自己脑子里的前置图景有问题。其实我们每一个人通过自己的成长过程，小时候的阅读过程，会在心里建立起一个理想爱人的基本想象。当你遇到一个人的时候，这个人如果是高度贴合你原来的那个想象，你会迅速地爱上他。但是问题就在这个想象，你要实现的爱情往往不是真正地爱那个人，而是爱自己对于爱人的那种设计。这个人其实不是这样的，可能只是其中一部分跟你的想象有点小叠合，但你会完形，就像格式塔心理学里提到的，你会把小小的一点给它构造出来一个更大的整体，然后得出一个结论来：“他是一个……”，其实不是的。在很大程度上，错爱往往就来自于这种脑子里的前置图景。\n我们看马克·韦布拍的《和莎莫的500天》，这是非常有名的一个电影。男主人公汤姆正在开会的时候，看莎莫进来了，汤姆一看到这个女孩子，忽然觉得她就是自己一直期待的人，看她的样子，非常独立。如果他看到了其他看不见的那部分的话，他会迅速地离开她，但是他看不见。他看不见什么呢？他看不见莎莫很小的时候父母就离了婚，所以莎莫内心里面对婚姻是一点都不相信，对爱情也是一点不相信的。莎莫有一个本事，她喜欢一头长发，她的头发长得非常好，但是她最大的能力是想把它剪掉的时候，就丝毫不犹豫地把它剪掉，这个剪掉的能力很可怕。很多人在现代社会里面，告别的能力远远大于相爱的能力。但汤姆不知道这些。一次唱歌，莎莫唱了一会儿以后忽然就让汤姆去唱。结果汤姆唱的歌莎莫很喜欢，两个人就在这个瞬间忽然觉得靠得很近，所以后来走到一起。但是之后就不一样了，因为莎莫本身其实是不相信爱情的，不相信爱情的人有一个大的特点，就是恋爱的时候他可以一会儿很热烈，一会儿也可以无所谓，这种起伏不定对汤姆来说是非常不适应的，跟他的理解是完全不一样的，所以他就完全不明白为什么会这样。这个电影结局，最后莎莫毅然跟汤姆分了手。分了手以后，汤姆以为她是一个不会结婚的人，没想到她很快就和一个不爱的人结了婚。对莎莫的世界来说，结婚、恋爱不是一个要深情投入的问题，本身就是一个虚无缥渺的东西，这是汤姆完全不了解的。\n 我曾经做过一个梦，我在飞。开始的时候我只是跑，那么快，就像超人。渐渐地面变成了陡峭的岩石。我跑得太快了离开了地面。我飞起来了，很奇妙，奇妙且真实。感觉很自由，很安全。然后我明白了，我是一个人。然后就醒了。\n **我们现代社会里面人是彼此看不清的、碎片化的，我们看不到一个完整的人，都是瞎子摸象一样地以一个片段去判断这个人。**用这种格式塔心理的完形，你充满了失望。这个失望就在于你的前置图景跟这个人后来呈现出来的东西越来越不一致。你又不能不爱，不能说把一个人完全看清楚了再跟他去怎么样，完全不可能的。你只有跟他爱起来才能发现他，你不跟他爱起来就根本看不见完整的他。我们现在就处在这么一个大的悖论里面。所以有些人就感叹，怎么这个男朋友以前跟现在完全变成两个人了，其实他就是那个人。\n\n六、成长 🌌 不怕错爱，就看你能不能在这个过程里让自己更坚定，让自己不抱怨这个世界。\n但是，既然有了错爱，有时候会出现一个东西，就是对错爱的坚持会完成个人的自我拯救。在大错中你会发现更好的自己，特别是坚强的自我。\n我们看意大利作家皮兰德娄，他是一个著名的剧作家，但是他也写小说，他的《西西里柠檬》写得特别好。西西里的一个长笛手叫密库乔，是一个很朴实的男青年，他爱上了苔莱季娜。苔莱季娜很有唱歌的天赋，但是家里很穷很穷，学习音乐需要很大一笔钱。你看密库乔，他把自己全部的家产，甚至遗产、房子卖掉，资助自己的恋人去学习。最后苔莱季娜到了罗马，变成一个特别著名的歌唱家，五年之后她都没有回过西西里。密库乔要看一看自己的未婚妻，所以带着西西里岛最好的东西，也是表达爱情最好的东西——柠檬——去罗马看他的未婚妻。到了以后，人家一看他乡巴佬的样子，就把他接待到剧院的厨房，让他在那儿等。外面的剧场人声鼎沸，都是喝彩声。后来他从外面悄悄地看了一下，看到他的未婚妻在那唱，满面红光，非常有风采。中间有一个特别短的间隙，苔莱季娜冲进来要吃点东西，看到他说，哦，你来了，我太忙了，接着又冲到台上去了。这个时候厨房里的那个厨娘看着密库乔就特别地同情，因为外人看起来就知道他们之间已经是完全不一样的人。所以后来密库乔听到外面又是那么一种喝彩声，巨大的声浪，他自己也明白了——这时候怎么办呢，抱怨？愤怒？或者同归于尽？负面的情绪一出来都会这样，但是你看，最后密库乔默默地接受了这一切，把柠檬留下，祝福自己的女朋友能够以后有甜蜜的生活，很有礼貌地跟厨房里的人再见，然后就回故乡去。\n 他知道自己为自己的女友找到了道路，而且使她能够踏着它前进，可是如今她走得那么远，而他依然原地没动，只是在一个小城广场上每一个礼拜日吹奏长笛的小人物，早已经追赶不上她了。\n 他知道自己的生活是在那里了，而不是在这里跟女朋友一样的道路。原因就是他对生活的理解单纯、简单，单纯、简单的人面临这种大的痛苦的事情的时候，他才有承受力。如果一个复杂的人就不行了，他有方方面面的欲望，各种各样的原因都会把他压垮，人就崩溃了。不怕错爱，就看你能不能在这个过程里面让自己更坚定，让自己更清晰，让自己不抱怨这个世界，能够更加地积极地有勇气去面向未来的生活，所以我们说错爱对人来说很有意义。**错爱这个问题在我们当代社会里面几乎每个人都会遇到，你从中学一直到读了大学、工作，一定会遇到各种各样的人，然后你会把他想象得很好，你会付出很多，表面上是一个负面的东西，但是你在错爱中实际上是一天一天地在成长，一天一天地在打开。**我们人生不可能每一步都踏对，不光是情感，试错就是成长。在生活里面一般很难指望从初恋一下就达到最后的婚姻，这种概率确实是很小的。但是我们也不畏惧去恋爱，不畏惧去爱一个人，因为我们知道在错爱中我们会有自己的收获，会相信有自己的力量，而没有错爱，你是不能体会的。所以我觉得这也是错爱对我们现代人来说的一个很高的价值。\n前任\u0026现任 一、前任投射 🕯 前任这么一个命题之下其实概括的是生活 \n在我们现在的生活里面，有前任特别普遍，不像传统社会，父母的决定就是终身。现代社会是一个流动社会，所以人的情感像河流一样，在不同的地段里面，在不同的时间里面，都有起伏，都有变化。作为一个个体来说，我们是很难去控制的，很多情感都变成了过去，前任就变成一个普遍存在的、特别重要的社会现实。\n加拿大的电影《野蛮入侵》，这个片子获得奥斯卡最佳外语片奖，里面其实描述的就是这样一个现实。一个大学的历史教授雷米，他和儿子的关系相当冷淡，因为儿子看不惯爸爸的生活方式：爸爸跟妈妈离了婚，而且前面还有三个情人。儿子是一个什么人呢？儿子是一个搞技术的，所以他对生活的目的性和控制性很强，这样的情况下，他很不满爸爸这种无效的生活，因为情感上会特别容易产生一个一个的泡沫。他也不能容忍爸爸对妈妈最后的分离。后来得知爸爸得重病进医院了，这个儿子终于坐飞机来看望他。来了以后一看，病床特别紧张，爸爸睡在过道上。出于父子这么一个天然的情感，儿子有钱，后来就走后门、送礼，硬是把原来装杂物的房间改变成一个单人病房，把他爸爸安置到这里。这时候他逐渐地靠近了父亲，才慢慢理解他。你想想，他父亲生活的时代，经历了存在主义、女权主义、嬉皮士，稀里哗啦那么多运动，社会是在不断地变，爸爸也是特别真切地生活。 真切的生活里面，毫无疑问，他就跟这个时代的种种风流变换有一种深度的契合，然后每一个阶段又和不同的女性建立起一些亲密的关系。儿子逐渐逐渐地明白了，他才知道自己其实对爸爸的理解太简单了，太抽象了。后来他想让爸爸去世前能完满一点，就把爸爸三个前女友都叫到一起，陪同他爸爸最后这个生命阶段。这种容纳性是特别可贵的，包含了我们对现代生活的理解。我们对人不像神学时代那样有非常极端的唯一性的要求，也不是现代主义阶段对人的那种终身价值的要求。我们作为一个个体的人，面对这么庞杂的一个时代变迁，一下子对人的宽容度加大了。\n 我们什么都经历过，分离主义者、独立主义和主权主义、主权合作主义者。我们被存在主义启蒙，读了萨特和加缪。读过法农后变成反殖民主义者，读了马尔库塞又变成了马克思主义者、列宁主义者、托洛茨基主义者。读了索尔仁尼琴之后，想法又变了，成了结构主义者、情境主义者、女权主义者、解构主义者。还有什么主义咱们没有崇拜过？\n 所以这部电影表达出来的那个东西，尽管看上去让人有点伤感，但是在另一方面又使人面对我们的时代生活时增添了很多宽度和力量。很多时候我们不接受那种不完美的生活，更不用说我们去爱一个不完美的生活。在这种电影里面，如果你细细地体会它，因为一般的人不会把生活变得这么复杂，所以如果你能理解这样的电影，你在迎接生活的时候，那个接受度、理解度就好得多。我们说在前任这么一个命题之下其实概括的是生活，概括的是时代所要求以人为尺度，而不是以某种原则为尺度、以某种神圣东西为尺度，去对人造成生活的一种苛评。\n\n二、接受前任 💊 一个人如何接纳自己的前任 \n第二个问题，一个人如何接纳自己的前任，这是对你生命的一种衡量。前几年我回原来在云南插队的那个傣族村，回去以后一切都很新鲜，变化很大，其中有一个当地农民跟我说的事情，我特别感慨。\n原来一起在傣族寨子插队的时候，有一对昆明来的知识青年，他们年龄比我们大。女的是昆明那个学校的校花，很漂亮，男的很会说话，然后两个人成了一对夫妻。但是后来矛盾就越来越多，经常吵架，还不断地互相控诉如何如何，最后就离了婚。我前几年回到那个村寨的时候，他们就告诉我，每年的火把节和春节，总是有三个人一起来到这个村寨。这三个人是谁呢？一个是当年那对离了婚的夫妻，还有一个人是那个女的后来的丈夫。就这样三人行，每年来，看着他们特别地和谐，特别地融洽。但是我自己就想，如果我是那个前夫的话，这种事情我是做不到的。但是他们对于生活的接受承担，对生活最后的那种修复，可能更具有一种朴素性，就不那么苛刻。你能容纳这样的情境的话，你的生命就比较完整，你就会对以前的走过有一个非常非常有温度的保持，不然就变成一团糟的一个过去。文学里面也是这样。\n台湾有一个作家吴念真，他的小说集我是特别喜欢看，我有时候给研究生都一人送一本。\n《这些人，那些事》里面收了大概15篇左右他的短篇小说，这里面有一篇《重逢》写得很有意思。《重逢》的男主人公是一个出租车司机，他原来是个小老板，在他当小老板的过程当中，有一个跟他一起打拼的女友，非常辛苦。公司后来办得有点起色了，人的欲望和野心就放大了。这个男人后来遇到一个女客户，有资本，而且会提供大量的订单。 我们人的脑子有时候不是太稳定的，随机性很强，他本来跟女友关系很好，但是看到这么一个富女人，会提供这样的商机和发展，女人也比较热情，两下一晃动，跟着那个富女人跑掉了。他的女友很伤感，最后就分开了，再也没有见到。但是没想到，这个小老板后来跟女客户关系又破裂了，公司越办越办不好，所以干脆做了一个出租车司机。一次在台北机场等候接客的时候，他忽然看见这次来打车的人原来是他以前的女友，心里吃了一惊，但正好排到他，又不能回避，幸好出租车里的灯光还比较幽暗，他希望前女友认不出他来。前女友上了车以后就不停打电话，一会儿告诉美国那边的家里，说我已经到了什么什么，一会儿又打电话给澳大利亚的闺密，说我最近怎么怎么样。这个男人一看，幸好她在忙，如果一静下来盯住他就麻烦了。车子终于开到目的地，原来是一个医院，实际上这个女人回来是因为她的父亲生病了，她回来看望。要下车的时候，女人忽然转身对他说，我一路上把我自己的情况都说清楚了，你难道就一句话不说？这个司机心里一下子才——非常非常地感动，但是也非常伤感。你看这两个角色，男的显得有点小自尊，他的女友，按道理说，她是被伤害的，但是她看到前男友以后，她对他的那种温情，还是把自己心里的话、把自己的生活都愿意告诉他。所以最让人感动的就是这个前女友。这就显示出人生的一种宽厚，一种力度，一种心里面的善良。 还有我们特别喜欢的电影《卡萨布兰卡》。\n 整个世界快倒下来了，我们却挑上这个时候来恋爱。\n 最让人感动的就是那个里克。两个人在巴黎那么热恋，女友伊尔莎突然就消失了，他一个人在卡萨布兰卡这么一个地方开了个酒吧。但是没有想到，前女友伊尔莎和维克多夫妻俩会来到这里，到底怎么办呢？这个电影特别让人感动的就是最后，那么宝贵的通行证，里克给了伊尔莎和维克多。有时候看到自己这么挚爱的前任，爱情不是拥有，而是变成了一种离开，变成了放下，这是更高的一种爱。\n\n三、回头往复 🎈 前任如果再变成现任\n还有一个问题，我们古代社会，或者我们的民俗、我们的惯性里面，说好马不吃回头草。这是很害人的一个东西。很多情感，一回头其实是非常好的，因为两个人都有教训，两个人都有对事情的一个深度体会了，再在一起就会比以前爱得深得多，相互的理解也好得多，但是我们就很难接受。\n今天为什么这个问题很重要？我们在后面的生活里面，人需要一次往复，甚至是好几次往复，然后才能有一个更深切的互相理解，更好的互相珍惜。如果我们永远是从零开始，可能你的错误是不断不断地重复。有时候前任如果再变成现任，其实是一个非常值得珍惜的过程。\n\n四、回忆前任 🖼 对前任的评价，衡量着每个人自身的善恶 \n其实你如何评价前任，是衡量每个人自身的善或者恶。我在学校听了很多人关于前任的各种各样的话，最后我体会到一点，不断地说前任的好处的人，一般心里都比较善。那个不断地把前任说得一塌糊涂的，问题就大一些。为什么呢？一个前任是你的一段生活，他身上的某种美好的点是很难把它否定的，总是有某一些点、某一些东西让你们走在一起，这是非常珍贵的。在这个阶段，你们的相爱实际上把心灵深处、生命深处的某些东西开放了、打开了，但有些花儿你不可能让它一年四季全开，所以后来可能枯败了，那也是一回事，是你生命过程一个必不可少的部分。一个人对对方的理解，对对方的感受，到底是像向日葵一样感受热度、感受美好，还是像非常纠结的荆棘一样，总是勾起一些刺痛的东西？这也是一个非常大的区别。\n我们看乔伊斯的小说《逝者》，老人加布里埃尔参加一个聚会，本来是一个非常喜庆的夜晚，散场的时候他在楼下等他的妻子格莉塔。结果格莉塔在梯子上面忽然站住，里边响起了一阵音乐，她脸上浮出一种非常难忘甚至很感伤的神色。后来加布里埃尔心里有点惊异，但是又有点直觉。回去时坐在马车上，他就问妻子，说这首歌是不是为你而写？是不是有人为你而唱？结果格莉塔一听，心里面哀伤，说是，当年他是为我而死。那个小伙子叫富里，非常爱格莉塔，大雪天跑到格莉塔家楼下去弹唱，结果最后大伤风、大感冒，肺炎死掉了。所以格莉塔一生难忘这个人，今天听到这个音乐，心灵深处的往日都回来了。加布里埃尔坐在马车里面，回到家里，最后睡下。这时候他看着旁边睡着的妻子，心里感到特别悲哀：一个人曾经为她而死，他作为她的丈夫，一生中扮演的角色是多么可怜，也就是说这个女人一生中心里在爱着另外一个人。加布里埃尔作为一个男人的情感，这时候表现得特别地痛切。夜晚的雪下得很大，整个四边寂寂无声，只听见雪声在落。而这个时候永恒打开了——加布里埃尔终究作为一个非常善良而且有智慧的人，他一辈子从来没从这个角度去看这个世界。而这个时候，他忽然感觉到茫茫宇宙，一个人生生死死，每个人在这个大生活里面都是一个微小的来来去去，每个人都有自己的生活，有自己的心路，都是真实地在活着。从一个更大的爱里面、更大的对生命的理解里面，一辈子跟这么真实的一个女人在一起、跟这么有感情的一个女人在一起，忽然觉得心里面想流泪，非常地感动。那是在另外一个层面上拐了一个弯，然后又理解了自己的妻子。也就是说，他再也不会想在妻子的心里把前任去除掉，然后自己去独享这样一份感情**。它超越了拥有和失去，超越了这种唯一性，有一个更大的对世界的爱，更大的对生命的爱。这时候我们可以看到加布里埃尔心灵深处的那样一种温暖就打开了。**\n生命里面，每个人都要过很多关，有时候我们封闭在一个幸福里面，以为幸福就是这样了，但是后来才遇到一些意想不到，然后才能打破自己原来的那种封闭，打破自己固有的狭隘。当然我们可以说，也幸好有这样一次发现——加布里埃尔后来在凌晨雪夜的睡眠里去世了，他不是怀着怨恨去世的，而是怀着这样一种宽大的情感去世了。\n\n五、蘑菇成长 📝 为什么我们今天这个社会有那么多的前任？\n有一个大问题，年轻的时候恋爱，从整个人生阶段来说，又好又不好。社会学上把这个阶段定义为**“蘑菇阶段”**，什么叫蘑菇阶段呢？**就是说你刚毕业，没什么身份，没什么影响，也没什么资源，你就像一个蘑菇，放在阴暗的地方，随便你怎么生长，长得起来你就很优秀，长不起来就溃败。年轻人正好是恋爱的季节，但是正好又是一个蘑菇时段，所以这个时候相互之间就会产生很多期待和失望。**那个蘑菇看着就是不像样子的，到底能不能最后长成一个很高大的什么，都不知道。而这时候人们对自己的期许又很高，所以期许和现实就有非常大的差距，很多人看着就不太着调，不像一个有远大前程的人。\n一些著名的作品都写这个问题。像美国著名作家耶茨，耶茨是善于写孤独的。 他的代表作《革命之路》里面，女主人公爱波是学戏剧出身的，后来和弗兰克认识。弗兰克在二战末期当过兵，因为当过兵而光荣，给了他很多光环，后来上了大学，出来以后总觉得自己跟别人不一样。爱波实际上也是这样一个人，她觉得自己的追求也不一样。 这两个人在一次酒吧的舞会上互相一看到，交谈了没两句，就发现非常对得上，然后就结婚了。结了婚以后要开始追求新生活，结果没想到还没开始追求，有孩子了。原来他们计划把这个孩子再往后排好多年。到底要不要这个孩子，爱波实际上心里面也犹豫，但是弗兰克明显地就不想要。但是女性就是这样，我要不要是我的事，你说不想要那就太伤人心了。最后孩子生下来了，后来又生了一个，所以爱波一下子角色就被定位了。女性一被定位，她就没办法到社会上奋斗了。弗兰克变成在社会上打拼的人，但他在中层岗位上一直升不上去（一个很有能量的人一直升不上去，他就会充满了调侃型，因为他没有地方施展）。最后爱波一看这样不行，她一定要叫弗兰克跟她一起，把房子卖掉，去巴黎。她去联合国科教文组织在巴黎的那个地方做翻译，可以挣很多钱，让弗兰克不要干活了，就在那写作，她认为他是一个可以当作家的料。弗兰克一听，好，好像两个人又要准备转折了。刚要转折，突然弗兰克被上司叫去谈话，提升他了。男性有强大的权力欲，追求权力、追求地位，非常想往上升，所以很多人是表层的小资、表层的浪漫，因为他还没有被升；但如果一旦要被升了，在很多情况下，他的本性就暴露出来，他就不由自主地陷入到现有的秩序里面去。所以弗兰克嘴皮上说还要去巴黎，实际上一听说要升自己，脑子里就千方百计地想办法，把去巴黎的事取消掉。他好像遮掩得很好，因为爱波又怀孕了，他就说先把孩子生下来，以后我们再怎么怎么样。但女性的直觉感是很强的，爱波心里一下子就彻底地绝望了，就知道这个男人实际上是完全没有一个向远方的能力，所以最后自己精神也垮了，后来跟一个一直在追她的男人也有了一夜情。弗兰克其实跟他们公司的一个女的也有一腿，反正整个生活就乱掉了。到结尾的时候，爱波终于决定肚子里新怀孕的孩子不能要，因为这代表着跟弗兰克的感情彻底的决裂，所以她买了一套东西给自己流产，结果就大出血死掉了，就这样一个结局。\n所以我们说，在这样的一个蘑菇阶段，人是特别混乱的，也特别容易失望，而这个时候需要的一种坚强的力量又很难达到，因为人生阅历还是特别地少，所以我们经常就会有一种放弃、躲避，在这个过程里面，爱情不断地消失。\n我们看伍尔夫的《达洛卫夫人》，这也是特别著名的一个小说。克拉丽莎年轻的时代，她的恋人是彼德，那个彼德多清新哪，每天早上从野地里摘出带着露水的野花，唱着歌来到克拉丽莎的窗前来看她。所以克拉丽莎特别开心，每天晚上盼望他来。但是最后要决定婚姻的时候，克拉丽莎没有嫁给他，嫁给了城里的一个贵族达洛卫。因为彼德一直就是一个很新鲜的小蘑菇，一直没有自己的前程。后来彼德一个人开始去航海，去远行。一直过了30多年，都老了，50多岁了，达洛卫夫人举行一个沙龙聚会，彼德正好回伦敦，正好来看她，他们两个人才相见。曾经的恋人，30多年以后见面，克拉丽莎就特别想知道他怎么生活的。彼德坐在沙发上，手里面玩弄着一个折刀，这是到处旅行的人养成的一个习惯。克拉丽莎一看他这个样子，心里面就觉得幸好当年没嫁给他：他这个流浪汉的气质。但是当客人都走光了，她开始把一盏盏灯都关掉的时候，才感觉到自己的生活就像一个骷髅，不断地被时光的虫所吞噬，每一天都差不多。她觉得当年如果是嫁给了彼德，那生活完全是另外一个样子，完全是另一个世界的打开。\n 现在她不愿对世界上任何人说长道短。她感到自己非常年轻，却又难以形容地老迈。她像一把刀子，插入每件事物之中，同时又置身局外，袖手旁观。她看着过往的出租车，内心总有远离此地，独自去海边的感觉。她总觉得，即使活一天也极危险。\n 我们说为什么前任会大部分出现在蘑菇时期？这个时期彼此需要特别大的支持，特别大的相互力量的输送，但是这个时候又特别地不明白，所以这个时候就会产生那么多的问题。\n\n六、自我生活 🎏 这是一个人生命不断向上发展的一个必然\n最后我们可以说，在前任这个问题上，我们一定要珍惜，不要把它作为一个负能量存在，它是你生命中特别宝贵的一段，特别值得珍惜的一种存在。 你只有珍惜前任，才能相遇更好的现任，这是一个人生命不断向上发展的一个必然，它是人生不断地获得新生的特别重要的一种我们自己的抉择。\n我们看台湾电影《一页台北》，男主人公小凯的女友去法国巴黎留学了，小凯的父母是个开小餐馆的，所以他自己的身份跟女友的身份立刻就拉开了差距。但是小凯为了追上女友的前进，每天干完活就跑到诚品书店的分店，跑到那里去看法语书。他一定要抓紧学法语，将来跟女友之间才有这种语言的能力，以后到法国去也可以有生活的能力。结果女友跟他越来越生疏了。这绝对不能单纯地怪女友，**因为我们知道时间、空间的分离是非常厉害的。分离是有一个过程的，比如说一对恋人刚分成两地的时候，特别难过，因为原来两个人形成的一种生活方式、生活细节现在突然没有了，一切变得空荡荡，然后自己一个人吃饭变得不行了，什么都不适应。这样一个月、两个月、三个月，渐渐地，自己学会了空白里面我会做点吃的，听听音乐，看看展览，出去看个电影，逐渐逐渐，那些时间就从空白里面开始活起来了。**过上个半年、年把时间，慢慢觉得一个人好像过得也还可以。再过一段时间，一个人挺适应了，彼此的需求就没有了。特别是你到一个新的环境里面，就会遇到新的人，会有各种各样的事。小凯还在这努力，但这种努力是多么地绝望。原来还打打电话，后来电话打起来没两句就没话说了，每次打电话的时候语调都特别地深情，但是放下电话就很绝望。躺在床上，小凯默默无语，无依无靠。\n后来在诚品书店一下子遇到Susie，她是一个店员，特别单纯，业余时间在学跳舞。她看到小凯在这里，很少看到这么一个小伙子坐在书店的地板上，靠在书架那里，拿着本法语在学。她一下子觉得很吸引人。后来两下一聊，她说你为什么学法语，他说我的女朋友在法国。Susie心里一凉，原来这么回事，嘴上说哎呀，好浪漫。因为女孩子都会这样，其实心里很伤心了，但是嘴上还夸奖你一下。小凯经常去书店，最后又发生了各种各样的事情。因为小凯要去法国，要借钱，后来跟黑社会头子借钱，结果产生了一大堆问题，产生了一大堆风险，两个人一起经历了。到最后电影快结束了，终于小凯按照约定要去法国见女朋友，他心里已经知道不行了，但是还是要去。作为一个男孩，怎么对待前任，这是非常庄重的承诺，原来说要去看她，还是要去。Susie其实心里面就越发地喜欢他的这种单纯，喜欢他的这种坚持，喜欢他内心的那种朴实，他们在街头就重演了那一幕：原来是小凯送女友，现在变成了Susie送小凯。两个人望着默默无语，因为此去不知道怎么回事：一见面，说不定那个女友一下子又唤起往日，说不定又好起来了呢。这对Susie来说也是一个特别伤心的事情。但是小凯走的时候，不像那种不负责任的男孩，隔着车窗说放心，我还回来，那个就很庸俗了。小凯一句话也不说，就默默地看了她，然后车就走了。后来那个镜头非常好，Susie回到自己的住处，一个人，孤零零的，然后倒了一杯水给自己，默默地走到窗前，望着台北，一片寂静。镜头一转，过了若干日子，Susie在那儿理书，忽然看见小凯当年经常看的那个法语书，看着看着，主题音乐响起来，心里面生起那种又想念又伤感的情绪，因为小凯一直没回来。这个时候镜头一转，小凯出现了。如果我来拍的话，我很可能就在这个地方“咔”停住，Susie继续推着车，不知道回来没有。但是我们中国电影都有一个特点，一定要给人温馨的希望，所以小凯出现了。他从书架的那一头远远看着Susie，叫了Susie一声，Susie没听到，推着车往前走。结果又走过一个书架，再叫她，Susie这一下听到了，回头一看——我觉得拍得也很好，它不是说喜出望外，不是的，就是心里是非常高兴的，但是脸色是非常生气的。看了他一眼，然后继续推车自己走，把小凯急得一下不知道怎么回事，再叫她，然后那个Susie憋不住了，才笑起来。小凯对前任那么珍惜，对他来说是那么艰难的一个心路历程，但是他保持了自己的纯度，所以后来跟Susie交往，是跟原来那个女孩子完全不一样的，没有花言巧语，但是都是寻常里面那种把整个心放出来，两个人之间的深切的互相的关切。\n这个电影我觉得在中国电影里面拍的是相当不错的，知道怎么去面对情感、面对自己生活的变化，不需要人太成熟，只需要人纯净就能做到。\n\n孤独\u0026创伤 一、失恋\u0026孤独 💔  失恋在我们当代社会里面是最苍茫的孤独 。\n古典时期（希腊人喜欢阳光、沙滩、交友，排斥孤独）和现代时期对孤独的不同价值判断\n古往今来的家族社会的我们不喜欢孤独，人生定义上我们善于把自己定义为一个群体的人，一个社会的人，一段关系（或者爱情，或有友情）\n人的角色总是和别人联系在一起的，这是我们今天原有的惯性。\n人用什么来支持自己，换个角度来说就用什么相伴人生\n任何东西都不能替代爱情，因为爱情意味着生命，构成这一种生活——苍茫的孤独\n电影《托斯卡纳艳阳下》中，一个女作家正在庆祝她的一本书出版，忽然她丈夫的律师来找她，要求办理离婚。他丈夫有个理由说，妻子向来写作收入高，而他的收入比她低得多，所以她丈夫就要求在离婚的时候，房子归他，大部分钱也归他。这个女性——弗朗西斯，从一个生活幸福感爆棚的人一下子变成一个特别孤独、悲哀的人，她没处可去了，最后只好去很廉价的单身公寓，这种公寓号称“离婚公寓”，都是离了婚以后没去处的人到那儿去住。弗朗西斯去了以后，第一天晚上准备看看书。但房间的隔音非常不好，隔壁的一个男人一直在哭，弗朗西斯被他弄得很烦，后来敲墙壁让他不要哭，对方一会儿又哭起来，最后问她，你有没有空过来喝一杯？按理说，一个女性和一个陌生男人隔着墙，又是这样的环境，应该断然拒绝，但是弗朗西斯就说“下次吧”，这个话把弗朗西斯自己都吓了一跳，人在孤独中会发生种种想不到的、自己不可控的一种变化。她原来拒绝了她一个闺蜜的赠票，是到意大利去参加一个同性恋者的旅行团，她不愿意去，而这个时候她发现，如果自己再不去打开一个新的生活面，生活可能就会不可遏制地发生种种自己最不愿意见到的事情，后来她就去了。她去了托斯卡尼，在意大利南部，特别漂亮，种植葡萄园特别多，古代的生活保留得也特别完整。她忽然看到一个老房子，特别喜欢，觉得自己可以在这个房子里重新开始人生。于是最后买下了这个房子，开始一个人打理，后来也请了施工队来帮她装修。 \n 你居住的地方决定了你是谁。你与自己的住所越息息相通，你的自我就越与它难分难舍。一个人选择居于何处绝不是偶然的，因为它反映了你内心的渴望。\n 这样一个人，她是通过自己来重建一种新的生活。她那种孤独，夜里面一个人无所倾诉，下大暴雨，老鹰飞进房子里来，恐惧、紧张、不适应，但是慢慢地一点点跨越过去。\n每个人都会经过一个隧道阶段，孤独就是你的隧道阶段，就看你能不能把它走通。当你走通过一次隧道以后，再面临新生活的黑暗区的时候，心里面就会有一种力量去穿越它。\n从这个意义上说，失恋造成的孤独给人带来的唤醒，给人带来的生活的锐气和那种追寻生活的力量，其实是非常强大的。没有失恋的孤独的话，人永远不可能体会到这一点。\n\n二、爱生恨\u0026不可爱  👥 从爱里转换出来的恨，如果不加控制，会蜕变出巨大的罪恶 \n**很多人会陷在情绪里面一发不可收拾。人性深处埋藏着大量的恶，一旦它的释放获得了正常性、合理性，就会百分之百地释放出来。在爱情里面，有时候人会变得很恶劣，就有这么一个人性的崩溃。 **\n瑞士作家迪伦马特写的《老妇还乡》，看着就会觉得特别地残酷。62岁的克莱安她回到了故乡，这个小城原来发展得还可以，但是后来越来越破败。这个富婆回来以后宣布要给这个小城10个亿，振兴小城。\n小城的人知道以后都到车站去迎接她，人山人海，大家都特别期盼她拿出这10亿来，但没想到她提出了一个条件，就是要把镇里的两个老头子抓起来，判死刑。为什么呢？其中有一个是她年轻时候的恋人，她当时怀孕了，在当地的传统里面是大逆不道，结果那个男孩子为了逃避大家的惩罚，就说是克莱安勾引他，他经不住她的勾引，才有了这个事情。另外一个青年，跟他是特别好的哥们，他出来作证说，他亲眼看到克莱安是怎么勾引的那个男孩子，这就让克莱安的命运发生了巨大的转变，结果全城的怒气都冲向克莱安，克莱安最后就逃出了这个小城。她后来在希腊认识了一个船王，跟船王结了婚变成了大富婆。现在她回来以后就坚决要求说，我会拿10亿出来，但前提条件是要把那两个人杀掉。全城一听，坚决不同意，怎么能用钱来换良心呢。其实这些城里的人也很可笑，因为当年那个判决还拿到法庭上去过，但法庭上的人颠倒黑白，给她一个罪名，把克莱安给赶跑了。全城的人表面上维护正义，实际上是一群乌合之众。克莱安一听也不着急，既然你们不同意，我就在这住下，天天优哉游哉地在城里转。那两个老人有时候在街上走路，大家纷纷上去跟他们握手说，你们俩放心，我们坚决不会同意的。那两个人听到简直是热泪盈眶，特别地有信心。但是十几天过后，大家一看，克莱安整天在城里转悠，而10亿就在她身上，因为那两个臭老头子就是拿不出来，大家的心情就发生了变化，慢慢觉得这两个老头也太不知趣了，自己上吊算了，还好意思在这里活着。老人出来散步的时候，发现大家眼光在变，越来越惊恐，终于有一天决定逃走。到了火车站，他们发现全城的人都来送行，每个人都虎视眈眈地盯着他俩。因为克莱安说清楚了，如果逃掉了，10亿也没有。所以两个老人一看这阵势，就知道什么意思，胆敢踏上火车，立刻打成肉酱，所以两个人只好又回家里去了。最后他们终于熬不住了，又过了一段时间，两个老人干脆自动走出来，到了城市的广场，周边的人群越聚越多，把他们围了起来，然后两个大力士站出来，一人掐着一个老人的脖子，把他们掐死了。掐死以后，城里最权威的医生赶快来签署诊断意见，某某某因为心脏病突然发作，死亡了。克莱安一看，把10亿拿了出来，然后她带上了当年恋人的尸体，坐上火车走了。其实她心里面还是很爱他。\n 他还像过去那样，和许多年前一样，还是那只黑豹。\n \n三、创伤\u0026爱情 💭  很多人根本的爱的来源是创伤，这个时候爱情就被扭曲了\n还有一个问题，很多人去投入爱情，为什么投入呢，是因为心里有创伤。在从小的成长经历、自己的家庭、自己的求学过程，或者是自己的社会遭遇里面，有很多创伤，对自己的价值毫无信心，感觉自己的生命毫无前景。而爱情本身就承担了一个对人的肯定，对人的确定的任务。在现代社会生活里面，我们每个人都有对身份的焦虑，爱情就变成了对身份的一个证明。有些创伤是潜在的，比如说在原生家庭里面缺乏一种爱，甚至比如你的生活里面潜藏着某种原罪感，你都想通过爱情的美好让它获得另外一种生存，这个时候爱情就被扭曲了，它本身的特性也就变化了。\n最近志贺直哉的小说《暗夜行路》又重新出版了。这个小说里面写的是谦作这个年轻人，他发现自己实际上是祖父和他的妈妈生下来的孩子。他本来喜欢一个女孩子，但是家里无论如何不让他跟她好，后来他才知道原来他们是亲戚关系。这个好友在8年前去了俄罗斯做生意，但一败涂地，不好意思回来。他以前给这个好友写信都是讲自己生活得一般，因为他怕说自己好，对比起来，会令对方难过。其实他一直过得很不错，现在又能这么喜气地结婚，因为太高兴太幸福，他克制不住了，想写信给他的好友。他写好以后，就觉得这个信会不会不妥当，于是跑到楼上问他爸爸，他爸爸冷冷地看着他，突然说，你终于撕下那种伪善的面孔了。他父亲痛斥他说，你以前伪装的那种善良、怜悯，到今天都不过如此。他越听越觉得自己是一个魔鬼，最后他爸爸说，我现在宣布判处你死刑。他就像听到上帝的命令一样，转身就往下跑，最后跑到河边的桥上，看着黎明河水，心里大声呼唤“爸爸，我是多么地爱你”，然后“嘣”地就跳水自尽了。\n卡夫卡的作品中，很多东西都是从家庭体验里来的，我们可以从他的书里面看到一种社会专制，可以看到一种权威控制，然后还有那种挣脱感，那种生活的异化感，像《变形记》等等都是这些内容。\n所以我们看《暗夜行路》里的谦作，他想赶快结婚，但是他接触的女性有限，结果他爱上了比他大20岁的阿荣，而这个阿荣恰好又是他爷爷的小妾，所以更加混乱。最后他又遇到了一个女孩，叫做直子，他特别地喜欢她，后来追求直子，跟直子结了婚。但是因为带着巨大的心理创伤，他跟直子相处的时候，无法那么自然坦然。他很渴望从直子那里得到治愈，得到温情，得到种种，但是直子也是个敏感的人，还是很多情的一个女性，面对这么一个像孩子一样，整天需要呵护的人，直子最后也跟别人有了恋情。谦作后来生了病，也发现直子的这些事情，特别地沉痛，一生修理不好自己，一生都不能把自己放好位置，最后终于支撑不住。去世以前直子陪伴着他，忽然在生命要消逝之前，他看到这个世界不应该纠结，很多东西都只是人心里放不下。他终于心里面彻底宽容了直子，那个创伤最后要靠死亡来消除。\n 谦作的样子看起来既沉静又平和。……直子仿佛第一次看到谦作的这种表情，想到：\"难道没有救了吗？\"但奇怪的是，这没有让直子非常伤心，她好像被吸引住了一样，目不转睛地看着谦作的脸，不停地想：\"不管有救没救，反正我不离开他。不管到哪里，我都跟他去。\"\n 在很多人的恋爱中，爱人变成对自己的一个弥补，而他根本的爱的来源是创伤。我们要意识到为什么一个人在现代生活里面需要独立地去成长一段时间，因为在这个过程里面要去认识自己内心的创伤，要使它愈合，生命要打开新的叶子，生长出新的枝叶来，去获得一个比较完整的生命，然后去爱人，去相爱。\n尤其是今天独生子女一代很容易受伤，因为我们只有一个人，而不是过去那样因为是什么位置、身份十分有序。可以很清楚。我们今天的创伤，以前的很多人是没有的。我们的要求太多了，渴望得到的东西也太多了，不管是物质的还是精神的，层层叠叠。\n在这种情况下，我们的爱情里面就承担了太多的东西。一旦结婚，互相的需求度太大了，造成沉重的压力，然后每个人都没有什么输出的能力，互相都是枯竭的，所以就带来了巨大的失望、巨大的冲突。对于这些潜在的需要，我们要有一种自我清理。在法兰克福学派的社会批判理论里面，也是运用了很多弗洛伊德精神分析的方法，它说到现代社会的信息环境，比如说广告等等，给人的心灵深处移植进去太多的欲望。它剥夺了你的潜意识，在无形之中给你埋下很多欲望。\n在今天的社会里面，创伤是一个非常值得重视的问题，从心理上，我们要做一个比较简单的人，要做一个知道自己真正需要的人，只有在这个基础上，才能把握住爱，把握住到底应该跟什么样的人在一起。\n 这里发表一下鄙人自己的观点： 我希望自己以后不要只留给自己一种声音，就像某位哲人所说，我不希望自己再被带节奏，我希望自己所说即所思，如此以上。\n “如果尖锐的批评完全消失，温和的批评将会变得刺耳。如果温和的批评也不被允许，沉默将被认为居心叵测。如果沉默也不再允许，赞扬不够卖力将是一种罪行。如果只允许一种声音存在，那么，唯一存在的那个声音就是谎言。” ——柏拉图\n 广告的确存在不可取的部分，但是要拒绝广告吗？不要，一件产品从发布到世，如若要推广开来，就必然要进行推广，这是不言而喻的，古往今来即使如此。所以要拒绝它吗？不要！起码它是迄今为止，效应最大的手段。\n \n四、 孤独\u0026爱情💑 孤独本身有时候会让人滑向爱情\n其实，我们现在的孤独从某种意义上说，也是非常值得称赞的，因为它可以让你获得承担生命的力量。\n索菲亚·科波拉拍的《迷失东京》，是很多人都非常喜欢的。里面那个美国人，是一个过气的影星，叫哈里斯，日本人把他请去拍葡萄酒广告，另外一个女孩子，叫夏洛特，她的丈夫在日本拍商业照片，所以她也去了日本，在东京住。两个人都很孤独。 哈里斯来到东京以后，当天晚上接到他太太的电话，万里之外，太太不问他在外面感觉怎么样，心情怎么样，而是喋喋不休地说要装饰地板，到底什么颜色的好等等。这对夫妻的悲哀就在这里，共同生活这么多年，但是丈夫在外那么远，打回去电话，却是这样一些非常琐细的细节，所以哈里斯听着就特别地累。日本人又把他当商品利用，摆各种姿势拍广告，用的不是这个人，而是这个角色，用他的影响力。夏洛特也是这样，丈夫特别忙，尽管年轻，还是新婚夫妇，但是他就是匆匆忙忙，以工作为主，夏洛特就一个人被甩在东京。两个孤独的人，一个中年男人，一个年轻女孩，中年男人有自己的身份危机、中年危机，而年轻女孩子有她的青春焦虑，它们叠合在了一起。按西方人的观点，东京是一个充满禅意的地方，是一个以静为美的地方，所以心灵在这里可能能获得一种沉淀，能获得一种安静，它是这样一个设计。但其实两个人来到这里，更加感到孤独。后来他们三次相遇，还有拥抱，但是即使这样，他们还是感到孤独，电影里面有一句话，就是**“在天黑以后，往热闹地方躲，跟着别人努力快活，可惜心里，有定时的闹钟，提醒你有多寂寞”。**\n这不是一个个别的事情。**城市人在现代生活里面，归根到底，在忙碌之后，在夜半三更的时候，心里面更多体会到的还是孤独。这时候就特别渴望有一个伴，爱情在此时跟我们的需要就有高度的契合。**孤独本身有时候会让人滑向爱情，好像爱情可以填补这个孤独，但是这是一个特别大的误区，因为两个人真正在一起，它有时候释放出来的孤独比你原来一个人承担的孤独还要大，因为它伴随着一个特别大的失望。\n所以这个影片里我觉得非常地好，两个人在东京相遇，彼此那么优秀，那么真情，但最后还是意识到，在这个世界上他们不能走到一起，也意识到生存、生命是要靠自己去承担的，而不是躲到那种所谓的爱情里面去。结尾两个人终于分别，哈里斯要回国了，他们在宾馆大堂告别。我觉得这个告别设计得很好，通常爱情影片里两个人是如何告别的非常重要。一般来说，如果跟一个人依依不舍地分别，分别之后知道永远看不见了，心里面会涌出一种特别特别难过的情绪。就像电影《情人》，小女孩最后跟男人在码头分别之后，月夜下，甲板上，大哭起来，才意识到自己多么爱他，才知道一生再也不可能跟他在一起。哈里斯和夏洛特两个人分别之后，都很难过，但没想到，他们在街头又碰见了，这个又互相看见就不得了。两个人在街头深情拥抱，但**最后还是选择分别。这个又分别不简单，这里面有一种力量，自己把自己的孤独承担起来。**在这个时候，人忽然觉得自己能够达到一个境界，就是可以活得又孤独又自由，这是非常不容易的，所以它写得非常精彩，是跟一般以往传统的结局非常不一样的一个处理。\n人生有时候不要回避，一孤独就觉得为什么我孤独了，就忙着逃避。有的人觉得为什么我还不谈恋爱，我怎么一个人还单着，如何如何。其实你要珍惜你的这一段孤独，你一旦在这个孤独里面获得了自己的这种独立的生存，获得了自己的内容，获得了自己生命的坚实，这个时候你才真正地变成了一个在这个世界上能承担爱情的人。一生里面如何获得几年孤独的时间，这还真的是一个挺值得去好好努力的东西。我们都觉得孤独不好，总希望能够迅速地获得一个爱人或者获得一个陪伴，实际上从另外一个意义上说，你的成长就在孤独里面，这是很容易被扭曲的事情。\n\n五、宝贵\u0026不偿 😔 人生最宝贵的东西总是被剪掉\n在所有的创伤里面，比较大的一个创伤容易被我们忽略，就是作为下层被鄙视的这种创伤。今天是一个走向中产化的社会，我们有十三亿七千万人，按照美国人的标准，当一个家庭年收入在五万多美元以上，它就是中产阶级。据美国人的统计，中国人大概有一亿两千多万人处在这个水平上，但我们还有十多亿的下层。这十多亿的下层，在社会生活里面，尤其是在爱情生活里面，受到的鄙视是非常强烈的。\n现在社会主导的爱情观，都是向着上层的，比如物质条件、精神条件、社会身份等等。大家如果看过《十七岁的单车》这样的影片，就会发现社会对于进城打工的人的那些蔑视，是非常非常可怕的。\n朱塞佩·托纳多雷拍的《天堂电影院》，也是非常有名的一个电影，它里面的多多家里就是意大利一个小城里的下层。多多特别喜欢看电影，而且他跟放电影的大叔很熟，经常跑到放映室里面看大叔放电影，但是他发现，每次放电影前都要先审片，就是神父一个人坐在电影院里，看到接吻镜头、拥抱镜头就摇铃，上面听到以后就会把这一段剪掉再接上，变成一个节本，但多多看到了完整的电影。后来多多长大了。作为一个下层人，他跟一个大工厂主的女儿艾莲娜谈了恋爱，两个人一开始就抛开了自己的身份，结果艾莲娜的爸爸坚决反对。两个人经历了特别浪漫的爱情。有一次他们开车开到半山腰抛锚了，只好拦车求助。一拦，没想到拦到了艾莲娜的爸爸的车。艾莲娜爸爸的气场很强大，让多多一下子很紧张。 但电影镜头很好，多多这时候显得很弱势。相爱的人，她应该不由自主地跟他站在一起，彼此支撑。但是在这里，艾莲娜就站在另一头，一动不动。镜头的寓意很强烈，后来两个人就分掉了，她爸爸把艾莲娜弄到别处去了，多多作为一个下层，深受打击。之后他学了电影，变成一个导演。但一个受打击的下层，哪怕他后来社会地位很高，他内心深处还是会有下层的阴影，受鄙视的人对这个世界不信任，他看不到那种真诚，看不到那种纯粹，不敢相信真正的爱情。他后来跟一个女人结了婚，多多的妈妈就跟他说，其实我知道你过得不幸福，因为每一次接电话，听到你媳妇的声音，都听不出她爱你。这样的因为社会阶层而形成的生活的一路坎坷，特别是精神上，对人来说是特别大的一个压制。这个电影到最后很有意思，放电影的老伯伯去世了，他留给多多的礼物是一大盘电影胶卷，多多拿回罗马去一看，都是当初被剪掉的那些片段，拥抱、接吻，这时候寓意就太深了，就是人生最宝贵的东西总是被剪掉。生活里面最宝贵的是那些真情，但是都是要被剪掉的，所以多多的生活也是被剪掉的生活。\n 多多，人生与电影不同，人生，辛苦多了，离开这里，去罗马，你还年轻，世界是你的，我老了，我不想听你讲，我要听别人来讲你。\n 上层的人过于功利，很难拥有最纯粹的爱情，下层的爱情又被这样扭曲，所以有时候为什么觉得这个世界不美好。问题是我们之后20多年，有几亿人要进城，十多亿人里面要有六七亿人转成中产，在这一个巨大的历史转换里面，我们的爱情是什么爱情？ 这是最值得我们忧虑的。\n\n六、 美化的事情即将发生😇 什么都没有了，但是她有生命了，这就是人生的一个境界\n在另一方面，一代年轻人要有自己的勇气，要有自己的理想，特别是要相信，通过自己的劳动能够超越孤独和创伤，这是唯一的出路，光靠理念空想肯定是不行的。不要过多地盘旋在孤独和感伤里面，要在创造性的劳动里，去超越这些东西，包括爱情。\n我特别喜欢《走出非洲》，西德尼·波拉克这部电影是根据卡伦的小说改编的。里面的凯伦很虚荣，她花钱给自己丈夫弄来了爵士爵位，然后跟着他到了肯尼亚，成为高高在上的殖民者。但是她的丈夫觉得，你给我弄了个爵位，我也满足了你结婚的要求，彼此就扯平了。丈夫经常花天酒地到处去打猎，还染上梅毒病。凯伦变得迷茫孤独，一个人在家里，她才发现自己的命运离原来的设想太远了。她开始跟当地的黑人一起种植咖啡豆，那么艰苦的条件，一天一天地劳动，她获得了一种巨大的价值感和满足感，人就变了。在那个过程里，有一次遇上一头狮子，这么绝望的时候，一个男人冲出来，把那个狮子逼退了，那个男人就是丹尼斯。丹尼斯是一个非常有理想，非常浪漫，非常有诗情的人，他又非常地勇敢，凯伦跟丹尼斯就越靠越近。但是，优秀的男女碰在一起，最担心的不是对方不优秀，而是对方太优秀而丧失自己的自由，比如说你遇上一个特别美、特别优秀的女人，她希望你怎么样，你就觉得要顺应她的希望。而一旦发生这些变化，你就会特别担心自己会变成另外一个人。电影里两个人一开始有一点彷徨，最后还是抛下了一切。电影里边有一段，丹尼斯去弄了个飞机来，才学了一天，就带凯伦飞上天去了，那一段拍得特别好，飞机飞上天，能够看到雪山、湖面，还有火烈鸟大片地飞起来，能够看到非洲的那种壮丽。这最根本的意义在哪里？就是两个人坐在飞机上，两个人一起看到一个世界，这时候就不一样了，原来那一种在土地上，没有飞起来的人的内心里面的各种苦、各种伤、各种难，一下子好像都化解了，所以两个人最后想一起开辟一个新的生活。 如果按照一般的电影，达到这个要求就可以了，但这个电影最后的结局是丹尼斯因为飞机失事死掉了，凯伦又变成一个人，但是即使一个人，她也经历了这一切。最后她的植物园也被大火烧掉了，什么都没有了。什么都没有了，但是她有生命了，这就是人生的一个境界。她最后离开了非洲，但是她已经变了一个人。\n 凯伦：你是对的，那个农场从来不属于我。 丹尼斯：也许是我错了。 凯伦：…… 丹尼斯：你毁了我，你知道吗？ 凯伦：毁了什么？ 丹尼斯：独处的自由。\n 在我们今天这个世界里，劳动是有无限的含义的，归根到底是专业化，一个人在这个世界上一定要是一个专业化的人。现在是一个交换的世界，你没有专业化，就没有跟世界的关系。比如你是一个画家，你光是做好画家，就需要走出去，就要寻找不同的人去观察，然后你从这一点上，跟世界就有一个很扎实的、有根系的联系。你的那种孤独、创伤就会在这个过程里面获得它的一个平复，获得它的成长。\n\n边缘\u0026发现 一、 边缘\u0026爱💑 正经的人跳不出这个东西，这也是一种爱\n生活里面，我们不可能永远处在舞台的中心，也不可能永远处在社会的核心地带。对某种人群来说，他们可能就属于边缘人群，或者有时候我们生活的某个阶段会处在一个比较边缘的状态，比如说有点离经叛道或者是有一种反叛性。这两种情况都可能会出现。\n对于**中国人来说，我们讲求道德社会，总想政治正确，道德正确，方方面面都正确。在人生的很多时候，我们就把自己活得过于中心了，过于中心之后，就丧失了生活的那种张力，也失去了对于生活多元性的发现能力。**而且我们对很多感情的判断也有问题，我们可能会对一些非主流的东西、亚文化的东西有排斥感，觉得它们是不正当的、不正经的。从社会整体来看，从结构性来看，我们要用新的眼光去看待边缘社会。爱情它有一个特点，并不是“好人”才会有爱情，“坏人”之间也有很美好的爱情，这也是它跟其他政治、道德、文化各方面不一样的地方。那样的爱情，你也不能抱着不屑一顾、排斥的态度。\n有些电影里面会体现这个问题，像昆汀的电影《低俗小说》就很有名。昆汀原来是出租录像带的，他平时没事什么都看，看了以后就把五花八门的电影要素记在脑子里，后来他做了导演，拍了《低俗小说》，里面就有各种各样的街角生活，搞笑、荒诞特别多。这些黑社会成员之间的情感关系是什么？这种黑色美学里面有没有美好？**这也是一个很有意思的，能拓展我们的社会心怀，拓展我们价值观的一个部分。**这个电影讲的是黑老大要去远处办事，就把妻子米娅交给马仔文森特照顾，米娅让他干什么他就得干什么，要陪她解闷，结果米娅带他去了夜总会。文森特跟米娅在一块压力很大，因为听说黑老大心狠手辣，之前一个马仔摸了一下米娅的脚就被杀掉了，他就怕自己掌握不好出事。但是米娅实际上是一个很有性情的人，到了夜总会以后，那里正好举行舞蹈比赛，米娅一下子兴起，她想要跳。作为黑社会老大的妻子，虽然表面上活得很风光，其实也生活在恐惧之中。文森特一听说她要跳，吓了一跳，后来还是和她一起跳了一段。**在日常的生活里面，人和人产生的感情其实不鲜明，往往就是在一个特别的气氛、情境里面，人和人之间忽然会打破日常的束缚，在彼此的对视里面发现一些东西。**那段舞蹈我觉得跳得特别好，因为这个男演员是一个舞蹈非常厉害的演员，所以有人就问昆汀，这剧情是不是故意给他设计的，他说倒也不是，就是很自然地就出现这样一段剧情。在充满了死亡的黑社会里面，跳着舞的米娅和文森特互相对视、凝视，互相有那种发自内心的默契，那段舞步特别美。正经的人跳不出这个东西，这也是一种爱，但这个爱是实现不了的。实现不了又挡不住的内心，就显得特别地有意思。 \n 米娅：我相信玛瑟卢斯·华莱士，我的丈夫，你的老板，告诉你要把我带出去做我想做的任何事情。现在，我想跳舞，我想赢。我想要那些奖品，所以好好跳吧。\n 不要以为爱情只属于好人，也不要以为边角社会里面都是邪恶。爱情，它其实是分布在社会不同的角落、不同的层级里面，我们不能否定某些东西的合法性，这也应该是人的现代性必备的认识。\n\n二、 绝境\u0026爱 ❤️ 在生死绝境面前，爆发出了那种不顾一切的坚决\n还有就是，边缘或者不合理的存在，它往往能爆发出特别强烈的感情。因为在这个场景里面，到底爱不爱，它是跟生死放在一起的，绝境就是人的生死抉择，而这个时候能把爱放在前面，那这种爱情比一般的那种温暖的、道德的、善良的爱还要厉害。\n汤姆·提克威导演的《罗拉快跑》，罗拉的男朋友是黑社会，贩毒。集团头子派他去交易毒品，他拿到了很大一笔钱。但他在地铁上看到警察一慌，从地铁站里跑出来，那个装着钱的袋子就忘在地铁上了，袋子旁边坐着个流浪汉，他最后返回去找，车已经走掉了。她男朋友如果不把钱拿回去就会被搞死，但只有十分钟的时间，因为12点必须把钱带回去，他只好打电话给女朋友罗拉说，我要去抢一个商店。这时他已经到那个商店门前了，罗拉觉得太危险了就说，你等等，我去弄钱。罗拉的爸爸是一个大银行家，银行里有的是钱。他一听说罗拉要借钱，坚决拒绝她。罗拉没办法只好离开银行，跑到店里，看到男朋友已经准备开始抢，她急忙冲进去帮忙，结果一出来就被警察包围，最后罗拉被警察乱枪打死了。打死以后，眼睛一睁，她开始了第二次尝试。她又去找父亲借钱，结果父亲不给她钱，她愤怒了，把保安的枪拿过来，抵着她爸爸的头，让他一定要把钱拿出来，结果人家悄悄报了警。她父亲给了她十万，她一出银行都是警察，她提着那个钱袋子，警察一看是个小姑娘，以为她是从银行里出来，是有别的事的，让她赶快走，这里危险。罗拉提着钱，拼命狂奔。她跑到那个商店面前时，男朋友正准备开始抢，但是看到她一高兴，转身过来，结果正好被车撞死了，又是一个不好的结局。她又开始了第三次尝试，罗拉拿不到钱，看到赌场就拿着一百马克进去碰碰运气，没想到连押连赢，最后硬是把十万马克赢到了。她冲到商店那里，时间正好只差那么几十秒，没想到她男朋友无意间发现了那个流浪汉，他最后把钱抢回来了，所以罗拉白忙了，已经不需要了。\n 罗拉：我能做什么？我能做什么？我能做什么？快，帮帮我，求求你，就这一次，让我一直跑下去，行吗？我等着，我等着，我等着，我等着……\n 这个电影就特别有意思，一个女孩，在男朋友的生死绝境面前，爆发出来了那种不顾一切的坚决。现代社会要判断真感情太不容易了，但在绝境里面就能够看到。有时候人生不怕危险，在危险的时候它会把爱情呈现出来。边缘社会经常会有绝境，但是真情也常见。\n\n三、 破碎\u0026爱 💔 这句话像明矾一样，在他一缸浑水里好像一下子沉淀了很多东西\n我们中国的青年不太愿意处在边缘地带，总是希望自己处在最正确的那个点上。但这主要看时代，这个时代如果是一个非常保守、封闭的时代，充满了滞后力，在这时候边缘反而获得了一种可以说是有点激进，但又是特别有革新的，甚至革命的力量。\n纳博科夫的《洛丽塔》，很多人只看到一个中年男人和一个少女的恋情，但纳博科夫他自己解释这本书讲的不是恋情。因为纳博科夫是从俄国流亡移居到美国去的，他的母语是俄语，到了美国以后，他要适应英语，后来他写作也是用英语。但他内心始终有一种挣扎感，始终觉得自己的母语和用来写作的英语之间有一种追不上的关系，像乌龟和兔子一样，所以他认为自己写的是一种语言的追赶。那里面的亨博特喜欢洛丽塔，追逐洛丽塔，亨博特代表俄语，洛丽塔代表英语，他是这么解释的，听着还蛮有意思的，好像还变成了一个很有隐喻性的东西，但实际上从我们来看，就大不一样。男性的人生分水岭就是在35岁到37岁之间。前半段不管是从社会的探索还是情感的经历，在这个时候都有一个自我的沉淀，都有一个新的判断，都有一个重新开始，所以很多男性人生的最大转变都发生在这个年龄段。\n比如说中世纪最著名的基督教神学家，写了名著《忏悔录》，不是卢梭那个《忏悔录》，是基督教神学的《忏悔录》，是基督教文学里面最经典的作品。奥古斯丁，他35岁以前是一个浪荡子，从来不去教堂，整日吃喝嫖赌。他妈妈急得半死，妈妈是个虔诚的天主教徒，觉得他肯定要下地狱了。结果他35岁那年有一天，他看到教堂忽然就走进去了，因为里面空荡荡的，有种吸引力，他看到圣坛上放着一本书，是翻开的《圣经》。翻开的那一页的第一行正好写着“为人要端正”，他吃喝玩乐的时候从来听不到这种话，他就感觉特别奇怪。这句话像明矾一样，在他一缸浑水里好像一下子沉淀了很多东西，他就想不通什么叫“为人要端正”，他走出教堂还在想，想不明白。第二天他就离开原来的生活，一个人到处漫游，看别人的生活，看什么叫作端正，他后来知道生命那么庄重，那些五花八门的享受，都是游离的、破碎的、肤浅的，他终于要寻找生命最核心的东西，思索之下投入天主教，去想人类的存在和价值，他就彻底变成了另外一个人。他死以后，五百红衣主教一致同意封他为圣徒，而且这个圣徒要在300年以后重新复议才能确认，300年之后，几代人以后，红衣主教团还是一致同意，这个就是一个太大的转换。\n《洛丽塔》中的亨博特是一个三十七八岁的中年人，到这个年龄的时候他经历过很多挫折，不管是社会的，还是婚姻的，然后他才开始知道自己要找什么。他看到洛丽塔，就觉得她最符合他要寻找的那个人的标准，因为洛丽塔一看就像他少年时代的恋人，那么单纯，他觉得她是最符合自己的审美观和价值观的人，所以他一下子把全部生命投给她。但是洛丽塔不一样，一个小姑娘她要生长，她在最单纯的年龄开始吸收。亨博特第一眼看到她时，她在看一本流行画册上面的影星偶像，这是一个女孩子开始复杂化的阶段，但她的外观看起来是特别单纯的，所以这里面的错位就特别大。 洛丽塔，她身体里面埋藏着无数的欲望都快要打开，但亨博特最怕她释放这些东西，因为社会太混乱，会让一个人破碎，他就想维护她的完整。他开着汽车带她到处去，不让她接触外面的世界，但是外面还是有黑社会来诱惑洛丽塔，亨博特一个人无法对抗这个社会，最后洛丽塔还是被诱惑走了，所以这就是两种力量。**《洛丽塔》写出一种很深刻的东西，就是人生的生命经过积淀之后，你会发现生活是什么样的，但是必须经过一系列的碎裂，经过一系列的浑浊，然后你才能达到那个地方。**亨博特想跟洛丽塔一起，尽量让她不要走入社会的另一端，但是对洛丽塔来说，她满心激情地想要投入社会的另一端，所以这就是我们人生的一个矛盾。最后亨博特他就离开主流社会，到边缘去了。这个边缘是一个特别清醒的边缘，是一个内省过的边缘，是一个超越的边缘，但是大量的人必须经过这个往复，必须先复杂化，先建立起一个原罪，然后再去清洗它，才能获得新生，变成一个宿命。这是一个很难回避的东西。\n 你是否爱过一个人？看到她，就像看见圣诞节清晨的阳光，初雪以后松树枝上的小松鼠，雨天小路上溅到行人裤腿上的泥点，还有那些最美的玫瑰花。她是个可爱的小东西，但我深知，她甜蜜的笑容中藏着罪恶，漂亮的小嘴巴里可以吐出蛇的信子，每一次拥抱她都是对我的杀戮。但我爱她，我就是爱她，如果她要我的命，我就给她。\n \n四、 分水岭\u0026爱 💕 到底是顺着前面30年一路惯性下去，还是重新打开一个人生\n男性是在35岁到37岁之间，女性的边缘经常是在30岁。心理学研究发现，女性有两个危险年龄，一个是16岁，一个是30岁。16岁是青春期的开始，女性的好奇心比男性强得多，面对各种各样的东西，心里面越畏惧、越刺激，越想挑战，太多的第一次就会克制不住地要去尝试，所以很多危险就在这个阶段开始出现，当然也有很多新的开始。而在30岁，接触过很多人，经历过几次恋爱，然后结了婚，有了孩子，在一切都好像成了模型的时候，我们忽然会对这个东西有怀疑。因为后面再开始新生活还有时间，但再过几年就来不及了，这个时候就会强烈地有一种“是不是还可以有另外一种生活”的想法。\n到底是顺着前面30年一路惯性下去，还是后面重新打开一个人生，这可是一个大选择，所以我们就处在生命的两个边缘，一个是过去的30年的边缘，一个是未来的还没打开的边缘，就处在这么一个30岁的夹缝里面。生活就是这样，其实按道理说，如果撇开传统世俗观念的话，30岁本应是一个黄金时期，前面有那么多的人生体验，又有新的空间，可以把生活变得更好。原来没有努力过的，没有百分之百投入的，我现在可以去投入，我的全部生命有了方向了，心无旁鹜了，就可以把它做得更好。30岁理应是这样的一个时期，结果现在变成一个摇摆不定的事情。\n热内的《天使爱美丽》，我们就很喜欢。艾米莉在前面30年一直都过的恍恍惚惚的，因为她从小家里就不重视她，所以她自己就去尝试各种各样的新鲜事物，显得很不成熟。她后来无意中在墙洞里面发现了一个盒子，就觉得肯定是以前住在这里的人放在这里的，她生活就有个目标了，她要去找到这个主人，还给人家。后来就发生很多事情，很有意思。她找到主人之后，发现一个相册，是一个性商品商店的男店员尼诺的相册，那个相册里面很多都是重新整合过的撕碎过的照片，然后被拼合起来。艾米莉特别喜欢，一个人有能力把撕碎了的生活又再找回来，而不是抛弃它，艾米莉觉得尼诺是她心里要找的人。\n 艾米丽突然感到莫名的温馨，心里畅快无比，光线柔柔的，空气里也透着芳香。城市轻轻低吟，深深吸一口气，人生本来就是简简单单。\n镜头一转，街道的一个铁门上贴着一张大纸，上面写：“没有你，良辰美景向何人诉说？”\n 生活以前是一堆碎片，到了30岁，我们把它整合了。因为一个年轻人肯定要做傻事，到了后来才知道世界是什么样的。所以30岁的时候，应该是把破碎的照片重新贴合起来，然后重新开始的时候，应该是这么一个阶段。30岁，处在两个边缘中间，你如何渡过这一段时间是特别重要的。所以我们认识到30岁的重要性，就不要怕到30岁。很多人一听说奔三了，心里就紧张得要死，其实那是奔向你的黄金时期，奔向你的生活再造的一个时段，所以我觉得这是很有意义的一个年龄段。\n\n四、 New爱 💖 其实真正体会下来，我们现代人都在边缘中。\n日本电影《远山的呼唤》，一个死去丈夫的女人带着儿子在北海道生活，这个女人叫民子。风雨之夜有一个男人来敲窗，他叫田岛耕作，实际上是一个逃犯，但民子家特别需要一个男劳力，虽然对这个人不太了解，最后还是收留了他。后来这个男人释放出来的那种男子汉气概，还有对她儿子的带动，以及面对天地的那种大气，深深吸引着民子。民子本来是一个良家妇女，她特别不能接受社会的那些黑暗面，但是最后她接受了这个男人，而这个男人最后被警察追到了。在电影的最后一节，在火车上，警察押解田岛耕作去监狱。民子和另外一个被她拒绝过但非常理解她的男人，两个人最后故意到车厢上坐在田岛对面，有两个警察看着田岛。他们两个人故意对话，你要到哪去？听说你把农场卖掉了。她说，是啊是啊，我已经搬到什么地方了。男的又说，听说你的丈夫到远处去了，你要等他？民子说，是啊是啊。田岛被判了几年刑，通过这种传达，民子让他知道她爱他，她会等待他。田岛是从来不哭的，但那一刻落下眼泪来。这时候，我们脑子里面再也没有所谓的贵贱之分，没有因为身份的不同去把它区隔成情感的贵贱，就没有这些东西。\n我们现在是生活在一个碎片化的世界，有时候要欢迎这种碎片化，因为以前板结的结构性是被精英主导的，我们通过碎片化脱困，实现自己的漂流，实现不同的相遇，我觉得这也是非常有意义的。边缘这部分，也是我们未来三十年的发展之中特别要注意的一个问题，因为在社会运行里面会出现大量的边缘，有一些社会边缘的现象和情感，确实是值得被肯定的。\n有时候我在想，你在城市里可以看到这种现象，一个店，一个乡村来的女人在操持，旁边有一个装修店，是一个男人经营。这个女人的丈夫和这个男人的妻子都在乡下，两个人可能是同乡，或者是一个省的，互相之间你来我往，互帮互助，这两个人后来慢慢地有感情。如果按照传统来看，这真是有点对不起家乡的人，但实际上这种感情是同甘共苦建立起来的，是非常非常真诚的，它是在城市化新的难度里面融合起来的，但他们就会陷入两难。中国人将来像这一类的两难会特别多，这用伦理是无法解释的，用传统道德是无法概括的。这样的不符合我们传统的、主流的东西会越来越多，更不用说原来根本不搭调、根本不可能在一起的，也会跑到一起去，这都是我们未来要去把它容纳下来的东西。所以我们说以后要消解边缘，要看到边缘，从边缘里面看到真实、看到价值，这也是一方面。\n\n版权\u0026声明：  B站资源以及瓣友们的互相扶持，嘿嘿...... 终于填完这个4万字的大坑了……嘿嘿 ","description":"","title":"梁老师的爱情课","uri":"/blog/posts/2020-02-08-mr-liang-love-course/"},{"categories":null,"content":"不要忘记优化Pc的主要目的是提高自己的工作效率, 如果自己因为寻找工具而惶惶不可终日, 那么一定是磨刀反误砍柴工了, 是很不值得的事情, 因为你的目的已经不是解决需求, 而是不断的创造需求, 无穷递归的时间复杂度很大的噢!\nLists   Dock\n Window:  Mydockfinder [在 Utf-8 下乱码] RocketDock.   LINUX/Ubuntu:  GTK Unity Gname[最美]: 需要Ubuntu系统和浏览器共同安装即可运行  Dash-to-dock  禁用 Ubuntu Dock 的方法 为什么会有两个 Dock 的贴 sudo apt remove gnome-shell-extension-ubuntu-dock          Music\n Netease Music QQ Music  Deepin-QQ X-Droid QQMusic QMC Decoder (convert QMC File to MP3 or FLAC) Unlock Music 音乐解锁      Works\n WPS BaidunetDisk XMind + 果壳 Master Reader  Shortcuts   Cailbre 坚果云 GoldenDict Mircosoft To Do/Ao FluentRSS / Justrss Flowchar Bookworn Audacity OBS TeamViewer    Painting\n Mypainter GIMP Darktable Krita  krita-l10n   Excalidraw     Proxy\n Clash  Clash For Android Clash For Magisk / Linux Clash For Window      Chat\n QQ Wechat Telegram    Sys Tools\n PulseAudio: 音量调节 Blueman: 蓝牙管理器  [Window10] Bluetooth Battery Monitor Lanzou [Linux] sudo apt-get install libbluetooth-dev \u0026\u0026 git clone https://github.com/TheWeirdDev/Bluetooth_Headset_Battery_Level \u0026\u0026 cd Bluetooth_Headset_Battery_Level \u0026\u0026 chmod +x bluetooth_battery.py \u0026\u0026 ./bluetooth_battery.py BT_MAC_ADDRESS_1 ... 1  https://stackoverflow.com/questions/21597536/pybluez-installation-in-linux     Dconf: 系统编辑器 Flameshot: 截图助手 V16config Lanzou 搜狗输入法简化版 Lanzou Fliqlo 屏保 Lanzou Bandica 录屏 Lanzou Rockdock Lanzou    Play Media\n Steam  Proxychains   Uplay VLC    Code\n GitKaken JetBrains  Clion Pycharm   Typora / MarkEditor  Pandoc   VsCode Dev-Cpp：lanzou; Vim / GVim-for-gtk BvSSH: lanzou;    VLC2    F Fullscreen     Space Play/Pause   T Show position (time)   S Stop   Ctrl+Q Quit   +/- Faster/Slower   N/P Next/Previous   Shft+Left/Shft+Right Jump very short   Alt+Left/Alt+Right Jump short   Ctrl+Left/Ctrl+Right Jump medium   Ctrl+Alt+Left/Ctrl+Alt+Right Jump long   Ctrl+Up/Ctrl+Down Volume up/down   M Mute   Ctrl+M Show DVD-menu   Left/Right Up/Down Enter DVD-menu navigation keys    FCITX-PINYIN3 可使用插件实现云输入\n1  \u003cdiv id=\"j1\"\u003e [1]. https://github.com/ethsonliu/stackoverflow-top-cpp \u003c/div\u003e   双拼 进阶 To be continued...\nClash 1 2 3 4  tar -zxvf clash-linux-amd64-vXXXX.gz sudo mv clash-linux-amd64-vXXXX /usr/local/bin/clash sudo chmod +x /usr/local/bin/clash clash   此时会在 ~/.config/clash 目录下生成两个文件：config.yaml 和 Country.mmdb；\n 保持 clash 运行，打开浏览器访问 clash.razord.top 进行策略配置、选择代理线路等等（可能需要根据提示输入IP、端口和口令，具体内容可在 config.yaml 中查看； 在系统网络设置中设置手动代理 Settings\u003eNetwork\u003eNetwork Proxy\u003eManual（设置\u003e网络\u003e代理\u003e手动）。  如果不想一直保持终端打开，可使用 nohup clash 命令启动后台运行。或者希望开机自启动 clash，可将 nohup clash 这段命令加入到前面提到的 start-service.sh 脚本的最后.\nFirefox \u0026 Chrome 缩放比例  about:config :火狐标签页，修改配置 layout.css.devPixelsPerPx ：修改缩放比例  两者现在都已经支持默认缩放比例了，上面的设置可以修改全局的CSS字体大小，如果是笔记本的话会很好用\n触控板跟手 提高跟手程度只需要把动画时间和幅度变短就好。\n Chrome参数可以改为200.0.20.80.8.50； 火狐打开about:config标签页找到general.smoothScroll.mouseWheel.durationMaxMS general.smoothScroll.mouseWheel.durationMinMS这两个值，分别改为200和50即可。这个和Chrome参数前面的200和0相似.  Chrome 插件显示 自定义 Chrome 的部分设置(chrome://flags/):\n Extensions Toolbar Menu -\u003e Dis Font Access APIs -\u003e En  H5播放引擎 1  sudo apt install ubuntu-restricted-extras   引擎 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  # Every https://www.google.com/search?q＝%s https://www.baidu.com/s?wd=%s https://www.dogedoge.com/results?q=%s https://www.sogou.com/web?query＝%s https://cn.bing.com/search?g＝%s https://www.so.com/s?q=%s https://search.yahoo.com/search?p=%s https://seeres.com/search?q=%s #mobile https://quark.sm.cn/s?q=%s https://yz.m.sm.cn/s?q=%s https://m.toutiao.com/result?q=%s # Video https://search.bilibili.com/all?keyword=%s #Book https://www.douban.com/search?q=%s https://www.amazon.cn/s?k=%s\u0026__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99\u0026ref=nb_sb_noss # Question https://www.zhihu.com/search?q=%s #Translate https://translate.google.cn/#view=home\u0026op=translate\u0026sl=auto\u0026tl=zh-CN\u0026text=%s # Code https://github.com/search?q=%s #hackr.io # Wiki https://zh.wikipedia.org/zh-cn/%s https://baike.baidu.com/search?\u0026word=%s https://wiki.mbalib.com/w/index.php?title=Special:Search\u0026search=%s #Emoji https://emojipedia.org/search/?q=%s\u0026utm_source=opensearch   Extension  视频弹出工具-Github [Translation]:  EdgeTranslate - 1.7.2 及以下 -\u003e [移步]。 Saladict - 7.6 及以下,Firefox 一直显示包下载是损坏的…   Video Speed Controller OneTab SmoothScroll 沙拉查词-聚合词典划词翻译 Copy as Plain Text Tampermonkey 捕捉网页截图 Dark Reader XDown 购物党自动比价工具 pakku：哔哩哔哩弹幕过滤器 No Per-Script Font! Font Rendering Enhancer Set Character Encoding 安全外壳 (SSH) Vimium Gitako - GitHub file tree Telegram Share floccus bookmarks sync  Typora 页边距：相关主题下的CSS里面搜索write找到max-width就是显示的页边距，自行调整\nUbuntu:\n1 2  wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add - sudo add-apt-repository 'deb https://typora.io/linux ./' \u0026\u0026 sudo apt update \u0026\u0026 sudo apt install typora   Word To MD [LINK] https://www.zhihu.com/question/24170089\n 在线工具：https://word2md.com/  项目源码.   Writage插件  Gmail \u0026 Outlook 众多邮箱手机客户端可以丝滑登录Google以及代收邮件，电脑端169收费。\n 据我们的技术说，gmail被屏蔽了，但是仍有一部分地址是漏网之鱼，可以通过这些地址来接收到墙外的邮件。因为只有少部分地址是可以用的，所以你们看现在号称能够接收gmail的客户端，大多都是手机的app，不开放电脑端是因为无法承受大流量的接入，会过载。\n 最后放弃Gmail, Foxmail客户端, 使用Outlook, 一个是长久易用, 一个是没有ADs.\n第三方客户端的配置 Foxmail 里面有这样的选择:\n  POP3/SMTP服务 IMAP/SMTP服务 Exchange服务 CardDAV/CalDAV服务    POP3(Post Office Protocol - Version 3), 属于TCP/IP协议, 提供Https加密后变成 POPS(学生邮箱好像不允许?), POP3协议改进POP, 端口号110, 服务器上的邮件不会在转发后删除. IMAP(Internet/Interactive Mail Access Protocol), 是一个应用层协议, 应用在 TCP/IP 协议之上, 斯坦福大学发明, 端口号143, 可以直接在客户端如对服务器的邮件进行操作. SMTP(Simple Mail Transfer Protocol), 建立在FTP基础上, 默认端口号25, 用于系统之间的邮件系统传输, 提供来信的通知, 而SMTP可以挂月网络传输邮件, 也可以通过中继器或网关进行邮件的处理.   SMTP是一个“推”的协议，它不允许根据需要从远程服务器上“拉”来消息。要做到这点，邮件客户端必须使用POP3或IMAP。另一个SMTP服务器可以使用ETRN在SMTP上触发一个发送。\n  Exchange Server是微软公司邮件服务组件。加入了一系列辅助功能(语音邮件、邮件过滤筛选、OWA(基于Web的电子邮件存取)) CardDAV/CalDAV: 前者是 远程地址簿信息访问（共享）协议, 用于客户端访问共享服务器上的联系人数据。后者是 允许客户端访问共享服务器上的日程信息。两者扩展了WebDav协议的规范， 并使用iCalendar格式的数据, 但是，国内的邮件系统基本不支持日程或者联系人的订阅服务.  Deepin QQ \u0026 Wechat 4  Deepin-wine Github  因为采用Deepin前缀, 所以不会和 Wine 产生冲突\n1 2 3 4 5 6 7 8 9  # deepin-wine容器 sudo apt install wget g++ git git clone \"https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git\" \u0026\u0026 cd deepin-wine \u0026\u0026 sudo ./install.sh # Wechat 的两个版本, 自己安装的是第二个 \u0026\u0026 最后一个是解决微信无法查看发送图片问题 sudo wget \"https://mirrors.huaweicloud.com/deepin/pool/non-free/d/deepin.com.wechat/deepin.com.wechat_2.6.8.65deepin0_i386.deb\"\"https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.wechat_2.6.8.65deepin0_i386.deb\" \u0026\u0026 sudo dpkg -i *wechat*deb \u0026\u0026 apt install libjpeg62:i386 # QQ(推荐, 后者Emoji会出问题) sudo wget \"https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/deepin.com.qq.im_9.1.8deepin0_i386.deb\" \u0026\u0026 sudo dpkg -i *qq.im*deb # Tim sudo wget \"https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/deepin.com.qq.office_2.0.0deepin4_i386.deb\" \u0026\u0026 sudo dpkg -i *qq.office*deb   QQ Image Question  禁用IPV6......  1 2 3 4 5 6 7 8 9 10 11 12 13 14  sudo vim /etc/sysctl.conf # Add IPv6 disabled net.ipv6.conf.all.disable_ipv6 =1 net.ipv6.conf.default.disable_ipv6 =1 net.ipv6.conf.lo.disable_ipv6 =1 sudo sysctl -p \u0026\u0026 sudo touch /etc/rc.local \u0026\u0026 sudo chmod 755 /etc/rc.local #!/bin/bash # /etc/rc.local /etc/sysctl.d /etc/init.d/procps restart exit 0    解决托盘ICONS: https://extensions.gnome.org/extension/1031/topicons/  FlameShot UBUNTU 开机自启动:\n1  gnome-session-properties   Android \u0026 PC Transform Films  Telegram   Xender : http://www.xender.com/ Send-anywhere : https://send-anywhere.com/ Portal: http://portal.pushbullet.com/ Reep. io : https://reep.io/ Snapdrop: https://snapdrop.net/ AirMore: http://airmore.com/ BT Sync: https://www.getsync.com/ file ai: https://fileai.com Pushbullet: https://www.pushbullet.com/  Ao Proxy5 采用和VSCode 相同的技术开发--\u003e Electronjs. 安装完成之后, 自然在走系统代理的时候出现了问题, 如无法登录微软账户的问题；根据 项目的 ISSUE [^21] 可以执行以修复登录问题.\n1  ao --proxy-pac-url= XXXXX   ShortCut .ao.json 某字段:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  \"add-due-date\": \"Ctrl+Shift+T\", \"add-my-day\": \"Ctrl+K\", \"complete-todo\": \"Ctrl+Shift+N\", \"delete-list\": \"Ctrl+Shift+D\", \"delete-todo\": \"Ctrl+D\", \"global-create-todo\": \"Ctrl+Alt+C\", \"global-search-todo\": \"Ctrl+Alt+F\", \"global-toggle-window\": \"Ctrl+Alt+A\", \"hide-todo\": \"Ctrl+Shift+H\", \"important\": \"Ctrl+I\", \"my-day\": \"Ctrl+M\", \"new-list\": \"Ctrl+L\", \"new-todo\": \"Ctrl+N\", \"planned\": \"Ctrl+P\", \"rename-list\": \"Ctrl+Y\", \"rename-todo\": \"Ctrl+T\", \"return\": \"Esc\", \"set-reminder\": \"Ctrl+Shift+E\", \"settings\": \"Ctrl+,\", \"sign-out\": \"Ctrl+Alt+Q\", \"tasks\": \"Ctrl+J\", \"toggle-black-mode\": \"Ctrl+B\", \"toggle-dark-mode\": \"Ctrl+H\", \"toggle-sepia-mode\": \"Ctrl+G\", \"toggle-sidebar\": \"Ctrl+O\"   VMware 触控板滑动  一个有趣的现象就是 Ubuntu 默认触控板驱动不支持双指放大, 但是Win10 的触控板驱动的参数却可以传到 Vmare 中.\n 两种解决方法：\n 直接放弃滑动，改用上下左右控制界面也不是不可以，你说呢？ 改用管理员的模式运行来获取触控板的参数.  处理器数和进程数 根据自己电脑的配置进行选择，首先百科i5-9300H的一些参数：\n 处理器频率介于2.4和4.1 GHz之间，并且由于超线程，可同时执行多达8个线程 。 英特尔酷睿i5-9300H的性能与较旧的酷睿i7-7920HQ（3.1 – 4.1 GHz）相似 。  Terimal Powershell  PowerShell 的 pipe 传递的是 .net object，而不是 raw 字符串，于是这就打开了一扇神奇的大门，因为 PowerShell 的一切组件都可以和谐地共存，彼此不用互相猜忌，不用猜你喂给我的数据合不合法，也不用担心我喂给你的参数格式对不对。大家共享一个 CLR，拥有丰富的 metadata，自由自在地在 .net 的世界里徜徉和探索......6\n [More]:\n 收集和分享 Windows PowerShell 相关教程,技术和最新动态 Chocolatey Packages Manager  命令行全局快捷键设置7  Win+R -\u003e comtrol 管理工具中加入想要添加应用的快捷方式, 然后右键属性设置全局快捷键.  打开的速度应该还是有比较大的延迟, 但是可以代替 Ubuntu 下的坏习惯.\nDraw 喜欢画画, 但是只会画火柴人, 买不起 Ipad , 入了一个 Wocam 的板子. 回来后惯性地选择了外区 - 台湾的账号, 但部分功能是失去维护的. 最后因为体验不如国内转了回来, 总结以后硬件的使用还是以国内为主吧, 比如 Apple 这类当然选择外区是相对来说好些的, 但是数位板确实选择外区没有必要.\n机型:\n Wacom Intuos S Wacom Intuos S 蓝牙版 Wacom Intuos M Wacom Intuos M 蓝牙版  随机赠送的有软件(软体)有:\n Corel® Painter® Essentials™ 7 Corel® Aftershot™ 3 UDM Paint Pro 优动漫 Paint  一共四个软件.但是碍于经费预算以及品控还是选择了 CTL-672 型号的, 必须得感谢奖学金给我这次任性的机会, 一定要好好参加竞赛 ,未来赢回来这些陪我的东西.\n驱动问题 无法和Wacome的驱动兼容, 造成的后果就是体验不如Firefox\n墨迹的实现 墨迹的实现是依赖一张张图片的渲染合成实现的,目录通常是\n%appdata%/Local/Temp/msohtmlclip1/01/clip imageoo1. gif)\rAdobe Software    名字 用途     photoshop 图片制作、编辑、海报设计 界面设计、后期处理修饰   Illustrator 插画设计 图像处理 印刷出版 网站页面制作   Adobe premiere 电影 电视 视频的剪辑、鬼畜视频制作   Adobe After Affects 影视特效制作、视频视觉效果 网页动画 高度灵活的2d 3d红旗合成   Adobe acrobat PDF文档创建 编辑 合并 转换 等   Adobe Dreamweaver 网页制作 所见所得   Adobe InDesign 排版工具 广告设计 目录制作   Adobe lightroom 摄影图片后期处理 批量编辑 整理、无损图片后期编辑 处理   Adobe XD UX UI 设计平台、移动应用 网页设计\\视觉感觉 交互设计 用户体验设计   Adobe animate 动画制作 网页视频、flash开发 视频音频动漫创作   Adobe audition 音频 混合 编辑 控制 效果处理、   Adobe spark 海报制作 社交平台常用尺寸模板 主题模板    坚果云  Webdav Recommend  RSS 以下来源不限于:\n feedx.net rsshub.app werss.app rss.mk  OPML 格式:\n1 2 3 4 5 6  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003copml version=\"1.0\"\u003e \u003chead\u003e\u003ctitle\u003eFluent Reader Export\u003c/title\u003e\u003c/head\u003e \u003cbody\u003e \u003coutline text=\"Reader\" name=\"Reader\"\u003e\u003coutline text=\"XXX\" name=\"XXX\" type=\"rss\" xmlUrl=\"XXXX\"/\u003e \u003c/body\u003e \u003c/opml\u003e   LINK   App Store for Deepin (legacy codebase) | 深度应用商店\n  Deepin-Apps-Installation\n  awesome-things\n  REFERNECE [1]. https://stackoverflow.com/questions/21597536/pybluez-installation-in-linux \r[2]. http://www.keyxl.com/aaa4cff/235/VLC-keyboard-shortcuts.htm \r[3]. https://www.zhihu.com/question/20432630/answer/161256076 \r[4]. https://zhuanlan.zhihu.com/p/144286142  [5]. https://github.com/klaussinani/ao/issues/94\r[6]. https://www.zhihu.com/question/22611859/answer/28897482\r[7]. https://www.jianshu.com/p/545e3f76eece","description":"","title":"All Pc Software In One","uri":"/blog/posts/2020-01-18-pc-config/"},{"categories":null,"content":"放弃Hexo类静态博客, 江湖路远, 有缘再见. 一款烂大街到游戏社区(小黑盒)都能看到这个博客的教程, 如果你的 Github 的Img不显示问题了，定是配置文件没写全(；′⌒`)\n 推荐一个主题:  Suka Theme   整合一下看到的图床 :  堆爱图床img.duiai.cc/tc/ SM.MS图床sm.ms 聚合图床superbed.cn 堆爱图床img.duiai.cc/tc 拓展阅读：https://www.jianshu.com/p/ea1eb11db63f   表情：Emoji   为什么写文章?\n “和我的老朋友沟通——夏梦雪，高考后她就在我的生活很少出现了，买了新的手机和电脑，我把时间花在PS和拍摄上，我得承认，很长的一段时间我淡忘了她，但其实我有断断续续写些信件，因为难免很想她。像拾穗人一样，生活之外的写作是自己拙劣的尝试，是我尝试去和世界沟通，和夏梦雪沟通的方式。当希望表露自己时，当想和夏梦雪说话的时候，就敲下一段文字，所以有了些文字。”\n“少了朋友圈可有可无的唠叨，多了反复删改的文字。浪费时间在博客上可能是我消磨时间的方式，也许我该远离这样的囚笼，到夏梦雪那里透透气的时刻。沟通自然包括情感、思想、行为，不可避免地会携有我的生活气息，写下来自然也是我的私心，我不希望有些事情就这样过去，也希望他们暴露在阳光下，想被其他人读到，所谓留给后人些什么，至少是留给自己什么。”\n“但是我也会克制这一切的发生，在正式的文章开始后会避免涉及自己主观情感。“\n\"博客就好像写日记，如今日记的纸张已经用了好大一部分了，总不能每一页都相同吧？也该去看看更加广阔的世界。但其实现在的我决定有一样东西不会变，且永远不会改变，我会持续给你写信的，夏梦雪，如果可以，请别生我气，好久不见！”\nHexo Logs   19年12月23日：搭博客，效果可，Bugs多(Hexo本地文件的损坏、themes的主题配置失败、themes的主题内部Wrap函数错误)，不明所以，干掉重来。\n  20年01月13日：电源崩，修五天……至此偷闲，买VPS-ESC，装服务器，Bugs多(如上传图片失败，WordPress服务器要死的样子，知识不足以至不敢大刀阔斧改动)，花两天，猜测备案系于安全连接，重装见好再崩(•́へ•́╬)，遂备案\n  20年02月03日：略解Html\u0026CSS，得神力，改主题，习算法，看数据结构。买域名(.cc)，提日程（VPN），念历，惭愧。而于昨日又再封，机场倒半，加之Hexo无法解析过深Markdown，长叹难矣难矣。ψ(*｀ー´)ψ\n  20年02月14日：因Google放弃Coding托管博客。\n  20年02月19日：高三想法达成，有了第一个404！！！\n  20年04月02日：新主题（作者），加disqus未遂，下次下次！！！\n  20年04月17日：重撰文，大道从简。\n  20年04月20日：再备案。\n  20年04月28日：解重写文章之艰，明妙笔之艰，遂推计划。\n  20年05月01日：偷闲更新一下文章，总结简单几点：1、不记录个人情绪以及解决过程的感受，保证整体清晰简短。 2、工作日不更新文章但是记录日志，汇集到每周末再做整理。3、多读书。\n  20年06月02日：找到其他的替代博客，可是大多数被墙。\n Google Site Blogger Blogspot    20年06月13日：换成Wiki类主题，修改若干。\n  20年09月01日：放弃Hexo类静态博客, 转Github。\n  21年01月12日: 注销备案, 开始转移Hugo.\n   本网站是个人网站，不含有企业、单位等非个人网站的信息，不涉及企业及互联网金融内容，若在核实中发现网站中含有企业、单位等信息，本人愿接受以虚假信息进行备案，注销网站，并将主体和域名加入黑名单的处罚。我的网站内容是：记录自己学习服务器过程中遇到的问题与相应的解决办法，上传个人编写的文章，图片，内容基本为原创。\n 自2020年4月20日, 我再一次地注销了个人备案, 不再想用学生特惠买的服务器了. 因为 (没钱) 察觉自己也是浪费资源, 既没有办法全身心的维护服务器, 又在自动化层面做得不好. 与此同时, 我也失去了七牛云的图片加速服务. 为了略表遗憾, \"稳定第一, 稳定第一\". 我如是说.\n  搭建Hexo 🔨 [前提]：\n Git \u0026 Node.js。 Github仓库已有 你的用户名+github.io的 repository，部署到GitHub page的时候，可以被识别。添加一个README，有好玩的。  1 2 3 4 5 6 7 8 9 10  npm install -g hexo-cli \u0026\u0026 hexo init (myblog) \u0026\u0026 (cd myblog)\u0026 npm install hexo generate \u0026\u0026 hexo server #生产SSH git config --global user.name \"yourname\" git config --global user.email \"youremail\" #检验 git config user.name git config user.email #创建，一路回车 ssh-keygen -t rsa -C \"youremail\"    C:\\Users\\用户\\.ssh里面找到SSH的id_rsa.pub, Linux下的目录是~\\.ssh\nid_rsa是你这台电脑的私人秘钥。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上，然后去个人设置里面加上SSH。之后打开二级域名就可以看到刚刚加的readme了。查看是否成功 ：\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  ssh -T git@github.com # The authenticity of host 'github.com (52.74.223.119)' can't be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'github.com,52.74.223.119' (RSA) to the list of known hosts. #You've successfully authenticated, but GitHub does not provide shell access，这点小插曲，英文显示不同意我们上传，这里不要管 #修改`_config.yml`，关联github和本地 deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master npm install hexo-deployer-git --save #安装deploy-git  hexo clean #清除了你之前生成的东西 hexo g #生成静态文章 hexo deploy #部署文章   之后就可以通过http://yourname.github.io访问了。\n [布局说明]:\nHexo 有三种默认布局：post、page 和 draft ，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。\n**[路径]: **postsource/_postspagesourcedraftsource/_drafts\n而new这个命令其实是：hexo new [layout] \u003ctitle\u003e只不过这个layout默认是post罢了。\n[page]：如果你想另起一页，那么可以使用hexo new page board系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是http://xxx.xxx/board\n[draft]：draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以hexo new draft newpage这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用hexo server --draft在本地端口中开启服务预览。\n如果你的草稿文件写完了，想要发表到post中，hexo publish draft newpage就会自动把newpage.md发送到post中。\nCoding部署 📋 去创建一个DevOps项目，名称和地址和你的用户名一样，把上面的SSH再次配置到你的设置里\n1 2 3  ssh -T git@git.coding.net #Hello XXX, You've connected to Coding.net via SSH. This is a personal key. #XXX，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥   连接上之后去你的项目里面的项目概览找到项目的SSH(一开始是HTTPS链接，后面会用来访问)，复制到_config.yml，像下面一样：\n1 2 3 4 5 6  deploy: type: git repository: github: https://github.com/YourgithubName/YourgithubName.github.io.git coding: git@e.coding.net:.../...coding.me.git\tbranch: master   之后 hexo clean 再hexo g -d 部署到Coding上面。去构建与部署里面找到静态网站后开启就可以构建了，可以用这里的网址直接进行访问。\n分流绑定域名 🔒 首先绑定GitHub的，去你的域名控制台，添加域名是@和www的双CNAME记录类型，然后解析线路选择海外。以下列举域名解析记录的不同区别:\n A记录：将域名指向一个IPv4地址（例如：10.10.10.10） NS记录：域名解析服务器记录，如果要将子域名指定某个域名服务器来解析 CNAME记录：如果将域名指向一个域名，实现与被指向域名相同的访问效果 MX记录：建立电子邮箱服务，将指向邮件服务器地址 TXT记录：可任意填写（可为空），通常用作SPF记录（反垃圾）邮件使用 AAAA记录：用来指定主机名（或域名）对应的IPv6地址（例如：ff06:0:0:0:0:0:0:c3）记录 URL转发：将域名指向一个http协议地址，访问域名时，自动跳转到目标地址。若显示则访问时直接显示真实的目标地址，若显示隐藏则访问时会隐藏真实的目标地址  添加完解析之后去github上面绑定域名，在项目的设置里。之后在sourse里面创建一个CNAME的文件，类型是无，记事本把域名抄进去，防止域名以后部署的丢失。之前翻墙看自己的博客是真的快……\n然后是Coding，添加域名是@和www的双CNAME记录类型，然后解析线路选择默认，添加解析即可。访问速度那是嗖嗖的。\nSetting [config.yml]：参照官方。\n[主题修改]：参照官方操作。\nQ\u0026A 放弃Coding为博客代理  与CODING其它产品不同的是，Pages产品服务器设置在境外，原因涉及国内ICP备案、DDOS攻击等众所周知的原因。您在访问时可能会遇到段在中断、高延时等情况。近期，我们已接报了多例同类问题。我们的技术部门已经着手在基础架构、网络环境等方面进行改进，以提升Pages产品的可用性。给您带来不便，我代表CODING产品团队向您表示歉意。希望您对Pages这一业务的特殊性给予一定的理解.\n 自从Pull了一篇维基百科的文章后，访问十分不稳定。原因自然不必我多说，既然是墙内的网站，就一定会有内容审查机制，包括我自己的博客，不知道我的主网站提及科学上网和GFW会不会波及到（已经备案），如果波及到的话，我只能选择购买国外VPS了。如果你到Coding还是半信半疑的话，随便上Coding的反馈区看看就可以知道，虽然访问速度十分快，但是还是会被监管，有强迫症的自己有点受不了。\n 本地浏览和Github代理网页打开不一 [Exp]： 尽量整有源码的东西！\n问题定位在HTML文件的目录书写错误，不太理解网页托管和文件目录索引的PY关系，留Flag！\n 取消TOC的自动排序 😤 找到布局里面的ejs文件，一般在post里面，找到\u003c%- toc(post.content) %\u003e改成\u003c%- toc(post.content, {list_number: false}) %\u003e。\n 暂时就到……\n","description":"","title":"Hello Hexo","uri":"/blog/posts/2019-12-13-hellohexo/"}]
